// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/i538135/go/src/github.com/gardener/machine-controller-manager-provider-azure/vendor/github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-07-01/network/networkapi/interfaces.go

// Package mock_networkapi is a generated GoMock package.
package mock_networkapi

import (
	context "context"
	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-07-01/network"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBaseClientAPI is a mock of BaseClientAPI interface
type MockBaseClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBaseClientAPIMockRecorder
}

// MockBaseClientAPIMockRecorder is the mock recorder for MockBaseClientAPI
type MockBaseClientAPIMockRecorder struct {
	mock *MockBaseClientAPI
}

// NewMockBaseClientAPI creates a new mock instance
func NewMockBaseClientAPI(ctrl *gomock.Controller) *MockBaseClientAPI {
	mock := &MockBaseClientAPI{ctrl: ctrl}
	mock.recorder = &MockBaseClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseClientAPI) EXPECT() *MockBaseClientAPIMockRecorder {
	return m.recorder
}

// CheckDNSNameAvailability mocks base method
func (m *MockBaseClientAPI) CheckDNSNameAvailability(ctx context.Context, location, domainNameLabel string) (network.DNSNameAvailabilityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDNSNameAvailability", ctx, location, domainNameLabel)
	ret0, _ := ret[0].(network.DNSNameAvailabilityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDNSNameAvailability indicates an expected call of CheckDNSNameAvailability
func (mr *MockBaseClientAPIMockRecorder) CheckDNSNameAvailability(ctx, location, domainNameLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDNSNameAvailability", reflect.TypeOf((*MockBaseClientAPI)(nil).CheckDNSNameAvailability), ctx, location, domainNameLabel)
}

// DeleteBastionShareableLink mocks base method
func (m *MockBaseClientAPI) DeleteBastionShareableLink(ctx context.Context, resourceGroupName, bastionHostName string, bslRequest network.BastionShareableLinkListRequest) (network.DeleteBastionShareableLinkFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBastionShareableLink", ctx, resourceGroupName, bastionHostName, bslRequest)
	ret0, _ := ret[0].(network.DeleteBastionShareableLinkFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBastionShareableLink indicates an expected call of DeleteBastionShareableLink
func (mr *MockBaseClientAPIMockRecorder) DeleteBastionShareableLink(ctx, resourceGroupName, bastionHostName, bslRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBastionShareableLink", reflect.TypeOf((*MockBaseClientAPI)(nil).DeleteBastionShareableLink), ctx, resourceGroupName, bastionHostName, bslRequest)
}

// DisconnectActiveSessions mocks base method
func (m *MockBaseClientAPI) DisconnectActiveSessions(ctx context.Context, resourceGroupName, bastionHostName string, sessionIds network.SessionIds) (network.BastionSessionDeleteResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectActiveSessions", ctx, resourceGroupName, bastionHostName, sessionIds)
	ret0, _ := ret[0].(network.BastionSessionDeleteResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectActiveSessions indicates an expected call of DisconnectActiveSessions
func (mr *MockBaseClientAPIMockRecorder) DisconnectActiveSessions(ctx, resourceGroupName, bastionHostName, sessionIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectActiveSessions", reflect.TypeOf((*MockBaseClientAPI)(nil).DisconnectActiveSessions), ctx, resourceGroupName, bastionHostName, sessionIds)
}

// DisconnectActiveSessionsComplete mocks base method
func (m *MockBaseClientAPI) DisconnectActiveSessionsComplete(ctx context.Context, resourceGroupName, bastionHostName string, sessionIds network.SessionIds) (network.BastionSessionDeleteResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectActiveSessionsComplete", ctx, resourceGroupName, bastionHostName, sessionIds)
	ret0, _ := ret[0].(network.BastionSessionDeleteResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectActiveSessionsComplete indicates an expected call of DisconnectActiveSessionsComplete
func (mr *MockBaseClientAPIMockRecorder) DisconnectActiveSessionsComplete(ctx, resourceGroupName, bastionHostName, sessionIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectActiveSessionsComplete", reflect.TypeOf((*MockBaseClientAPI)(nil).DisconnectActiveSessionsComplete), ctx, resourceGroupName, bastionHostName, sessionIds)
}

// Generatevirtualwanvpnserverconfigurationvpnprofile mocks base method
func (m *MockBaseClientAPI) Generatevirtualwanvpnserverconfigurationvpnprofile(ctx context.Context, resourceGroupName, virtualWANName string, vpnClientParams network.VirtualWanVpnProfileParameters) (network.GeneratevirtualwanvpnserverconfigurationvpnprofileFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generatevirtualwanvpnserverconfigurationvpnprofile", ctx, resourceGroupName, virtualWANName, vpnClientParams)
	ret0, _ := ret[0].(network.GeneratevirtualwanvpnserverconfigurationvpnprofileFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generatevirtualwanvpnserverconfigurationvpnprofile indicates an expected call of Generatevirtualwanvpnserverconfigurationvpnprofile
func (mr *MockBaseClientAPIMockRecorder) Generatevirtualwanvpnserverconfigurationvpnprofile(ctx, resourceGroupName, virtualWANName, vpnClientParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generatevirtualwanvpnserverconfigurationvpnprofile", reflect.TypeOf((*MockBaseClientAPI)(nil).Generatevirtualwanvpnserverconfigurationvpnprofile), ctx, resourceGroupName, virtualWANName, vpnClientParams)
}

// GetActiveSessions mocks base method
func (m *MockBaseClientAPI) GetActiveSessions(ctx context.Context, resourceGroupName, bastionHostName string) (network.GetActiveSessionsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSessions", ctx, resourceGroupName, bastionHostName)
	ret0, _ := ret[0].(network.GetActiveSessionsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSessions indicates an expected call of GetActiveSessions
func (mr *MockBaseClientAPIMockRecorder) GetActiveSessions(ctx, resourceGroupName, bastionHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSessions", reflect.TypeOf((*MockBaseClientAPI)(nil).GetActiveSessions), ctx, resourceGroupName, bastionHostName)
}

// GetActiveSessionsComplete mocks base method
func (m *MockBaseClientAPI) GetActiveSessionsComplete(ctx context.Context, resourceGroupName, bastionHostName string) (network.GetActiveSessionsAllFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSessionsComplete", ctx, resourceGroupName, bastionHostName)
	ret0, _ := ret[0].(network.GetActiveSessionsAllFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSessionsComplete indicates an expected call of GetActiveSessionsComplete
func (mr *MockBaseClientAPIMockRecorder) GetActiveSessionsComplete(ctx, resourceGroupName, bastionHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSessionsComplete", reflect.TypeOf((*MockBaseClientAPI)(nil).GetActiveSessionsComplete), ctx, resourceGroupName, bastionHostName)
}

// GetBastionShareableLink mocks base method
func (m *MockBaseClientAPI) GetBastionShareableLink(ctx context.Context, resourceGroupName, bastionHostName string, bslRequest network.BastionShareableLinkListRequest) (network.BastionShareableLinkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBastionShareableLink", ctx, resourceGroupName, bastionHostName, bslRequest)
	ret0, _ := ret[0].(network.BastionShareableLinkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBastionShareableLink indicates an expected call of GetBastionShareableLink
func (mr *MockBaseClientAPIMockRecorder) GetBastionShareableLink(ctx, resourceGroupName, bastionHostName, bslRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBastionShareableLink", reflect.TypeOf((*MockBaseClientAPI)(nil).GetBastionShareableLink), ctx, resourceGroupName, bastionHostName, bslRequest)
}

// GetBastionShareableLinkComplete mocks base method
func (m *MockBaseClientAPI) GetBastionShareableLinkComplete(ctx context.Context, resourceGroupName, bastionHostName string, bslRequest network.BastionShareableLinkListRequest) (network.BastionShareableLinkListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBastionShareableLinkComplete", ctx, resourceGroupName, bastionHostName, bslRequest)
	ret0, _ := ret[0].(network.BastionShareableLinkListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBastionShareableLinkComplete indicates an expected call of GetBastionShareableLinkComplete
func (mr *MockBaseClientAPIMockRecorder) GetBastionShareableLinkComplete(ctx, resourceGroupName, bastionHostName, bslRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBastionShareableLinkComplete", reflect.TypeOf((*MockBaseClientAPI)(nil).GetBastionShareableLinkComplete), ctx, resourceGroupName, bastionHostName, bslRequest)
}

// PutBastionShareableLink mocks base method
func (m *MockBaseClientAPI) PutBastionShareableLink(ctx context.Context, resourceGroupName, bastionHostName string, bslRequest network.BastionShareableLinkListRequest) (network.PutBastionShareableLinkFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBastionShareableLink", ctx, resourceGroupName, bastionHostName, bslRequest)
	ret0, _ := ret[0].(network.PutBastionShareableLinkFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBastionShareableLink indicates an expected call of PutBastionShareableLink
func (mr *MockBaseClientAPIMockRecorder) PutBastionShareableLink(ctx, resourceGroupName, bastionHostName, bslRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBastionShareableLink", reflect.TypeOf((*MockBaseClientAPI)(nil).PutBastionShareableLink), ctx, resourceGroupName, bastionHostName, bslRequest)
}

// PutBastionShareableLinkComplete mocks base method
func (m *MockBaseClientAPI) PutBastionShareableLinkComplete(ctx context.Context, resourceGroupName, bastionHostName string, bslRequest network.BastionShareableLinkListRequest) (network.PutBastionShareableLinkAllFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBastionShareableLinkComplete", ctx, resourceGroupName, bastionHostName, bslRequest)
	ret0, _ := ret[0].(network.PutBastionShareableLinkAllFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBastionShareableLinkComplete indicates an expected call of PutBastionShareableLinkComplete
func (mr *MockBaseClientAPIMockRecorder) PutBastionShareableLinkComplete(ctx, resourceGroupName, bastionHostName, bslRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBastionShareableLinkComplete", reflect.TypeOf((*MockBaseClientAPI)(nil).PutBastionShareableLinkComplete), ctx, resourceGroupName, bastionHostName, bslRequest)
}

// SupportedSecurityProviders mocks base method
func (m *MockBaseClientAPI) SupportedSecurityProviders(ctx context.Context, resourceGroupName, virtualWANName string) (network.VirtualWanSecurityProviders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedSecurityProviders", ctx, resourceGroupName, virtualWANName)
	ret0, _ := ret[0].(network.VirtualWanSecurityProviders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedSecurityProviders indicates an expected call of SupportedSecurityProviders
func (mr *MockBaseClientAPIMockRecorder) SupportedSecurityProviders(ctx, resourceGroupName, virtualWANName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedSecurityProviders", reflect.TypeOf((*MockBaseClientAPI)(nil).SupportedSecurityProviders), ctx, resourceGroupName, virtualWANName)
}

// MockApplicationGatewaysClientAPI is a mock of ApplicationGatewaysClientAPI interface
type MockApplicationGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGatewaysClientAPIMockRecorder
}

// MockApplicationGatewaysClientAPIMockRecorder is the mock recorder for MockApplicationGatewaysClientAPI
type MockApplicationGatewaysClientAPIMockRecorder struct {
	mock *MockApplicationGatewaysClientAPI
}

// NewMockApplicationGatewaysClientAPI creates a new mock instance
func NewMockApplicationGatewaysClientAPI(ctrl *gomock.Controller) *MockApplicationGatewaysClientAPI {
	mock := &MockApplicationGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGatewaysClientAPI) EXPECT() *MockApplicationGatewaysClientAPIMockRecorder {
	return m.recorder
}

// BackendHealth mocks base method
func (m *MockApplicationGatewaysClientAPI) BackendHealth(ctx context.Context, resourceGroupName, applicationGatewayName, expand string) (network.ApplicationGatewaysBackendHealthFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendHealth", ctx, resourceGroupName, applicationGatewayName, expand)
	ret0, _ := ret[0].(network.ApplicationGatewaysBackendHealthFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendHealth indicates an expected call of BackendHealth
func (mr *MockApplicationGatewaysClientAPIMockRecorder) BackendHealth(ctx, resourceGroupName, applicationGatewayName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendHealth", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).BackendHealth), ctx, resourceGroupName, applicationGatewayName, expand)
}

// BackendHealthOnDemand mocks base method
func (m *MockApplicationGatewaysClientAPI) BackendHealthOnDemand(ctx context.Context, resourceGroupName, applicationGatewayName string, probeRequest network.ApplicationGatewayOnDemandProbe, expand string) (network.ApplicationGatewaysBackendHealthOnDemandFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendHealthOnDemand", ctx, resourceGroupName, applicationGatewayName, probeRequest, expand)
	ret0, _ := ret[0].(network.ApplicationGatewaysBackendHealthOnDemandFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendHealthOnDemand indicates an expected call of BackendHealthOnDemand
func (mr *MockApplicationGatewaysClientAPIMockRecorder) BackendHealthOnDemand(ctx, resourceGroupName, applicationGatewayName, probeRequest, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendHealthOnDemand", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).BackendHealthOnDemand), ctx, resourceGroupName, applicationGatewayName, probeRequest, expand)
}

// CreateOrUpdate mocks base method
func (m *MockApplicationGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, applicationGatewayName string, parameters network.ApplicationGateway) (network.ApplicationGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, applicationGatewayName, parameters)
	ret0, _ := ret[0].(network.ApplicationGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockApplicationGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, applicationGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, applicationGatewayName, parameters)
}

// Delete mocks base method
func (m *MockApplicationGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockApplicationGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, applicationGatewayName)
}

// Get mocks base method
func (m *MockApplicationGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockApplicationGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, applicationGatewayName)
}

// GetSslPredefinedPolicy mocks base method
func (m *MockApplicationGatewaysClientAPI) GetSslPredefinedPolicy(ctx context.Context, predefinedPolicyName string) (network.ApplicationGatewaySslPredefinedPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSslPredefinedPolicy", ctx, predefinedPolicyName)
	ret0, _ := ret[0].(network.ApplicationGatewaySslPredefinedPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSslPredefinedPolicy indicates an expected call of GetSslPredefinedPolicy
func (mr *MockApplicationGatewaysClientAPIMockRecorder) GetSslPredefinedPolicy(ctx, predefinedPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSslPredefinedPolicy", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).GetSslPredefinedPolicy), ctx, predefinedPolicyName)
}

// List mocks base method
func (m *MockApplicationGatewaysClientAPI) List(ctx context.Context, resourceGroupName string) (network.ApplicationGatewayListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ApplicationGatewayListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockApplicationGatewaysClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockApplicationGatewaysClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.ApplicationGatewayListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ApplicationGatewayListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAll(ctx context.Context) (network.ApplicationGatewayListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.ApplicationGatewayListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAllComplete(ctx context.Context) (network.ApplicationGatewayListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.ApplicationGatewayListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAllComplete), ctx)
}

// ListAvailableRequestHeaders mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableRequestHeaders(ctx context.Context) (network.ListString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableRequestHeaders", ctx)
	ret0, _ := ret[0].(network.ListString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableRequestHeaders indicates an expected call of ListAvailableRequestHeaders
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableRequestHeaders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableRequestHeaders", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableRequestHeaders), ctx)
}

// ListAvailableResponseHeaders mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableResponseHeaders(ctx context.Context) (network.ListString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableResponseHeaders", ctx)
	ret0, _ := ret[0].(network.ListString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableResponseHeaders indicates an expected call of ListAvailableResponseHeaders
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableResponseHeaders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableResponseHeaders", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableResponseHeaders), ctx)
}

// ListAvailableServerVariables mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableServerVariables(ctx context.Context) (network.ListString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableServerVariables", ctx)
	ret0, _ := ret[0].(network.ListString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableServerVariables indicates an expected call of ListAvailableServerVariables
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableServerVariables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableServerVariables", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableServerVariables), ctx)
}

// ListAvailableSslOptions mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableSslOptions(ctx context.Context) (network.ApplicationGatewayAvailableSslOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSslOptions", ctx)
	ret0, _ := ret[0].(network.ApplicationGatewayAvailableSslOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSslOptions indicates an expected call of ListAvailableSslOptions
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableSslOptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSslOptions", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableSslOptions), ctx)
}

// ListAvailableSslPredefinedPolicies mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableSslPredefinedPolicies(ctx context.Context) (network.ApplicationGatewayAvailableSslPredefinedPoliciesPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSslPredefinedPolicies", ctx)
	ret0, _ := ret[0].(network.ApplicationGatewayAvailableSslPredefinedPoliciesPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSslPredefinedPolicies indicates an expected call of ListAvailableSslPredefinedPolicies
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableSslPredefinedPolicies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSslPredefinedPolicies", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableSslPredefinedPolicies), ctx)
}

// ListAvailableSslPredefinedPoliciesComplete mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableSslPredefinedPoliciesComplete(ctx context.Context) (network.ApplicationGatewayAvailableSslPredefinedPoliciesIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSslPredefinedPoliciesComplete", ctx)
	ret0, _ := ret[0].(network.ApplicationGatewayAvailableSslPredefinedPoliciesIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSslPredefinedPoliciesComplete indicates an expected call of ListAvailableSslPredefinedPoliciesComplete
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableSslPredefinedPoliciesComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSslPredefinedPoliciesComplete", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableSslPredefinedPoliciesComplete), ctx)
}

// ListAvailableWafRuleSets mocks base method
func (m *MockApplicationGatewaysClientAPI) ListAvailableWafRuleSets(ctx context.Context) (network.ApplicationGatewayAvailableWafRuleSetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableWafRuleSets", ctx)
	ret0, _ := ret[0].(network.ApplicationGatewayAvailableWafRuleSetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableWafRuleSets indicates an expected call of ListAvailableWafRuleSets
func (mr *MockApplicationGatewaysClientAPIMockRecorder) ListAvailableWafRuleSets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableWafRuleSets", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).ListAvailableWafRuleSets), ctx)
}

// Start mocks base method
func (m *MockApplicationGatewaysClientAPI) Start(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewaysStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewaysStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockApplicationGatewaysClientAPIMockRecorder) Start(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).Start), ctx, resourceGroupName, applicationGatewayName)
}

// Stop mocks base method
func (m *MockApplicationGatewaysClientAPI) Stop(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewaysStopFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewaysStopFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockApplicationGatewaysClientAPIMockRecorder) Stop(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).Stop), ctx, resourceGroupName, applicationGatewayName)
}

// UpdateTags mocks base method
func (m *MockApplicationGatewaysClientAPI) UpdateTags(ctx context.Context, resourceGroupName, applicationGatewayName string, parameters network.TagsObject) (network.ApplicationGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, applicationGatewayName, parameters)
	ret0, _ := ret[0].(network.ApplicationGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockApplicationGatewaysClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, applicationGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockApplicationGatewaysClientAPI)(nil).UpdateTags), ctx, resourceGroupName, applicationGatewayName, parameters)
}

// MockApplicationGatewayPrivateLinkResourcesClientAPI is a mock of ApplicationGatewayPrivateLinkResourcesClientAPI interface
type MockApplicationGatewayPrivateLinkResourcesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder
}

// MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder is the mock recorder for MockApplicationGatewayPrivateLinkResourcesClientAPI
type MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder struct {
	mock *MockApplicationGatewayPrivateLinkResourcesClientAPI
}

// NewMockApplicationGatewayPrivateLinkResourcesClientAPI creates a new mock instance
func NewMockApplicationGatewayPrivateLinkResourcesClientAPI(ctrl *gomock.Controller) *MockApplicationGatewayPrivateLinkResourcesClientAPI {
	mock := &MockApplicationGatewayPrivateLinkResourcesClientAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGatewayPrivateLinkResourcesClientAPI) EXPECT() *MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockApplicationGatewayPrivateLinkResourcesClientAPI) List(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewayPrivateLinkResourceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateLinkResourceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder) List(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationGatewayPrivateLinkResourcesClientAPI)(nil).List), ctx, resourceGroupName, applicationGatewayName)
}

// ListComplete mocks base method
func (m *MockApplicationGatewayPrivateLinkResourcesClientAPI) ListComplete(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewayPrivateLinkResourceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateLinkResourceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockApplicationGatewayPrivateLinkResourcesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockApplicationGatewayPrivateLinkResourcesClientAPI)(nil).ListComplete), ctx, resourceGroupName, applicationGatewayName)
}

// MockApplicationGatewayPrivateEndpointConnectionsClientAPI is a mock of ApplicationGatewayPrivateEndpointConnectionsClientAPI interface
type MockApplicationGatewayPrivateEndpointConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder
}

// MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder is the mock recorder for MockApplicationGatewayPrivateEndpointConnectionsClientAPI
type MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder struct {
	mock *MockApplicationGatewayPrivateEndpointConnectionsClientAPI
}

// NewMockApplicationGatewayPrivateEndpointConnectionsClientAPI creates a new mock instance
func NewMockApplicationGatewayPrivateEndpointConnectionsClientAPI(ctrl *gomock.Controller) *MockApplicationGatewayPrivateEndpointConnectionsClientAPI {
	mock := &MockApplicationGatewayPrivateEndpointConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGatewayPrivateEndpointConnectionsClientAPI) EXPECT() *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockApplicationGatewayPrivateEndpointConnectionsClientAPI) Delete(ctx context.Context, resourceGroupName, applicationGatewayName, connectionName string) (network.ApplicationGatewayPrivateEndpointConnectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, applicationGatewayName, connectionName)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateEndpointConnectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, applicationGatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplicationGatewayPrivateEndpointConnectionsClientAPI)(nil).Delete), ctx, resourceGroupName, applicationGatewayName, connectionName)
}

// Get mocks base method
func (m *MockApplicationGatewayPrivateEndpointConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, applicationGatewayName, connectionName string) (network.ApplicationGatewayPrivateEndpointConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, applicationGatewayName, connectionName)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateEndpointConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, applicationGatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationGatewayPrivateEndpointConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, applicationGatewayName, connectionName)
}

// List mocks base method
func (m *MockApplicationGatewayPrivateEndpointConnectionsClientAPI) List(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewayPrivateEndpointConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateEndpointConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationGatewayPrivateEndpointConnectionsClientAPI)(nil).List), ctx, resourceGroupName, applicationGatewayName)
}

// ListComplete mocks base method
func (m *MockApplicationGatewayPrivateEndpointConnectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName, applicationGatewayName string) (network.ApplicationGatewayPrivateEndpointConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, applicationGatewayName)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateEndpointConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, applicationGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockApplicationGatewayPrivateEndpointConnectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName, applicationGatewayName)
}

// Update mocks base method
func (m *MockApplicationGatewayPrivateEndpointConnectionsClientAPI) Update(ctx context.Context, resourceGroupName, applicationGatewayName, connectionName string, parameters network.ApplicationGatewayPrivateEndpointConnection) (network.ApplicationGatewayPrivateEndpointConnectionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, applicationGatewayName, connectionName, parameters)
	ret0, _ := ret[0].(network.ApplicationGatewayPrivateEndpointConnectionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockApplicationGatewayPrivateEndpointConnectionsClientAPIMockRecorder) Update(ctx, resourceGroupName, applicationGatewayName, connectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApplicationGatewayPrivateEndpointConnectionsClientAPI)(nil).Update), ctx, resourceGroupName, applicationGatewayName, connectionName, parameters)
}

// MockApplicationSecurityGroupsClientAPI is a mock of ApplicationSecurityGroupsClientAPI interface
type MockApplicationSecurityGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationSecurityGroupsClientAPIMockRecorder
}

// MockApplicationSecurityGroupsClientAPIMockRecorder is the mock recorder for MockApplicationSecurityGroupsClientAPI
type MockApplicationSecurityGroupsClientAPIMockRecorder struct {
	mock *MockApplicationSecurityGroupsClientAPI
}

// NewMockApplicationSecurityGroupsClientAPI creates a new mock instance
func NewMockApplicationSecurityGroupsClientAPI(ctrl *gomock.Controller) *MockApplicationSecurityGroupsClientAPI {
	mock := &MockApplicationSecurityGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationSecurityGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationSecurityGroupsClientAPI) EXPECT() *MockApplicationSecurityGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, applicationSecurityGroupName string, parameters network.ApplicationSecurityGroup) (network.ApplicationSecurityGroupsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, applicationSecurityGroupName, parameters)
	ret0, _ := ret[0].(network.ApplicationSecurityGroupsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, applicationSecurityGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, applicationSecurityGroupName, parameters)
}

// Delete mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, applicationSecurityGroupName string) (network.ApplicationSecurityGroupsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, applicationSecurityGroupName)
	ret0, _ := ret[0].(network.ApplicationSecurityGroupsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, applicationSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, applicationSecurityGroupName)
}

// Get mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) Get(ctx context.Context, resourceGroupName, applicationSecurityGroupName string) (network.ApplicationSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, applicationSecurityGroupName)
	ret0, _ := ret[0].(network.ApplicationSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, applicationSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).Get), ctx, resourceGroupName, applicationSecurityGroupName)
}

// List mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) List(ctx context.Context, resourceGroupName string) (network.ApplicationSecurityGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ApplicationSecurityGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.ApplicationSecurityGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ApplicationSecurityGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) ListAll(ctx context.Context) (network.ApplicationSecurityGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.ApplicationSecurityGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) ListAllComplete(ctx context.Context) (network.ApplicationSecurityGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.ApplicationSecurityGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockApplicationSecurityGroupsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, applicationSecurityGroupName string, parameters network.TagsObject) (network.ApplicationSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, applicationSecurityGroupName, parameters)
	ret0, _ := ret[0].(network.ApplicationSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockApplicationSecurityGroupsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, applicationSecurityGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockApplicationSecurityGroupsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, applicationSecurityGroupName, parameters)
}

// MockAvailableDelegationsClientAPI is a mock of AvailableDelegationsClientAPI interface
type MockAvailableDelegationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAvailableDelegationsClientAPIMockRecorder
}

// MockAvailableDelegationsClientAPIMockRecorder is the mock recorder for MockAvailableDelegationsClientAPI
type MockAvailableDelegationsClientAPIMockRecorder struct {
	mock *MockAvailableDelegationsClientAPI
}

// NewMockAvailableDelegationsClientAPI creates a new mock instance
func NewMockAvailableDelegationsClientAPI(ctrl *gomock.Controller) *MockAvailableDelegationsClientAPI {
	mock := &MockAvailableDelegationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockAvailableDelegationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAvailableDelegationsClientAPI) EXPECT() *MockAvailableDelegationsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAvailableDelegationsClientAPI) List(ctx context.Context, location string) (network.AvailableDelegationsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(network.AvailableDelegationsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAvailableDelegationsClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAvailableDelegationsClientAPI)(nil).List), ctx, location)
}

// ListComplete mocks base method
func (m *MockAvailableDelegationsClientAPI) ListComplete(ctx context.Context, location string) (network.AvailableDelegationsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(network.AvailableDelegationsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockAvailableDelegationsClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAvailableDelegationsClientAPI)(nil).ListComplete), ctx, location)
}

// MockAvailableResourceGroupDelegationsClientAPI is a mock of AvailableResourceGroupDelegationsClientAPI interface
type MockAvailableResourceGroupDelegationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAvailableResourceGroupDelegationsClientAPIMockRecorder
}

// MockAvailableResourceGroupDelegationsClientAPIMockRecorder is the mock recorder for MockAvailableResourceGroupDelegationsClientAPI
type MockAvailableResourceGroupDelegationsClientAPIMockRecorder struct {
	mock *MockAvailableResourceGroupDelegationsClientAPI
}

// NewMockAvailableResourceGroupDelegationsClientAPI creates a new mock instance
func NewMockAvailableResourceGroupDelegationsClientAPI(ctrl *gomock.Controller) *MockAvailableResourceGroupDelegationsClientAPI {
	mock := &MockAvailableResourceGroupDelegationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockAvailableResourceGroupDelegationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAvailableResourceGroupDelegationsClientAPI) EXPECT() *MockAvailableResourceGroupDelegationsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAvailableResourceGroupDelegationsClientAPI) List(ctx context.Context, location, resourceGroupName string) (network.AvailableDelegationsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, resourceGroupName)
	ret0, _ := ret[0].(network.AvailableDelegationsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAvailableResourceGroupDelegationsClientAPIMockRecorder) List(ctx, location, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAvailableResourceGroupDelegationsClientAPI)(nil).List), ctx, location, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockAvailableResourceGroupDelegationsClientAPI) ListComplete(ctx context.Context, location, resourceGroupName string) (network.AvailableDelegationsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location, resourceGroupName)
	ret0, _ := ret[0].(network.AvailableDelegationsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockAvailableResourceGroupDelegationsClientAPIMockRecorder) ListComplete(ctx, location, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAvailableResourceGroupDelegationsClientAPI)(nil).ListComplete), ctx, location, resourceGroupName)
}

// MockAvailableServiceAliasesClientAPI is a mock of AvailableServiceAliasesClientAPI interface
type MockAvailableServiceAliasesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAvailableServiceAliasesClientAPIMockRecorder
}

// MockAvailableServiceAliasesClientAPIMockRecorder is the mock recorder for MockAvailableServiceAliasesClientAPI
type MockAvailableServiceAliasesClientAPIMockRecorder struct {
	mock *MockAvailableServiceAliasesClientAPI
}

// NewMockAvailableServiceAliasesClientAPI creates a new mock instance
func NewMockAvailableServiceAliasesClientAPI(ctrl *gomock.Controller) *MockAvailableServiceAliasesClientAPI {
	mock := &MockAvailableServiceAliasesClientAPI{ctrl: ctrl}
	mock.recorder = &MockAvailableServiceAliasesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAvailableServiceAliasesClientAPI) EXPECT() *MockAvailableServiceAliasesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAvailableServiceAliasesClientAPI) List(ctx context.Context, location string) (network.AvailableServiceAliasesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(network.AvailableServiceAliasesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAvailableServiceAliasesClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAvailableServiceAliasesClientAPI)(nil).List), ctx, location)
}

// ListComplete mocks base method
func (m *MockAvailableServiceAliasesClientAPI) ListComplete(ctx context.Context, location string) (network.AvailableServiceAliasesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(network.AvailableServiceAliasesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockAvailableServiceAliasesClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAvailableServiceAliasesClientAPI)(nil).ListComplete), ctx, location)
}

// ListByResourceGroup mocks base method
func (m *MockAvailableServiceAliasesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName, location string) (network.AvailableServiceAliasesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName, location)
	ret0, _ := ret[0].(network.AvailableServiceAliasesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockAvailableServiceAliasesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockAvailableServiceAliasesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName, location)
}

// ListByResourceGroupComplete mocks base method
func (m *MockAvailableServiceAliasesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName, location string) (network.AvailableServiceAliasesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName, location)
	ret0, _ := ret[0].(network.AvailableServiceAliasesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockAvailableServiceAliasesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockAvailableServiceAliasesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName, location)
}

// MockAzureFirewallsClientAPI is a mock of AzureFirewallsClientAPI interface
type MockAzureFirewallsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAzureFirewallsClientAPIMockRecorder
}

// MockAzureFirewallsClientAPIMockRecorder is the mock recorder for MockAzureFirewallsClientAPI
type MockAzureFirewallsClientAPIMockRecorder struct {
	mock *MockAzureFirewallsClientAPI
}

// NewMockAzureFirewallsClientAPI creates a new mock instance
func NewMockAzureFirewallsClientAPI(ctrl *gomock.Controller) *MockAzureFirewallsClientAPI {
	mock := &MockAzureFirewallsClientAPI{ctrl: ctrl}
	mock.recorder = &MockAzureFirewallsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAzureFirewallsClientAPI) EXPECT() *MockAzureFirewallsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockAzureFirewallsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, azureFirewallName string, parameters network.AzureFirewall) (network.AzureFirewallsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, azureFirewallName, parameters)
	ret0, _ := ret[0].(network.AzureFirewallsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockAzureFirewallsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, azureFirewallName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, azureFirewallName, parameters)
}

// Delete mocks base method
func (m *MockAzureFirewallsClientAPI) Delete(ctx context.Context, resourceGroupName, azureFirewallName string) (network.AzureFirewallsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, azureFirewallName)
	ret0, _ := ret[0].(network.AzureFirewallsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockAzureFirewallsClientAPIMockRecorder) Delete(ctx, resourceGroupName, azureFirewallName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).Delete), ctx, resourceGroupName, azureFirewallName)
}

// Get mocks base method
func (m *MockAzureFirewallsClientAPI) Get(ctx context.Context, resourceGroupName, azureFirewallName string) (network.AzureFirewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, azureFirewallName)
	ret0, _ := ret[0].(network.AzureFirewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAzureFirewallsClientAPIMockRecorder) Get(ctx, resourceGroupName, azureFirewallName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).Get), ctx, resourceGroupName, azureFirewallName)
}

// List mocks base method
func (m *MockAzureFirewallsClientAPI) List(ctx context.Context, resourceGroupName string) (network.AzureFirewallListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.AzureFirewallListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAzureFirewallsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockAzureFirewallsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.AzureFirewallListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.AzureFirewallListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockAzureFirewallsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockAzureFirewallsClientAPI) ListAll(ctx context.Context) (network.AzureFirewallListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.AzureFirewallListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockAzureFirewallsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockAzureFirewallsClientAPI) ListAllComplete(ctx context.Context) (network.AzureFirewallListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.AzureFirewallListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockAzureFirewallsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockAzureFirewallsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, azureFirewallName string, parameters network.TagsObject) (network.AzureFirewallsUpdateTagsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, azureFirewallName, parameters)
	ret0, _ := ret[0].(network.AzureFirewallsUpdateTagsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockAzureFirewallsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, azureFirewallName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockAzureFirewallsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, azureFirewallName, parameters)
}

// MockAzureFirewallFqdnTagsClientAPI is a mock of AzureFirewallFqdnTagsClientAPI interface
type MockAzureFirewallFqdnTagsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAzureFirewallFqdnTagsClientAPIMockRecorder
}

// MockAzureFirewallFqdnTagsClientAPIMockRecorder is the mock recorder for MockAzureFirewallFqdnTagsClientAPI
type MockAzureFirewallFqdnTagsClientAPIMockRecorder struct {
	mock *MockAzureFirewallFqdnTagsClientAPI
}

// NewMockAzureFirewallFqdnTagsClientAPI creates a new mock instance
func NewMockAzureFirewallFqdnTagsClientAPI(ctrl *gomock.Controller) *MockAzureFirewallFqdnTagsClientAPI {
	mock := &MockAzureFirewallFqdnTagsClientAPI{ctrl: ctrl}
	mock.recorder = &MockAzureFirewallFqdnTagsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAzureFirewallFqdnTagsClientAPI) EXPECT() *MockAzureFirewallFqdnTagsClientAPIMockRecorder {
	return m.recorder
}

// ListAll mocks base method
func (m *MockAzureFirewallFqdnTagsClientAPI) ListAll(ctx context.Context) (network.AzureFirewallFqdnTagListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.AzureFirewallFqdnTagListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockAzureFirewallFqdnTagsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAzureFirewallFqdnTagsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockAzureFirewallFqdnTagsClientAPI) ListAllComplete(ctx context.Context) (network.AzureFirewallFqdnTagListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.AzureFirewallFqdnTagListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockAzureFirewallFqdnTagsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockAzureFirewallFqdnTagsClientAPI)(nil).ListAllComplete), ctx)
}

// MockWebCategoriesClientAPI is a mock of WebCategoriesClientAPI interface
type MockWebCategoriesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWebCategoriesClientAPIMockRecorder
}

// MockWebCategoriesClientAPIMockRecorder is the mock recorder for MockWebCategoriesClientAPI
type MockWebCategoriesClientAPIMockRecorder struct {
	mock *MockWebCategoriesClientAPI
}

// NewMockWebCategoriesClientAPI creates a new mock instance
func NewMockWebCategoriesClientAPI(ctrl *gomock.Controller) *MockWebCategoriesClientAPI {
	mock := &MockWebCategoriesClientAPI{ctrl: ctrl}
	mock.recorder = &MockWebCategoriesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebCategoriesClientAPI) EXPECT() *MockWebCategoriesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockWebCategoriesClientAPI) Get(ctx context.Context, name, expand string) (network.AzureWebCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, expand)
	ret0, _ := ret[0].(network.AzureWebCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockWebCategoriesClientAPIMockRecorder) Get(ctx, name, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebCategoriesClientAPI)(nil).Get), ctx, name, expand)
}

// ListBySubscription mocks base method
func (m *MockWebCategoriesClientAPI) ListBySubscription(ctx context.Context) (network.AzureWebCategoryListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(network.AzureWebCategoryListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription
func (mr *MockWebCategoriesClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockWebCategoriesClientAPI)(nil).ListBySubscription), ctx)
}

// ListBySubscriptionComplete mocks base method
func (m *MockWebCategoriesClientAPI) ListBySubscriptionComplete(ctx context.Context) (network.AzureWebCategoryListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx)
	ret0, _ := ret[0].(network.AzureWebCategoryListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete
func (mr *MockWebCategoriesClientAPIMockRecorder) ListBySubscriptionComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockWebCategoriesClientAPI)(nil).ListBySubscriptionComplete), ctx)
}

// MockBastionHostsClientAPI is a mock of BastionHostsClientAPI interface
type MockBastionHostsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBastionHostsClientAPIMockRecorder
}

// MockBastionHostsClientAPIMockRecorder is the mock recorder for MockBastionHostsClientAPI
type MockBastionHostsClientAPIMockRecorder struct {
	mock *MockBastionHostsClientAPI
}

// NewMockBastionHostsClientAPI creates a new mock instance
func NewMockBastionHostsClientAPI(ctrl *gomock.Controller) *MockBastionHostsClientAPI {
	mock := &MockBastionHostsClientAPI{ctrl: ctrl}
	mock.recorder = &MockBastionHostsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBastionHostsClientAPI) EXPECT() *MockBastionHostsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockBastionHostsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, bastionHostName string, parameters network.BastionHost) (network.BastionHostsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, bastionHostName, parameters)
	ret0, _ := ret[0].(network.BastionHostsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockBastionHostsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, bastionHostName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, bastionHostName, parameters)
}

// Delete mocks base method
func (m *MockBastionHostsClientAPI) Delete(ctx context.Context, resourceGroupName, bastionHostName string) (network.BastionHostsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, bastionHostName)
	ret0, _ := ret[0].(network.BastionHostsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockBastionHostsClientAPIMockRecorder) Delete(ctx, resourceGroupName, bastionHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).Delete), ctx, resourceGroupName, bastionHostName)
}

// Get mocks base method
func (m *MockBastionHostsClientAPI) Get(ctx context.Context, resourceGroupName, bastionHostName string) (network.BastionHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, bastionHostName)
	ret0, _ := ret[0].(network.BastionHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBastionHostsClientAPIMockRecorder) Get(ctx, resourceGroupName, bastionHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).Get), ctx, resourceGroupName, bastionHostName)
}

// List mocks base method
func (m *MockBastionHostsClientAPI) List(ctx context.Context) (network.BastionHostListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.BastionHostListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBastionHostsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockBastionHostsClientAPI) ListComplete(ctx context.Context) (network.BastionHostListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.BastionHostListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockBastionHostsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockBastionHostsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.BastionHostListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.BastionHostListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockBastionHostsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockBastionHostsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.BastionHostListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.BastionHostListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockBastionHostsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockBastionHostsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// MockCustomIPPrefixesClientAPI is a mock of CustomIPPrefixesClientAPI interface
type MockCustomIPPrefixesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCustomIPPrefixesClientAPIMockRecorder
}

// MockCustomIPPrefixesClientAPIMockRecorder is the mock recorder for MockCustomIPPrefixesClientAPI
type MockCustomIPPrefixesClientAPIMockRecorder struct {
	mock *MockCustomIPPrefixesClientAPI
}

// NewMockCustomIPPrefixesClientAPI creates a new mock instance
func NewMockCustomIPPrefixesClientAPI(ctrl *gomock.Controller) *MockCustomIPPrefixesClientAPI {
	mock := &MockCustomIPPrefixesClientAPI{ctrl: ctrl}
	mock.recorder = &MockCustomIPPrefixesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomIPPrefixesClientAPI) EXPECT() *MockCustomIPPrefixesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockCustomIPPrefixesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, customIPPrefixName string, parameters network.CustomIPPrefix) (network.CustomIPPrefixesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, customIPPrefixName, parameters)
	ret0, _ := ret[0].(network.CustomIPPrefixesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, customIPPrefixName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, customIPPrefixName, parameters)
}

// Delete mocks base method
func (m *MockCustomIPPrefixesClientAPI) Delete(ctx context.Context, resourceGroupName, customIPPrefixName string) (network.CustomIPPrefixesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, customIPPrefixName)
	ret0, _ := ret[0].(network.CustomIPPrefixesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) Delete(ctx, resourceGroupName, customIPPrefixName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).Delete), ctx, resourceGroupName, customIPPrefixName)
}

// Get mocks base method
func (m *MockCustomIPPrefixesClientAPI) Get(ctx context.Context, resourceGroupName, customIPPrefixName, expand string) (network.CustomIPPrefix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, customIPPrefixName, expand)
	ret0, _ := ret[0].(network.CustomIPPrefix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) Get(ctx, resourceGroupName, customIPPrefixName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).Get), ctx, resourceGroupName, customIPPrefixName, expand)
}

// List mocks base method
func (m *MockCustomIPPrefixesClientAPI) List(ctx context.Context, resourceGroupName string) (network.CustomIPPrefixListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.CustomIPPrefixListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockCustomIPPrefixesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.CustomIPPrefixListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.CustomIPPrefixListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockCustomIPPrefixesClientAPI) ListAll(ctx context.Context) (network.CustomIPPrefixListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.CustomIPPrefixListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockCustomIPPrefixesClientAPI) ListAllComplete(ctx context.Context) (network.CustomIPPrefixListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.CustomIPPrefixListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockCustomIPPrefixesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, customIPPrefixName string, parameters network.TagsObject) (network.CustomIPPrefix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, customIPPrefixName, parameters)
	ret0, _ := ret[0].(network.CustomIPPrefix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockCustomIPPrefixesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, customIPPrefixName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockCustomIPPrefixesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, customIPPrefixName, parameters)
}

// MockDdosCustomPoliciesClientAPI is a mock of DdosCustomPoliciesClientAPI interface
type MockDdosCustomPoliciesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDdosCustomPoliciesClientAPIMockRecorder
}

// MockDdosCustomPoliciesClientAPIMockRecorder is the mock recorder for MockDdosCustomPoliciesClientAPI
type MockDdosCustomPoliciesClientAPIMockRecorder struct {
	mock *MockDdosCustomPoliciesClientAPI
}

// NewMockDdosCustomPoliciesClientAPI creates a new mock instance
func NewMockDdosCustomPoliciesClientAPI(ctrl *gomock.Controller) *MockDdosCustomPoliciesClientAPI {
	mock := &MockDdosCustomPoliciesClientAPI{ctrl: ctrl}
	mock.recorder = &MockDdosCustomPoliciesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDdosCustomPoliciesClientAPI) EXPECT() *MockDdosCustomPoliciesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockDdosCustomPoliciesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, ddosCustomPolicyName string, parameters network.DdosCustomPolicy) (network.DdosCustomPoliciesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, ddosCustomPolicyName, parameters)
	ret0, _ := ret[0].(network.DdosCustomPoliciesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDdosCustomPoliciesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, ddosCustomPolicyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDdosCustomPoliciesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, ddosCustomPolicyName, parameters)
}

// Delete mocks base method
func (m *MockDdosCustomPoliciesClientAPI) Delete(ctx context.Context, resourceGroupName, ddosCustomPolicyName string) (network.DdosCustomPoliciesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, ddosCustomPolicyName)
	ret0, _ := ret[0].(network.DdosCustomPoliciesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockDdosCustomPoliciesClientAPIMockRecorder) Delete(ctx, resourceGroupName, ddosCustomPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDdosCustomPoliciesClientAPI)(nil).Delete), ctx, resourceGroupName, ddosCustomPolicyName)
}

// Get mocks base method
func (m *MockDdosCustomPoliciesClientAPI) Get(ctx context.Context, resourceGroupName, ddosCustomPolicyName string) (network.DdosCustomPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, ddosCustomPolicyName)
	ret0, _ := ret[0].(network.DdosCustomPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDdosCustomPoliciesClientAPIMockRecorder) Get(ctx, resourceGroupName, ddosCustomPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDdosCustomPoliciesClientAPI)(nil).Get), ctx, resourceGroupName, ddosCustomPolicyName)
}

// UpdateTags mocks base method
func (m *MockDdosCustomPoliciesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, ddosCustomPolicyName string, parameters network.TagsObject) (network.DdosCustomPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, ddosCustomPolicyName, parameters)
	ret0, _ := ret[0].(network.DdosCustomPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockDdosCustomPoliciesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, ddosCustomPolicyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockDdosCustomPoliciesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, ddosCustomPolicyName, parameters)
}

// MockDdosProtectionPlansClientAPI is a mock of DdosProtectionPlansClientAPI interface
type MockDdosProtectionPlansClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDdosProtectionPlansClientAPIMockRecorder
}

// MockDdosProtectionPlansClientAPIMockRecorder is the mock recorder for MockDdosProtectionPlansClientAPI
type MockDdosProtectionPlansClientAPIMockRecorder struct {
	mock *MockDdosProtectionPlansClientAPI
}

// NewMockDdosProtectionPlansClientAPI creates a new mock instance
func NewMockDdosProtectionPlansClientAPI(ctrl *gomock.Controller) *MockDdosProtectionPlansClientAPI {
	mock := &MockDdosProtectionPlansClientAPI{ctrl: ctrl}
	mock.recorder = &MockDdosProtectionPlansClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDdosProtectionPlansClientAPI) EXPECT() *MockDdosProtectionPlansClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockDdosProtectionPlansClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, ddosProtectionPlanName string, parameters network.DdosProtectionPlan) (network.DdosProtectionPlansCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, ddosProtectionPlanName, parameters)
	ret0, _ := ret[0].(network.DdosProtectionPlansCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, ddosProtectionPlanName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, ddosProtectionPlanName, parameters)
}

// Delete mocks base method
func (m *MockDdosProtectionPlansClientAPI) Delete(ctx context.Context, resourceGroupName, ddosProtectionPlanName string) (network.DdosProtectionPlansDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, ddosProtectionPlanName)
	ret0, _ := ret[0].(network.DdosProtectionPlansDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) Delete(ctx, resourceGroupName, ddosProtectionPlanName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).Delete), ctx, resourceGroupName, ddosProtectionPlanName)
}

// Get mocks base method
func (m *MockDdosProtectionPlansClientAPI) Get(ctx context.Context, resourceGroupName, ddosProtectionPlanName string) (network.DdosProtectionPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, ddosProtectionPlanName)
	ret0, _ := ret[0].(network.DdosProtectionPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) Get(ctx, resourceGroupName, ddosProtectionPlanName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).Get), ctx, resourceGroupName, ddosProtectionPlanName)
}

// List mocks base method
func (m *MockDdosProtectionPlansClientAPI) List(ctx context.Context) (network.DdosProtectionPlanListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.DdosProtectionPlanListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockDdosProtectionPlansClientAPI) ListComplete(ctx context.Context) (network.DdosProtectionPlanListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.DdosProtectionPlanListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockDdosProtectionPlansClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.DdosProtectionPlanListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.DdosProtectionPlanListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockDdosProtectionPlansClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.DdosProtectionPlanListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.DdosProtectionPlanListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockDdosProtectionPlansClientAPI) UpdateTags(ctx context.Context, resourceGroupName, ddosProtectionPlanName string, parameters network.TagsObject) (network.DdosProtectionPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, ddosProtectionPlanName, parameters)
	ret0, _ := ret[0].(network.DdosProtectionPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockDdosProtectionPlansClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, ddosProtectionPlanName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockDdosProtectionPlansClientAPI)(nil).UpdateTags), ctx, resourceGroupName, ddosProtectionPlanName, parameters)
}

// MockDscpConfigurationClientAPI is a mock of DscpConfigurationClientAPI interface
type MockDscpConfigurationClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDscpConfigurationClientAPIMockRecorder
}

// MockDscpConfigurationClientAPIMockRecorder is the mock recorder for MockDscpConfigurationClientAPI
type MockDscpConfigurationClientAPIMockRecorder struct {
	mock *MockDscpConfigurationClientAPI
}

// NewMockDscpConfigurationClientAPI creates a new mock instance
func NewMockDscpConfigurationClientAPI(ctrl *gomock.Controller) *MockDscpConfigurationClientAPI {
	mock := &MockDscpConfigurationClientAPI{ctrl: ctrl}
	mock.recorder = &MockDscpConfigurationClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDscpConfigurationClientAPI) EXPECT() *MockDscpConfigurationClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockDscpConfigurationClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, dscpConfigurationName string, parameters network.DscpConfiguration) (network.DscpConfigurationCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, dscpConfigurationName, parameters)
	ret0, _ := ret[0].(network.DscpConfigurationCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDscpConfigurationClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, dscpConfigurationName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, dscpConfigurationName, parameters)
}

// Delete mocks base method
func (m *MockDscpConfigurationClientAPI) Delete(ctx context.Context, resourceGroupName, dscpConfigurationName string) (network.DscpConfigurationDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, dscpConfigurationName)
	ret0, _ := ret[0].(network.DscpConfigurationDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockDscpConfigurationClientAPIMockRecorder) Delete(ctx, resourceGroupName, dscpConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).Delete), ctx, resourceGroupName, dscpConfigurationName)
}

// Get mocks base method
func (m *MockDscpConfigurationClientAPI) Get(ctx context.Context, resourceGroupName, dscpConfigurationName string) (network.DscpConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, dscpConfigurationName)
	ret0, _ := ret[0].(network.DscpConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDscpConfigurationClientAPIMockRecorder) Get(ctx, resourceGroupName, dscpConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).Get), ctx, resourceGroupName, dscpConfigurationName)
}

// List mocks base method
func (m *MockDscpConfigurationClientAPI) List(ctx context.Context, resourceGroupName string) (network.DscpConfigurationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.DscpConfigurationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDscpConfigurationClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockDscpConfigurationClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.DscpConfigurationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.DscpConfigurationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockDscpConfigurationClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockDscpConfigurationClientAPI) ListAll(ctx context.Context) (network.DscpConfigurationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.DscpConfigurationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockDscpConfigurationClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockDscpConfigurationClientAPI) ListAllComplete(ctx context.Context) (network.DscpConfigurationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.DscpConfigurationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockDscpConfigurationClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockDscpConfigurationClientAPI)(nil).ListAllComplete), ctx)
}

// MockAvailableEndpointServicesClientAPI is a mock of AvailableEndpointServicesClientAPI interface
type MockAvailableEndpointServicesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAvailableEndpointServicesClientAPIMockRecorder
}

// MockAvailableEndpointServicesClientAPIMockRecorder is the mock recorder for MockAvailableEndpointServicesClientAPI
type MockAvailableEndpointServicesClientAPIMockRecorder struct {
	mock *MockAvailableEndpointServicesClientAPI
}

// NewMockAvailableEndpointServicesClientAPI creates a new mock instance
func NewMockAvailableEndpointServicesClientAPI(ctrl *gomock.Controller) *MockAvailableEndpointServicesClientAPI {
	mock := &MockAvailableEndpointServicesClientAPI{ctrl: ctrl}
	mock.recorder = &MockAvailableEndpointServicesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAvailableEndpointServicesClientAPI) EXPECT() *MockAvailableEndpointServicesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAvailableEndpointServicesClientAPI) List(ctx context.Context, location string) (network.EndpointServicesListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(network.EndpointServicesListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAvailableEndpointServicesClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAvailableEndpointServicesClientAPI)(nil).List), ctx, location)
}

// ListComplete mocks base method
func (m *MockAvailableEndpointServicesClientAPI) ListComplete(ctx context.Context, location string) (network.EndpointServicesListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(network.EndpointServicesListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockAvailableEndpointServicesClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAvailableEndpointServicesClientAPI)(nil).ListComplete), ctx, location)
}

// MockExpressRouteCircuitAuthorizationsClientAPI is a mock of ExpressRouteCircuitAuthorizationsClientAPI interface
type MockExpressRouteCircuitAuthorizationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder
}

// MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder is the mock recorder for MockExpressRouteCircuitAuthorizationsClientAPI
type MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder struct {
	mock *MockExpressRouteCircuitAuthorizationsClientAPI
}

// NewMockExpressRouteCircuitAuthorizationsClientAPI creates a new mock instance
func NewMockExpressRouteCircuitAuthorizationsClientAPI(ctrl *gomock.Controller) *MockExpressRouteCircuitAuthorizationsClientAPI {
	mock := &MockExpressRouteCircuitAuthorizationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteCircuitAuthorizationsClientAPI) EXPECT() *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteCircuitAuthorizationsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, circuitName, authorizationName string, authorizationParameters network.ExpressRouteCircuitAuthorization) (network.ExpressRouteCircuitAuthorizationsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, circuitName, authorizationName, authorizationParameters)
	ret0, _ := ret[0].(network.ExpressRouteCircuitAuthorizationsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, circuitName, authorizationName, authorizationParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteCircuitAuthorizationsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, circuitName, authorizationName, authorizationParameters)
}

// Delete mocks base method
func (m *MockExpressRouteCircuitAuthorizationsClientAPI) Delete(ctx context.Context, resourceGroupName, circuitName, authorizationName string) (network.ExpressRouteCircuitAuthorizationsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, circuitName, authorizationName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitAuthorizationsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder) Delete(ctx, resourceGroupName, circuitName, authorizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteCircuitAuthorizationsClientAPI)(nil).Delete), ctx, resourceGroupName, circuitName, authorizationName)
}

// Get mocks base method
func (m *MockExpressRouteCircuitAuthorizationsClientAPI) Get(ctx context.Context, resourceGroupName, circuitName, authorizationName string) (network.ExpressRouteCircuitAuthorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, circuitName, authorizationName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitAuthorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder) Get(ctx, resourceGroupName, circuitName, authorizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteCircuitAuthorizationsClientAPI)(nil).Get), ctx, resourceGroupName, circuitName, authorizationName)
}

// List mocks base method
func (m *MockExpressRouteCircuitAuthorizationsClientAPI) List(ctx context.Context, resourceGroupName, circuitName string) (network.AuthorizationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.AuthorizationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder) List(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteCircuitAuthorizationsClientAPI)(nil).List), ctx, resourceGroupName, circuitName)
}

// ListComplete mocks base method
func (m *MockExpressRouteCircuitAuthorizationsClientAPI) ListComplete(ctx context.Context, resourceGroupName, circuitName string) (network.AuthorizationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.AuthorizationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteCircuitAuthorizationsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteCircuitAuthorizationsClientAPI)(nil).ListComplete), ctx, resourceGroupName, circuitName)
}

// MockExpressRouteCircuitPeeringsClientAPI is a mock of ExpressRouteCircuitPeeringsClientAPI interface
type MockExpressRouteCircuitPeeringsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteCircuitPeeringsClientAPIMockRecorder
}

// MockExpressRouteCircuitPeeringsClientAPIMockRecorder is the mock recorder for MockExpressRouteCircuitPeeringsClientAPI
type MockExpressRouteCircuitPeeringsClientAPIMockRecorder struct {
	mock *MockExpressRouteCircuitPeeringsClientAPI
}

// NewMockExpressRouteCircuitPeeringsClientAPI creates a new mock instance
func NewMockExpressRouteCircuitPeeringsClientAPI(ctrl *gomock.Controller) *MockExpressRouteCircuitPeeringsClientAPI {
	mock := &MockExpressRouteCircuitPeeringsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteCircuitPeeringsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteCircuitPeeringsClientAPI) EXPECT() *MockExpressRouteCircuitPeeringsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteCircuitPeeringsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, circuitName, peeringName string, peeringParameters network.ExpressRouteCircuitPeering) (network.ExpressRouteCircuitPeeringsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, circuitName, peeringName, peeringParameters)
	ret0, _ := ret[0].(network.ExpressRouteCircuitPeeringsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteCircuitPeeringsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, circuitName, peeringName, peeringParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteCircuitPeeringsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, circuitName, peeringName, peeringParameters)
}

// Delete mocks base method
func (m *MockExpressRouteCircuitPeeringsClientAPI) Delete(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.ExpressRouteCircuitPeeringsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitPeeringsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteCircuitPeeringsClientAPIMockRecorder) Delete(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteCircuitPeeringsClientAPI)(nil).Delete), ctx, resourceGroupName, circuitName, peeringName)
}

// Get mocks base method
func (m *MockExpressRouteCircuitPeeringsClientAPI) Get(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.ExpressRouteCircuitPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteCircuitPeeringsClientAPIMockRecorder) Get(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteCircuitPeeringsClientAPI)(nil).Get), ctx, resourceGroupName, circuitName, peeringName)
}

// List mocks base method
func (m *MockExpressRouteCircuitPeeringsClientAPI) List(ctx context.Context, resourceGroupName, circuitName string) (network.ExpressRouteCircuitPeeringListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitPeeringListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteCircuitPeeringsClientAPIMockRecorder) List(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteCircuitPeeringsClientAPI)(nil).List), ctx, resourceGroupName, circuitName)
}

// ListComplete mocks base method
func (m *MockExpressRouteCircuitPeeringsClientAPI) ListComplete(ctx context.Context, resourceGroupName, circuitName string) (network.ExpressRouteCircuitPeeringListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitPeeringListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteCircuitPeeringsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteCircuitPeeringsClientAPI)(nil).ListComplete), ctx, resourceGroupName, circuitName)
}

// MockExpressRouteCircuitConnectionsClientAPI is a mock of ExpressRouteCircuitConnectionsClientAPI interface
type MockExpressRouteCircuitConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteCircuitConnectionsClientAPIMockRecorder
}

// MockExpressRouteCircuitConnectionsClientAPIMockRecorder is the mock recorder for MockExpressRouteCircuitConnectionsClientAPI
type MockExpressRouteCircuitConnectionsClientAPIMockRecorder struct {
	mock *MockExpressRouteCircuitConnectionsClientAPI
}

// NewMockExpressRouteCircuitConnectionsClientAPI creates a new mock instance
func NewMockExpressRouteCircuitConnectionsClientAPI(ctrl *gomock.Controller) *MockExpressRouteCircuitConnectionsClientAPI {
	mock := &MockExpressRouteCircuitConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteCircuitConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteCircuitConnectionsClientAPI) EXPECT() *MockExpressRouteCircuitConnectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteCircuitConnectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, circuitName, peeringName, connectionName string, expressRouteCircuitConnectionParameters network.ExpressRouteCircuitConnection) (network.ExpressRouteCircuitConnectionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, circuitName, peeringName, connectionName, expressRouteCircuitConnectionParameters)
	ret0, _ := ret[0].(network.ExpressRouteCircuitConnectionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteCircuitConnectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, circuitName, peeringName, connectionName, expressRouteCircuitConnectionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteCircuitConnectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, circuitName, peeringName, connectionName, expressRouteCircuitConnectionParameters)
}

// Delete mocks base method
func (m *MockExpressRouteCircuitConnectionsClientAPI) Delete(ctx context.Context, resourceGroupName, circuitName, peeringName, connectionName string) (network.ExpressRouteCircuitConnectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, circuitName, peeringName, connectionName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitConnectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteCircuitConnectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, circuitName, peeringName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteCircuitConnectionsClientAPI)(nil).Delete), ctx, resourceGroupName, circuitName, peeringName, connectionName)
}

// Get mocks base method
func (m *MockExpressRouteCircuitConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, circuitName, peeringName, connectionName string) (network.ExpressRouteCircuitConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, circuitName, peeringName, connectionName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteCircuitConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, circuitName, peeringName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteCircuitConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, circuitName, peeringName, connectionName)
}

// List mocks base method
func (m *MockExpressRouteCircuitConnectionsClientAPI) List(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.ExpressRouteCircuitConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteCircuitConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteCircuitConnectionsClientAPI)(nil).List), ctx, resourceGroupName, circuitName, peeringName)
}

// ListComplete mocks base method
func (m *MockExpressRouteCircuitConnectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.ExpressRouteCircuitConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteCircuitConnectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteCircuitConnectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName, circuitName, peeringName)
}

// MockPeerExpressRouteCircuitConnectionsClientAPI is a mock of PeerExpressRouteCircuitConnectionsClientAPI interface
type MockPeerExpressRouteCircuitConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder
}

// MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder is the mock recorder for MockPeerExpressRouteCircuitConnectionsClientAPI
type MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder struct {
	mock *MockPeerExpressRouteCircuitConnectionsClientAPI
}

// NewMockPeerExpressRouteCircuitConnectionsClientAPI creates a new mock instance
func NewMockPeerExpressRouteCircuitConnectionsClientAPI(ctrl *gomock.Controller) *MockPeerExpressRouteCircuitConnectionsClientAPI {
	mock := &MockPeerExpressRouteCircuitConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPeerExpressRouteCircuitConnectionsClientAPI) EXPECT() *MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPeerExpressRouteCircuitConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, circuitName, peeringName, connectionName string) (network.PeerExpressRouteCircuitConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, circuitName, peeringName, connectionName)
	ret0, _ := ret[0].(network.PeerExpressRouteCircuitConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, circuitName, peeringName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerExpressRouteCircuitConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, circuitName, peeringName, connectionName)
}

// List mocks base method
func (m *MockPeerExpressRouteCircuitConnectionsClientAPI) List(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.PeerExpressRouteCircuitConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.PeerExpressRouteCircuitConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPeerExpressRouteCircuitConnectionsClientAPI)(nil).List), ctx, resourceGroupName, circuitName, peeringName)
}

// ListComplete mocks base method
func (m *MockPeerExpressRouteCircuitConnectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.PeerExpressRouteCircuitConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.PeerExpressRouteCircuitConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockPeerExpressRouteCircuitConnectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockPeerExpressRouteCircuitConnectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName, circuitName, peeringName)
}

// MockExpressRouteCircuitsClientAPI is a mock of ExpressRouteCircuitsClientAPI interface
type MockExpressRouteCircuitsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteCircuitsClientAPIMockRecorder
}

// MockExpressRouteCircuitsClientAPIMockRecorder is the mock recorder for MockExpressRouteCircuitsClientAPI
type MockExpressRouteCircuitsClientAPIMockRecorder struct {
	mock *MockExpressRouteCircuitsClientAPI
}

// NewMockExpressRouteCircuitsClientAPI creates a new mock instance
func NewMockExpressRouteCircuitsClientAPI(ctrl *gomock.Controller) *MockExpressRouteCircuitsClientAPI {
	mock := &MockExpressRouteCircuitsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteCircuitsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteCircuitsClientAPI) EXPECT() *MockExpressRouteCircuitsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteCircuitsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, circuitName string, parameters network.ExpressRouteCircuit) (network.ExpressRouteCircuitsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, circuitName, parameters)
	ret0, _ := ret[0].(network.ExpressRouteCircuitsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, circuitName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, circuitName, parameters)
}

// Delete mocks base method
func (m *MockExpressRouteCircuitsClientAPI) Delete(ctx context.Context, resourceGroupName, circuitName string) (network.ExpressRouteCircuitsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) Delete(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).Delete), ctx, resourceGroupName, circuitName)
}

// Get mocks base method
func (m *MockExpressRouteCircuitsClientAPI) Get(ctx context.Context, resourceGroupName, circuitName string) (network.ExpressRouteCircuit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.ExpressRouteCircuit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) Get(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).Get), ctx, resourceGroupName, circuitName)
}

// GetPeeringStats mocks base method
func (m *MockExpressRouteCircuitsClientAPI) GetPeeringStats(ctx context.Context, resourceGroupName, circuitName, peeringName string) (network.ExpressRouteCircuitStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeeringStats", ctx, resourceGroupName, circuitName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeeringStats indicates an expected call of GetPeeringStats
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) GetPeeringStats(ctx, resourceGroupName, circuitName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeeringStats", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).GetPeeringStats), ctx, resourceGroupName, circuitName, peeringName)
}

// GetStats mocks base method
func (m *MockExpressRouteCircuitsClientAPI) GetStats(ctx context.Context, resourceGroupName, circuitName string) (network.ExpressRouteCircuitStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, resourceGroupName, circuitName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) GetStats(ctx, resourceGroupName, circuitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).GetStats), ctx, resourceGroupName, circuitName)
}

// List mocks base method
func (m *MockExpressRouteCircuitsClientAPI) List(ctx context.Context, resourceGroupName string) (network.ExpressRouteCircuitListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockExpressRouteCircuitsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.ExpressRouteCircuitListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRouteCircuitListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockExpressRouteCircuitsClientAPI) ListAll(ctx context.Context) (network.ExpressRouteCircuitListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.ExpressRouteCircuitListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockExpressRouteCircuitsClientAPI) ListAllComplete(ctx context.Context) (network.ExpressRouteCircuitListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.ExpressRouteCircuitListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).ListAllComplete), ctx)
}

// ListArpTable mocks base method
func (m *MockExpressRouteCircuitsClientAPI) ListArpTable(ctx context.Context, resourceGroupName, circuitName, peeringName, devicePath string) (network.ExpressRouteCircuitsListArpTableFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArpTable", ctx, resourceGroupName, circuitName, peeringName, devicePath)
	ret0, _ := ret[0].(network.ExpressRouteCircuitsListArpTableFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArpTable indicates an expected call of ListArpTable
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) ListArpTable(ctx, resourceGroupName, circuitName, peeringName, devicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArpTable", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).ListArpTable), ctx, resourceGroupName, circuitName, peeringName, devicePath)
}

// ListRoutesTable mocks base method
func (m *MockExpressRouteCircuitsClientAPI) ListRoutesTable(ctx context.Context, resourceGroupName, circuitName, peeringName, devicePath string) (network.ExpressRouteCircuitsListRoutesTableFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesTable", ctx, resourceGroupName, circuitName, peeringName, devicePath)
	ret0, _ := ret[0].(network.ExpressRouteCircuitsListRoutesTableFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesTable indicates an expected call of ListRoutesTable
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) ListRoutesTable(ctx, resourceGroupName, circuitName, peeringName, devicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesTable", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).ListRoutesTable), ctx, resourceGroupName, circuitName, peeringName, devicePath)
}

// ListRoutesTableSummary mocks base method
func (m *MockExpressRouteCircuitsClientAPI) ListRoutesTableSummary(ctx context.Context, resourceGroupName, circuitName, peeringName, devicePath string) (network.ExpressRouteCircuitsListRoutesTableSummaryFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesTableSummary", ctx, resourceGroupName, circuitName, peeringName, devicePath)
	ret0, _ := ret[0].(network.ExpressRouteCircuitsListRoutesTableSummaryFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesTableSummary indicates an expected call of ListRoutesTableSummary
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) ListRoutesTableSummary(ctx, resourceGroupName, circuitName, peeringName, devicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesTableSummary", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).ListRoutesTableSummary), ctx, resourceGroupName, circuitName, peeringName, devicePath)
}

// UpdateTags mocks base method
func (m *MockExpressRouteCircuitsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, circuitName string, parameters network.TagsObject) (network.ExpressRouteCircuit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, circuitName, parameters)
	ret0, _ := ret[0].(network.ExpressRouteCircuit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockExpressRouteCircuitsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, circuitName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockExpressRouteCircuitsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, circuitName, parameters)
}

// MockExpressRouteServiceProvidersClientAPI is a mock of ExpressRouteServiceProvidersClientAPI interface
type MockExpressRouteServiceProvidersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteServiceProvidersClientAPIMockRecorder
}

// MockExpressRouteServiceProvidersClientAPIMockRecorder is the mock recorder for MockExpressRouteServiceProvidersClientAPI
type MockExpressRouteServiceProvidersClientAPIMockRecorder struct {
	mock *MockExpressRouteServiceProvidersClientAPI
}

// NewMockExpressRouteServiceProvidersClientAPI creates a new mock instance
func NewMockExpressRouteServiceProvidersClientAPI(ctrl *gomock.Controller) *MockExpressRouteServiceProvidersClientAPI {
	mock := &MockExpressRouteServiceProvidersClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteServiceProvidersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteServiceProvidersClientAPI) EXPECT() *MockExpressRouteServiceProvidersClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockExpressRouteServiceProvidersClientAPI) List(ctx context.Context) (network.ExpressRouteServiceProviderListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ExpressRouteServiceProviderListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteServiceProvidersClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteServiceProvidersClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockExpressRouteServiceProvidersClientAPI) ListComplete(ctx context.Context) (network.ExpressRouteServiceProviderListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ExpressRouteServiceProviderListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteServiceProvidersClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteServiceProvidersClientAPI)(nil).ListComplete), ctx)
}

// MockExpressRouteCrossConnectionsClientAPI is a mock of ExpressRouteCrossConnectionsClientAPI interface
type MockExpressRouteCrossConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteCrossConnectionsClientAPIMockRecorder
}

// MockExpressRouteCrossConnectionsClientAPIMockRecorder is the mock recorder for MockExpressRouteCrossConnectionsClientAPI
type MockExpressRouteCrossConnectionsClientAPIMockRecorder struct {
	mock *MockExpressRouteCrossConnectionsClientAPI
}

// NewMockExpressRouteCrossConnectionsClientAPI creates a new mock instance
func NewMockExpressRouteCrossConnectionsClientAPI(ctrl *gomock.Controller) *MockExpressRouteCrossConnectionsClientAPI {
	mock := &MockExpressRouteCrossConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteCrossConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteCrossConnectionsClientAPI) EXPECT() *MockExpressRouteCrossConnectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, crossConnectionName string, parameters network.ExpressRouteCrossConnection) (network.ExpressRouteCrossConnectionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, crossConnectionName, parameters)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, crossConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, crossConnectionName, parameters)
}

// Get mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, crossConnectionName string) (network.ExpressRouteCrossConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, crossConnectionName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, crossConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, crossConnectionName)
}

// List mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) List(ctx context.Context) (network.ExpressRouteCrossConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) ListComplete(ctx context.Context) (network.ExpressRouteCrossConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).ListComplete), ctx)
}

// ListArpTable mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) ListArpTable(ctx context.Context, resourceGroupName, crossConnectionName, peeringName, devicePath string) (network.ExpressRouteCrossConnectionsListArpTableFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArpTable", ctx, resourceGroupName, crossConnectionName, peeringName, devicePath)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionsListArpTableFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArpTable indicates an expected call of ListArpTable
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) ListArpTable(ctx, resourceGroupName, crossConnectionName, peeringName, devicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArpTable", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).ListArpTable), ctx, resourceGroupName, crossConnectionName, peeringName, devicePath)
}

// ListByResourceGroup mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ExpressRouteCrossConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ExpressRouteCrossConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListRoutesTable mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) ListRoutesTable(ctx context.Context, resourceGroupName, crossConnectionName, peeringName, devicePath string) (network.ExpressRouteCrossConnectionsListRoutesTableFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesTable", ctx, resourceGroupName, crossConnectionName, peeringName, devicePath)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionsListRoutesTableFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesTable indicates an expected call of ListRoutesTable
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) ListRoutesTable(ctx, resourceGroupName, crossConnectionName, peeringName, devicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesTable", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).ListRoutesTable), ctx, resourceGroupName, crossConnectionName, peeringName, devicePath)
}

// ListRoutesTableSummary mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) ListRoutesTableSummary(ctx context.Context, resourceGroupName, crossConnectionName, peeringName, devicePath string) (network.ExpressRouteCrossConnectionsListRoutesTableSummaryFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesTableSummary", ctx, resourceGroupName, crossConnectionName, peeringName, devicePath)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionsListRoutesTableSummaryFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesTableSummary indicates an expected call of ListRoutesTableSummary
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) ListRoutesTableSummary(ctx, resourceGroupName, crossConnectionName, peeringName, devicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesTableSummary", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).ListRoutesTableSummary), ctx, resourceGroupName, crossConnectionName, peeringName, devicePath)
}

// UpdateTags mocks base method
func (m *MockExpressRouteCrossConnectionsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, crossConnectionName string, crossConnectionParameters network.TagsObject) (network.ExpressRouteCrossConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, crossConnectionName, crossConnectionParameters)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockExpressRouteCrossConnectionsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, crossConnectionName, crossConnectionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockExpressRouteCrossConnectionsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, crossConnectionName, crossConnectionParameters)
}

// MockExpressRouteCrossConnectionPeeringsClientAPI is a mock of ExpressRouteCrossConnectionPeeringsClientAPI interface
type MockExpressRouteCrossConnectionPeeringsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder
}

// MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder is the mock recorder for MockExpressRouteCrossConnectionPeeringsClientAPI
type MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder struct {
	mock *MockExpressRouteCrossConnectionPeeringsClientAPI
}

// NewMockExpressRouteCrossConnectionPeeringsClientAPI creates a new mock instance
func NewMockExpressRouteCrossConnectionPeeringsClientAPI(ctrl *gomock.Controller) *MockExpressRouteCrossConnectionPeeringsClientAPI {
	mock := &MockExpressRouteCrossConnectionPeeringsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteCrossConnectionPeeringsClientAPI) EXPECT() *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteCrossConnectionPeeringsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, crossConnectionName, peeringName string, peeringParameters network.ExpressRouteCrossConnectionPeering) (network.ExpressRouteCrossConnectionPeeringsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, crossConnectionName, peeringName, peeringParameters)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionPeeringsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, crossConnectionName, peeringName, peeringParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteCrossConnectionPeeringsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, crossConnectionName, peeringName, peeringParameters)
}

// Delete mocks base method
func (m *MockExpressRouteCrossConnectionPeeringsClientAPI) Delete(ctx context.Context, resourceGroupName, crossConnectionName, peeringName string) (network.ExpressRouteCrossConnectionPeeringsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, crossConnectionName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionPeeringsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder) Delete(ctx, resourceGroupName, crossConnectionName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteCrossConnectionPeeringsClientAPI)(nil).Delete), ctx, resourceGroupName, crossConnectionName, peeringName)
}

// Get mocks base method
func (m *MockExpressRouteCrossConnectionPeeringsClientAPI) Get(ctx context.Context, resourceGroupName, crossConnectionName, peeringName string) (network.ExpressRouteCrossConnectionPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, crossConnectionName, peeringName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder) Get(ctx, resourceGroupName, crossConnectionName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteCrossConnectionPeeringsClientAPI)(nil).Get), ctx, resourceGroupName, crossConnectionName, peeringName)
}

// List mocks base method
func (m *MockExpressRouteCrossConnectionPeeringsClientAPI) List(ctx context.Context, resourceGroupName, crossConnectionName string) (network.ExpressRouteCrossConnectionPeeringListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, crossConnectionName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionPeeringListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder) List(ctx, resourceGroupName, crossConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteCrossConnectionPeeringsClientAPI)(nil).List), ctx, resourceGroupName, crossConnectionName)
}

// ListComplete mocks base method
func (m *MockExpressRouteCrossConnectionPeeringsClientAPI) ListComplete(ctx context.Context, resourceGroupName, crossConnectionName string) (network.ExpressRouteCrossConnectionPeeringListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, crossConnectionName)
	ret0, _ := ret[0].(network.ExpressRouteCrossConnectionPeeringListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteCrossConnectionPeeringsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, crossConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteCrossConnectionPeeringsClientAPI)(nil).ListComplete), ctx, resourceGroupName, crossConnectionName)
}

// MockExpressRoutePortsLocationsClientAPI is a mock of ExpressRoutePortsLocationsClientAPI interface
type MockExpressRoutePortsLocationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRoutePortsLocationsClientAPIMockRecorder
}

// MockExpressRoutePortsLocationsClientAPIMockRecorder is the mock recorder for MockExpressRoutePortsLocationsClientAPI
type MockExpressRoutePortsLocationsClientAPIMockRecorder struct {
	mock *MockExpressRoutePortsLocationsClientAPI
}

// NewMockExpressRoutePortsLocationsClientAPI creates a new mock instance
func NewMockExpressRoutePortsLocationsClientAPI(ctrl *gomock.Controller) *MockExpressRoutePortsLocationsClientAPI {
	mock := &MockExpressRoutePortsLocationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRoutePortsLocationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRoutePortsLocationsClientAPI) EXPECT() *MockExpressRoutePortsLocationsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockExpressRoutePortsLocationsClientAPI) Get(ctx context.Context, locationName string) (network.ExpressRoutePortsLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, locationName)
	ret0, _ := ret[0].(network.ExpressRoutePortsLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRoutePortsLocationsClientAPIMockRecorder) Get(ctx, locationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRoutePortsLocationsClientAPI)(nil).Get), ctx, locationName)
}

// List mocks base method
func (m *MockExpressRoutePortsLocationsClientAPI) List(ctx context.Context) (network.ExpressRoutePortsLocationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ExpressRoutePortsLocationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRoutePortsLocationsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRoutePortsLocationsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockExpressRoutePortsLocationsClientAPI) ListComplete(ctx context.Context) (network.ExpressRoutePortsLocationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ExpressRoutePortsLocationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRoutePortsLocationsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRoutePortsLocationsClientAPI)(nil).ListComplete), ctx)
}

// MockExpressRoutePortsClientAPI is a mock of ExpressRoutePortsClientAPI interface
type MockExpressRoutePortsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRoutePortsClientAPIMockRecorder
}

// MockExpressRoutePortsClientAPIMockRecorder is the mock recorder for MockExpressRoutePortsClientAPI
type MockExpressRoutePortsClientAPIMockRecorder struct {
	mock *MockExpressRoutePortsClientAPI
}

// NewMockExpressRoutePortsClientAPI creates a new mock instance
func NewMockExpressRoutePortsClientAPI(ctrl *gomock.Controller) *MockExpressRoutePortsClientAPI {
	mock := &MockExpressRoutePortsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRoutePortsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRoutePortsClientAPI) EXPECT() *MockExpressRoutePortsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRoutePortsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, expressRoutePortName string, parameters network.ExpressRoutePort) (network.ExpressRoutePortsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, expressRoutePortName, parameters)
	ret0, _ := ret[0].(network.ExpressRoutePortsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRoutePortsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, expressRoutePortName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, expressRoutePortName, parameters)
}

// Delete mocks base method
func (m *MockExpressRoutePortsClientAPI) Delete(ctx context.Context, resourceGroupName, expressRoutePortName string) (network.ExpressRoutePortsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, expressRoutePortName)
	ret0, _ := ret[0].(network.ExpressRoutePortsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRoutePortsClientAPIMockRecorder) Delete(ctx, resourceGroupName, expressRoutePortName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).Delete), ctx, resourceGroupName, expressRoutePortName)
}

// GenerateLOA mocks base method
func (m *MockExpressRoutePortsClientAPI) GenerateLOA(ctx context.Context, resourceGroupName, expressRoutePortName string, request network.GenerateExpressRoutePortsLOARequest) (network.GenerateExpressRoutePortsLOAResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLOA", ctx, resourceGroupName, expressRoutePortName, request)
	ret0, _ := ret[0].(network.GenerateExpressRoutePortsLOAResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateLOA indicates an expected call of GenerateLOA
func (mr *MockExpressRoutePortsClientAPIMockRecorder) GenerateLOA(ctx, resourceGroupName, expressRoutePortName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLOA", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).GenerateLOA), ctx, resourceGroupName, expressRoutePortName, request)
}

// Get mocks base method
func (m *MockExpressRoutePortsClientAPI) Get(ctx context.Context, resourceGroupName, expressRoutePortName string) (network.ExpressRoutePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, expressRoutePortName)
	ret0, _ := ret[0].(network.ExpressRoutePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRoutePortsClientAPIMockRecorder) Get(ctx, resourceGroupName, expressRoutePortName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).Get), ctx, resourceGroupName, expressRoutePortName)
}

// List mocks base method
func (m *MockExpressRoutePortsClientAPI) List(ctx context.Context) (network.ExpressRoutePortListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ExpressRoutePortListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRoutePortsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockExpressRoutePortsClientAPI) ListComplete(ctx context.Context) (network.ExpressRoutePortListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ExpressRoutePortListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRoutePortsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockExpressRoutePortsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ExpressRoutePortListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRoutePortListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockExpressRoutePortsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockExpressRoutePortsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ExpressRoutePortListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRoutePortListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockExpressRoutePortsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockExpressRoutePortsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, expressRoutePortName string, parameters network.TagsObject) (network.ExpressRoutePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, expressRoutePortName, parameters)
	ret0, _ := ret[0].(network.ExpressRoutePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockExpressRoutePortsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, expressRoutePortName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockExpressRoutePortsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, expressRoutePortName, parameters)
}

// MockExpressRouteLinksClientAPI is a mock of ExpressRouteLinksClientAPI interface
type MockExpressRouteLinksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteLinksClientAPIMockRecorder
}

// MockExpressRouteLinksClientAPIMockRecorder is the mock recorder for MockExpressRouteLinksClientAPI
type MockExpressRouteLinksClientAPIMockRecorder struct {
	mock *MockExpressRouteLinksClientAPI
}

// NewMockExpressRouteLinksClientAPI creates a new mock instance
func NewMockExpressRouteLinksClientAPI(ctrl *gomock.Controller) *MockExpressRouteLinksClientAPI {
	mock := &MockExpressRouteLinksClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteLinksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteLinksClientAPI) EXPECT() *MockExpressRouteLinksClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockExpressRouteLinksClientAPI) Get(ctx context.Context, resourceGroupName, expressRoutePortName, linkName string) (network.ExpressRouteLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, expressRoutePortName, linkName)
	ret0, _ := ret[0].(network.ExpressRouteLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteLinksClientAPIMockRecorder) Get(ctx, resourceGroupName, expressRoutePortName, linkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteLinksClientAPI)(nil).Get), ctx, resourceGroupName, expressRoutePortName, linkName)
}

// List mocks base method
func (m *MockExpressRouteLinksClientAPI) List(ctx context.Context, resourceGroupName, expressRoutePortName string) (network.ExpressRouteLinkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, expressRoutePortName)
	ret0, _ := ret[0].(network.ExpressRouteLinkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteLinksClientAPIMockRecorder) List(ctx, resourceGroupName, expressRoutePortName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteLinksClientAPI)(nil).List), ctx, resourceGroupName, expressRoutePortName)
}

// ListComplete mocks base method
func (m *MockExpressRouteLinksClientAPI) ListComplete(ctx context.Context, resourceGroupName, expressRoutePortName string) (network.ExpressRouteLinkListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, expressRoutePortName)
	ret0, _ := ret[0].(network.ExpressRouteLinkListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockExpressRouteLinksClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, expressRoutePortName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockExpressRouteLinksClientAPI)(nil).ListComplete), ctx, resourceGroupName, expressRoutePortName)
}

// MockFirewallPoliciesClientAPI is a mock of FirewallPoliciesClientAPI interface
type MockFirewallPoliciesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallPoliciesClientAPIMockRecorder
}

// MockFirewallPoliciesClientAPIMockRecorder is the mock recorder for MockFirewallPoliciesClientAPI
type MockFirewallPoliciesClientAPIMockRecorder struct {
	mock *MockFirewallPoliciesClientAPI
}

// NewMockFirewallPoliciesClientAPI creates a new mock instance
func NewMockFirewallPoliciesClientAPI(ctrl *gomock.Controller) *MockFirewallPoliciesClientAPI {
	mock := &MockFirewallPoliciesClientAPI{ctrl: ctrl}
	mock.recorder = &MockFirewallPoliciesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirewallPoliciesClientAPI) EXPECT() *MockFirewallPoliciesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockFirewallPoliciesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, firewallPolicyName string, parameters network.FirewallPolicy) (network.FirewallPoliciesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, firewallPolicyName, parameters)
	ret0, _ := ret[0].(network.FirewallPoliciesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockFirewallPoliciesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, firewallPolicyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, firewallPolicyName, parameters)
}

// Delete mocks base method
func (m *MockFirewallPoliciesClientAPI) Delete(ctx context.Context, resourceGroupName, firewallPolicyName string) (network.FirewallPoliciesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, firewallPolicyName)
	ret0, _ := ret[0].(network.FirewallPoliciesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockFirewallPoliciesClientAPIMockRecorder) Delete(ctx, resourceGroupName, firewallPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).Delete), ctx, resourceGroupName, firewallPolicyName)
}

// Get mocks base method
func (m *MockFirewallPoliciesClientAPI) Get(ctx context.Context, resourceGroupName, firewallPolicyName, expand string) (network.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, firewallPolicyName, expand)
	ret0, _ := ret[0].(network.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFirewallPoliciesClientAPIMockRecorder) Get(ctx, resourceGroupName, firewallPolicyName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).Get), ctx, resourceGroupName, firewallPolicyName, expand)
}

// List mocks base method
func (m *MockFirewallPoliciesClientAPI) List(ctx context.Context, resourceGroupName string) (network.FirewallPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.FirewallPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFirewallPoliciesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockFirewallPoliciesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.FirewallPolicyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.FirewallPolicyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockFirewallPoliciesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockFirewallPoliciesClientAPI) ListAll(ctx context.Context) (network.FirewallPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.FirewallPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockFirewallPoliciesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockFirewallPoliciesClientAPI) ListAllComplete(ctx context.Context) (network.FirewallPolicyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.FirewallPolicyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockFirewallPoliciesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockFirewallPoliciesClientAPI)(nil).ListAllComplete), ctx)
}

// MockFirewallPolicyRuleCollectionGroupsClientAPI is a mock of FirewallPolicyRuleCollectionGroupsClientAPI interface
type MockFirewallPolicyRuleCollectionGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder
}

// MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder is the mock recorder for MockFirewallPolicyRuleCollectionGroupsClientAPI
type MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder struct {
	mock *MockFirewallPolicyRuleCollectionGroupsClientAPI
}

// NewMockFirewallPolicyRuleCollectionGroupsClientAPI creates a new mock instance
func NewMockFirewallPolicyRuleCollectionGroupsClientAPI(ctrl *gomock.Controller) *MockFirewallPolicyRuleCollectionGroupsClientAPI {
	mock := &MockFirewallPolicyRuleCollectionGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirewallPolicyRuleCollectionGroupsClientAPI) EXPECT() *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockFirewallPolicyRuleCollectionGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, firewallPolicyName, ruleCollectionGroupName string, parameters network.FirewallPolicyRuleCollectionGroup) (network.FirewallPolicyRuleCollectionGroupsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName, parameters)
	ret0, _ := ret[0].(network.FirewallPolicyRuleCollectionGroupsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockFirewallPolicyRuleCollectionGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName, parameters)
}

// Delete mocks base method
func (m *MockFirewallPolicyRuleCollectionGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, firewallPolicyName, ruleCollectionGroupName string) (network.FirewallPolicyRuleCollectionGroupsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName)
	ret0, _ := ret[0].(network.FirewallPolicyRuleCollectionGroupsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallPolicyRuleCollectionGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName)
}

// Get mocks base method
func (m *MockFirewallPolicyRuleCollectionGroupsClientAPI) Get(ctx context.Context, resourceGroupName, firewallPolicyName, ruleCollectionGroupName string) (network.FirewallPolicyRuleCollectionGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName)
	ret0, _ := ret[0].(network.FirewallPolicyRuleCollectionGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallPolicyRuleCollectionGroupsClientAPI)(nil).Get), ctx, resourceGroupName, firewallPolicyName, ruleCollectionGroupName)
}

// List mocks base method
func (m *MockFirewallPolicyRuleCollectionGroupsClientAPI) List(ctx context.Context, resourceGroupName, firewallPolicyName string) (network.FirewallPolicyRuleCollectionGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, firewallPolicyName)
	ret0, _ := ret[0].(network.FirewallPolicyRuleCollectionGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder) List(ctx, resourceGroupName, firewallPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallPolicyRuleCollectionGroupsClientAPI)(nil).List), ctx, resourceGroupName, firewallPolicyName)
}

// ListComplete mocks base method
func (m *MockFirewallPolicyRuleCollectionGroupsClientAPI) ListComplete(ctx context.Context, resourceGroupName, firewallPolicyName string) (network.FirewallPolicyRuleCollectionGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, firewallPolicyName)
	ret0, _ := ret[0].(network.FirewallPolicyRuleCollectionGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockFirewallPolicyRuleCollectionGroupsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, firewallPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockFirewallPolicyRuleCollectionGroupsClientAPI)(nil).ListComplete), ctx, resourceGroupName, firewallPolicyName)
}

// MockIPAllocationsClientAPI is a mock of IPAllocationsClientAPI interface
type MockIPAllocationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIPAllocationsClientAPIMockRecorder
}

// MockIPAllocationsClientAPIMockRecorder is the mock recorder for MockIPAllocationsClientAPI
type MockIPAllocationsClientAPIMockRecorder struct {
	mock *MockIPAllocationsClientAPI
}

// NewMockIPAllocationsClientAPI creates a new mock instance
func NewMockIPAllocationsClientAPI(ctrl *gomock.Controller) *MockIPAllocationsClientAPI {
	mock := &MockIPAllocationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockIPAllocationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPAllocationsClientAPI) EXPECT() *MockIPAllocationsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockIPAllocationsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, IPAllocationName string, parameters network.IPAllocation) (network.IPAllocationsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, IPAllocationName, parameters)
	ret0, _ := ret[0].(network.IPAllocationsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockIPAllocationsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, IPAllocationName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, IPAllocationName, parameters)
}

// Delete mocks base method
func (m *MockIPAllocationsClientAPI) Delete(ctx context.Context, resourceGroupName, IPAllocationName string) (network.IPAllocationsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, IPAllocationName)
	ret0, _ := ret[0].(network.IPAllocationsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockIPAllocationsClientAPIMockRecorder) Delete(ctx, resourceGroupName, IPAllocationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).Delete), ctx, resourceGroupName, IPAllocationName)
}

// Get mocks base method
func (m *MockIPAllocationsClientAPI) Get(ctx context.Context, resourceGroupName, IPAllocationName, expand string) (network.IPAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, IPAllocationName, expand)
	ret0, _ := ret[0].(network.IPAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIPAllocationsClientAPIMockRecorder) Get(ctx, resourceGroupName, IPAllocationName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).Get), ctx, resourceGroupName, IPAllocationName, expand)
}

// List mocks base method
func (m *MockIPAllocationsClientAPI) List(ctx context.Context) (network.IPAllocationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.IPAllocationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockIPAllocationsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockIPAllocationsClientAPI) ListComplete(ctx context.Context) (network.IPAllocationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.IPAllocationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockIPAllocationsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockIPAllocationsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.IPAllocationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.IPAllocationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockIPAllocationsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockIPAllocationsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.IPAllocationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.IPAllocationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockIPAllocationsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockIPAllocationsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, IPAllocationName string, parameters network.TagsObject) (network.IPAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, IPAllocationName, parameters)
	ret0, _ := ret[0].(network.IPAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockIPAllocationsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, IPAllocationName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockIPAllocationsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, IPAllocationName, parameters)
}

// MockIPGroupsClientAPI is a mock of IPGroupsClientAPI interface
type MockIPGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIPGroupsClientAPIMockRecorder
}

// MockIPGroupsClientAPIMockRecorder is the mock recorder for MockIPGroupsClientAPI
type MockIPGroupsClientAPIMockRecorder struct {
	mock *MockIPGroupsClientAPI
}

// NewMockIPGroupsClientAPI creates a new mock instance
func NewMockIPGroupsClientAPI(ctrl *gomock.Controller) *MockIPGroupsClientAPI {
	mock := &MockIPGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockIPGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPGroupsClientAPI) EXPECT() *MockIPGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockIPGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, IPGroupsName string, parameters network.IPGroup) (network.IPGroupsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, IPGroupsName, parameters)
	ret0, _ := ret[0].(network.IPGroupsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockIPGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, IPGroupsName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, IPGroupsName, parameters)
}

// Delete mocks base method
func (m *MockIPGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, IPGroupsName string) (network.IPGroupsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, IPGroupsName)
	ret0, _ := ret[0].(network.IPGroupsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockIPGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, IPGroupsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, IPGroupsName)
}

// Get mocks base method
func (m *MockIPGroupsClientAPI) Get(ctx context.Context, resourceGroupName, IPGroupsName, expand string) (network.IPGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, IPGroupsName, expand)
	ret0, _ := ret[0].(network.IPGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIPGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, IPGroupsName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).Get), ctx, resourceGroupName, IPGroupsName, expand)
}

// List mocks base method
func (m *MockIPGroupsClientAPI) List(ctx context.Context) (network.IPGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.IPGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockIPGroupsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockIPGroupsClientAPI) ListComplete(ctx context.Context) (network.IPGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.IPGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockIPGroupsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockIPGroupsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.IPGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.IPGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockIPGroupsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockIPGroupsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.IPGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.IPGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockIPGroupsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateGroups mocks base method
func (m *MockIPGroupsClientAPI) UpdateGroups(ctx context.Context, resourceGroupName, IPGroupsName string, parameters network.TagsObject) (network.IPGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroups", ctx, resourceGroupName, IPGroupsName, parameters)
	ret0, _ := ret[0].(network.IPGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroups indicates an expected call of UpdateGroups
func (mr *MockIPGroupsClientAPIMockRecorder) UpdateGroups(ctx, resourceGroupName, IPGroupsName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroups", reflect.TypeOf((*MockIPGroupsClientAPI)(nil).UpdateGroups), ctx, resourceGroupName, IPGroupsName, parameters)
}

// MockLoadBalancersClientAPI is a mock of LoadBalancersClientAPI interface
type MockLoadBalancersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancersClientAPIMockRecorder
}

// MockLoadBalancersClientAPIMockRecorder is the mock recorder for MockLoadBalancersClientAPI
type MockLoadBalancersClientAPIMockRecorder struct {
	mock *MockLoadBalancersClientAPI
}

// NewMockLoadBalancersClientAPI creates a new mock instance
func NewMockLoadBalancersClientAPI(ctrl *gomock.Controller) *MockLoadBalancersClientAPI {
	mock := &MockLoadBalancersClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancersClientAPI) EXPECT() *MockLoadBalancersClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockLoadBalancersClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, loadBalancerName string, parameters network.LoadBalancer) (network.LoadBalancersCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, loadBalancerName, parameters)
	ret0, _ := ret[0].(network.LoadBalancersCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockLoadBalancersClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, loadBalancerName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, loadBalancerName, parameters)
}

// Delete mocks base method
func (m *MockLoadBalancersClientAPI) Delete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancersDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancersDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockLoadBalancersClientAPIMockRecorder) Delete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).Delete), ctx, resourceGroupName, loadBalancerName)
}

// Get mocks base method
func (m *MockLoadBalancersClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, expand string) (network.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, expand)
	ret0, _ := ret[0].(network.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancersClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, expand)
}

// List mocks base method
func (m *MockLoadBalancersClientAPI) List(ctx context.Context, resourceGroupName string) (network.LoadBalancerListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.LoadBalancerListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancersClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockLoadBalancersClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.LoadBalancerListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.LoadBalancerListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancersClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockLoadBalancersClientAPI) ListAll(ctx context.Context) (network.LoadBalancerListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.LoadBalancerListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockLoadBalancersClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockLoadBalancersClientAPI) ListAllComplete(ctx context.Context) (network.LoadBalancerListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.LoadBalancerListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockLoadBalancersClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockLoadBalancersClientAPI) UpdateTags(ctx context.Context, resourceGroupName, loadBalancerName string, parameters network.TagsObject) (network.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, loadBalancerName, parameters)
	ret0, _ := ret[0].(network.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockLoadBalancersClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, loadBalancerName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockLoadBalancersClientAPI)(nil).UpdateTags), ctx, resourceGroupName, loadBalancerName, parameters)
}

// MockLoadBalancerBackendAddressPoolsClientAPI is a mock of LoadBalancerBackendAddressPoolsClientAPI interface
type MockLoadBalancerBackendAddressPoolsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder
}

// MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder is the mock recorder for MockLoadBalancerBackendAddressPoolsClientAPI
type MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder struct {
	mock *MockLoadBalancerBackendAddressPoolsClientAPI
}

// NewMockLoadBalancerBackendAddressPoolsClientAPI creates a new mock instance
func NewMockLoadBalancerBackendAddressPoolsClientAPI(ctrl *gomock.Controller) *MockLoadBalancerBackendAddressPoolsClientAPI {
	mock := &MockLoadBalancerBackendAddressPoolsClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancerBackendAddressPoolsClientAPI) EXPECT() *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockLoadBalancerBackendAddressPoolsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, loadBalancerName, backendAddressPoolName string, parameters network.BackendAddressPool) (network.LoadBalancerBackendAddressPoolsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, loadBalancerName, backendAddressPoolName, parameters)
	ret0, _ := ret[0].(network.LoadBalancerBackendAddressPoolsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, loadBalancerName, backendAddressPoolName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockLoadBalancerBackendAddressPoolsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, loadBalancerName, backendAddressPoolName, parameters)
}

// Delete mocks base method
func (m *MockLoadBalancerBackendAddressPoolsClientAPI) Delete(ctx context.Context, resourceGroupName, loadBalancerName, backendAddressPoolName string) (network.LoadBalancerBackendAddressPoolsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, loadBalancerName, backendAddressPoolName)
	ret0, _ := ret[0].(network.LoadBalancerBackendAddressPoolsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder) Delete(ctx, resourceGroupName, loadBalancerName, backendAddressPoolName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoadBalancerBackendAddressPoolsClientAPI)(nil).Delete), ctx, resourceGroupName, loadBalancerName, backendAddressPoolName)
}

// Get mocks base method
func (m *MockLoadBalancerBackendAddressPoolsClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, backendAddressPoolName string) (network.BackendAddressPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, backendAddressPoolName)
	ret0, _ := ret[0].(network.BackendAddressPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, backendAddressPoolName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerBackendAddressPoolsClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, backendAddressPoolName)
}

// List mocks base method
func (m *MockLoadBalancerBackendAddressPoolsClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerBackendAddressPoolListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerBackendAddressPoolListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancerBackendAddressPoolsClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockLoadBalancerBackendAddressPoolsClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerBackendAddressPoolListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerBackendAddressPoolListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancerBackendAddressPoolsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancerBackendAddressPoolsClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockLoadBalancerFrontendIPConfigurationsClientAPI is a mock of LoadBalancerFrontendIPConfigurationsClientAPI interface
type MockLoadBalancerFrontendIPConfigurationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder
}

// MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder is the mock recorder for MockLoadBalancerFrontendIPConfigurationsClientAPI
type MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder struct {
	mock *MockLoadBalancerFrontendIPConfigurationsClientAPI
}

// NewMockLoadBalancerFrontendIPConfigurationsClientAPI creates a new mock instance
func NewMockLoadBalancerFrontendIPConfigurationsClientAPI(ctrl *gomock.Controller) *MockLoadBalancerFrontendIPConfigurationsClientAPI {
	mock := &MockLoadBalancerFrontendIPConfigurationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancerFrontendIPConfigurationsClientAPI) EXPECT() *MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockLoadBalancerFrontendIPConfigurationsClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, frontendIPConfigurationName string) (network.FrontendIPConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, frontendIPConfigurationName)
	ret0, _ := ret[0].(network.FrontendIPConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, frontendIPConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerFrontendIPConfigurationsClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, frontendIPConfigurationName)
}

// List mocks base method
func (m *MockLoadBalancerFrontendIPConfigurationsClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerFrontendIPConfigurationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerFrontendIPConfigurationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancerFrontendIPConfigurationsClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockLoadBalancerFrontendIPConfigurationsClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerFrontendIPConfigurationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerFrontendIPConfigurationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancerFrontendIPConfigurationsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancerFrontendIPConfigurationsClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockInboundNatRulesClientAPI is a mock of InboundNatRulesClientAPI interface
type MockInboundNatRulesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInboundNatRulesClientAPIMockRecorder
}

// MockInboundNatRulesClientAPIMockRecorder is the mock recorder for MockInboundNatRulesClientAPI
type MockInboundNatRulesClientAPIMockRecorder struct {
	mock *MockInboundNatRulesClientAPI
}

// NewMockInboundNatRulesClientAPI creates a new mock instance
func NewMockInboundNatRulesClientAPI(ctrl *gomock.Controller) *MockInboundNatRulesClientAPI {
	mock := &MockInboundNatRulesClientAPI{ctrl: ctrl}
	mock.recorder = &MockInboundNatRulesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInboundNatRulesClientAPI) EXPECT() *MockInboundNatRulesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockInboundNatRulesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, loadBalancerName, inboundNatRuleName string, inboundNatRuleParameters network.InboundNatRule) (network.InboundNatRulesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters)
	ret0, _ := ret[0].(network.InboundNatRulesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockInboundNatRulesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockInboundNatRulesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters)
}

// Delete mocks base method
func (m *MockInboundNatRulesClientAPI) Delete(ctx context.Context, resourceGroupName, loadBalancerName, inboundNatRuleName string) (network.InboundNatRulesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, loadBalancerName, inboundNatRuleName)
	ret0, _ := ret[0].(network.InboundNatRulesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockInboundNatRulesClientAPIMockRecorder) Delete(ctx, resourceGroupName, loadBalancerName, inboundNatRuleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInboundNatRulesClientAPI)(nil).Delete), ctx, resourceGroupName, loadBalancerName, inboundNatRuleName)
}

// Get mocks base method
func (m *MockInboundNatRulesClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, inboundNatRuleName, expand string) (network.InboundNatRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, inboundNatRuleName, expand)
	ret0, _ := ret[0].(network.InboundNatRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockInboundNatRulesClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, inboundNatRuleName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInboundNatRulesClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, inboundNatRuleName, expand)
}

// List mocks base method
func (m *MockInboundNatRulesClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.InboundNatRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.InboundNatRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockInboundNatRulesClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInboundNatRulesClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockInboundNatRulesClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.InboundNatRuleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.InboundNatRuleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockInboundNatRulesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockInboundNatRulesClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockLoadBalancerLoadBalancingRulesClientAPI is a mock of LoadBalancerLoadBalancingRulesClientAPI interface
type MockLoadBalancerLoadBalancingRulesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder
}

// MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder is the mock recorder for MockLoadBalancerLoadBalancingRulesClientAPI
type MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder struct {
	mock *MockLoadBalancerLoadBalancingRulesClientAPI
}

// NewMockLoadBalancerLoadBalancingRulesClientAPI creates a new mock instance
func NewMockLoadBalancerLoadBalancingRulesClientAPI(ctrl *gomock.Controller) *MockLoadBalancerLoadBalancingRulesClientAPI {
	mock := &MockLoadBalancerLoadBalancingRulesClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancerLoadBalancingRulesClientAPI) EXPECT() *MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockLoadBalancerLoadBalancingRulesClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, loadBalancingRuleName string) (network.LoadBalancingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, loadBalancingRuleName)
	ret0, _ := ret[0].(network.LoadBalancingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, loadBalancingRuleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerLoadBalancingRulesClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, loadBalancingRuleName)
}

// List mocks base method
func (m *MockLoadBalancerLoadBalancingRulesClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerLoadBalancingRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerLoadBalancingRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancerLoadBalancingRulesClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockLoadBalancerLoadBalancingRulesClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerLoadBalancingRuleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerLoadBalancingRuleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancerLoadBalancingRulesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancerLoadBalancingRulesClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockLoadBalancerOutboundRulesClientAPI is a mock of LoadBalancerOutboundRulesClientAPI interface
type MockLoadBalancerOutboundRulesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerOutboundRulesClientAPIMockRecorder
}

// MockLoadBalancerOutboundRulesClientAPIMockRecorder is the mock recorder for MockLoadBalancerOutboundRulesClientAPI
type MockLoadBalancerOutboundRulesClientAPIMockRecorder struct {
	mock *MockLoadBalancerOutboundRulesClientAPI
}

// NewMockLoadBalancerOutboundRulesClientAPI creates a new mock instance
func NewMockLoadBalancerOutboundRulesClientAPI(ctrl *gomock.Controller) *MockLoadBalancerOutboundRulesClientAPI {
	mock := &MockLoadBalancerOutboundRulesClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerOutboundRulesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancerOutboundRulesClientAPI) EXPECT() *MockLoadBalancerOutboundRulesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockLoadBalancerOutboundRulesClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, outboundRuleName string) (network.OutboundRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, outboundRuleName)
	ret0, _ := ret[0].(network.OutboundRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancerOutboundRulesClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, outboundRuleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerOutboundRulesClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, outboundRuleName)
}

// List mocks base method
func (m *MockLoadBalancerOutboundRulesClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerOutboundRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerOutboundRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancerOutboundRulesClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancerOutboundRulesClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockLoadBalancerOutboundRulesClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerOutboundRuleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerOutboundRuleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancerOutboundRulesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancerOutboundRulesClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockLoadBalancerNetworkInterfacesClientAPI is a mock of LoadBalancerNetworkInterfacesClientAPI interface
type MockLoadBalancerNetworkInterfacesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerNetworkInterfacesClientAPIMockRecorder
}

// MockLoadBalancerNetworkInterfacesClientAPIMockRecorder is the mock recorder for MockLoadBalancerNetworkInterfacesClientAPI
type MockLoadBalancerNetworkInterfacesClientAPIMockRecorder struct {
	mock *MockLoadBalancerNetworkInterfacesClientAPI
}

// NewMockLoadBalancerNetworkInterfacesClientAPI creates a new mock instance
func NewMockLoadBalancerNetworkInterfacesClientAPI(ctrl *gomock.Controller) *MockLoadBalancerNetworkInterfacesClientAPI {
	mock := &MockLoadBalancerNetworkInterfacesClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerNetworkInterfacesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancerNetworkInterfacesClientAPI) EXPECT() *MockLoadBalancerNetworkInterfacesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockLoadBalancerNetworkInterfacesClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancerNetworkInterfacesClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancerNetworkInterfacesClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockLoadBalancerNetworkInterfacesClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancerNetworkInterfacesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancerNetworkInterfacesClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockLoadBalancerProbesClientAPI is a mock of LoadBalancerProbesClientAPI interface
type MockLoadBalancerProbesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerProbesClientAPIMockRecorder
}

// MockLoadBalancerProbesClientAPIMockRecorder is the mock recorder for MockLoadBalancerProbesClientAPI
type MockLoadBalancerProbesClientAPIMockRecorder struct {
	mock *MockLoadBalancerProbesClientAPI
}

// NewMockLoadBalancerProbesClientAPI creates a new mock instance
func NewMockLoadBalancerProbesClientAPI(ctrl *gomock.Controller) *MockLoadBalancerProbesClientAPI {
	mock := &MockLoadBalancerProbesClientAPI{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerProbesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancerProbesClientAPI) EXPECT() *MockLoadBalancerProbesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockLoadBalancerProbesClientAPI) Get(ctx context.Context, resourceGroupName, loadBalancerName, probeName string) (network.Probe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, probeName)
	ret0, _ := ret[0].(network.Probe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancerProbesClientAPIMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, probeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerProbesClientAPI)(nil).Get), ctx, resourceGroupName, loadBalancerName, probeName)
}

// List mocks base method
func (m *MockLoadBalancerProbesClientAPI) List(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerProbeListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerProbeListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLoadBalancerProbesClientAPIMockRecorder) List(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoadBalancerProbesClientAPI)(nil).List), ctx, resourceGroupName, loadBalancerName)
}

// ListComplete mocks base method
func (m *MockLoadBalancerProbesClientAPI) ListComplete(ctx context.Context, resourceGroupName, loadBalancerName string) (network.LoadBalancerProbeListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, loadBalancerName)
	ret0, _ := ret[0].(network.LoadBalancerProbeListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLoadBalancerProbesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, loadBalancerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLoadBalancerProbesClientAPI)(nil).ListComplete), ctx, resourceGroupName, loadBalancerName)
}

// MockNatGatewaysClientAPI is a mock of NatGatewaysClientAPI interface
type MockNatGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNatGatewaysClientAPIMockRecorder
}

// MockNatGatewaysClientAPIMockRecorder is the mock recorder for MockNatGatewaysClientAPI
type MockNatGatewaysClientAPIMockRecorder struct {
	mock *MockNatGatewaysClientAPI
}

// NewMockNatGatewaysClientAPI creates a new mock instance
func NewMockNatGatewaysClientAPI(ctrl *gomock.Controller) *MockNatGatewaysClientAPI {
	mock := &MockNatGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockNatGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNatGatewaysClientAPI) EXPECT() *MockNatGatewaysClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockNatGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, natGatewayName string, parameters network.NatGateway) (network.NatGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, natGatewayName, parameters)
	ret0, _ := ret[0].(network.NatGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockNatGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, natGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, natGatewayName, parameters)
}

// Delete mocks base method
func (m *MockNatGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, natGatewayName string) (network.NatGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, natGatewayName)
	ret0, _ := ret[0].(network.NatGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNatGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, natGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, natGatewayName)
}

// Get mocks base method
func (m *MockNatGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, natGatewayName, expand string) (network.NatGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, natGatewayName, expand)
	ret0, _ := ret[0].(network.NatGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNatGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, natGatewayName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, natGatewayName, expand)
}

// List mocks base method
func (m *MockNatGatewaysClientAPI) List(ctx context.Context, resourceGroupName string) (network.NatGatewayListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.NatGatewayListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNatGatewaysClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockNatGatewaysClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.NatGatewayListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.NatGatewayListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockNatGatewaysClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockNatGatewaysClientAPI) ListAll(ctx context.Context) (network.NatGatewayListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.NatGatewayListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockNatGatewaysClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockNatGatewaysClientAPI) ListAllComplete(ctx context.Context) (network.NatGatewayListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.NatGatewayListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockNatGatewaysClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockNatGatewaysClientAPI) UpdateTags(ctx context.Context, resourceGroupName, natGatewayName string, parameters network.TagsObject) (network.NatGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, natGatewayName, parameters)
	ret0, _ := ret[0].(network.NatGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockNatGatewaysClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, natGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockNatGatewaysClientAPI)(nil).UpdateTags), ctx, resourceGroupName, natGatewayName, parameters)
}

// MockInterfacesClientAPI is a mock of InterfacesClientAPI interface
type MockInterfacesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInterfacesClientAPIMockRecorder
}

// MockInterfacesClientAPIMockRecorder is the mock recorder for MockInterfacesClientAPI
type MockInterfacesClientAPIMockRecorder struct {
	mock *MockInterfacesClientAPI
}

// NewMockInterfacesClientAPI creates a new mock instance
func NewMockInterfacesClientAPI(ctrl *gomock.Controller) *MockInterfacesClientAPI {
	mock := &MockInterfacesClientAPI{ctrl: ctrl}
	mock.recorder = &MockInterfacesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterfacesClientAPI) EXPECT() *MockInterfacesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockInterfacesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkInterfaceName string, parameters network.Interface) (network.InterfacesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkInterfaceName, parameters)
	ret0, _ := ret[0].(network.InterfacesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockInterfacesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkInterfaceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockInterfacesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkInterfaceName, parameters)
}

// Delete mocks base method
func (m *MockInterfacesClientAPI) Delete(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfacesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfacesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockInterfacesClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).Delete), ctx, resourceGroupName, networkInterfaceName)
}

// Get mocks base method
func (m *MockInterfacesClientAPI) Get(ctx context.Context, resourceGroupName, networkInterfaceName, expand string) (network.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkInterfaceName, expand)
	ret0, _ := ret[0].(network.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockInterfacesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkInterfaceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfacesClientAPI)(nil).Get), ctx, resourceGroupName, networkInterfaceName, expand)
}

// GetCloudServiceNetworkInterface mocks base method
func (m *MockInterfacesClientAPI) GetCloudServiceNetworkInterface(ctx context.Context, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, expand string) (network.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudServiceNetworkInterface", ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, expand)
	ret0, _ := ret[0].(network.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudServiceNetworkInterface indicates an expected call of GetCloudServiceNetworkInterface
func (mr *MockInterfacesClientAPIMockRecorder) GetCloudServiceNetworkInterface(ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudServiceNetworkInterface", reflect.TypeOf((*MockInterfacesClientAPI)(nil).GetCloudServiceNetworkInterface), ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, expand)
}

// GetEffectiveRouteTable mocks base method
func (m *MockInterfacesClientAPI) GetEffectiveRouteTable(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfacesGetEffectiveRouteTableFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveRouteTable", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfacesGetEffectiveRouteTableFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveRouteTable indicates an expected call of GetEffectiveRouteTable
func (mr *MockInterfacesClientAPIMockRecorder) GetEffectiveRouteTable(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveRouteTable", reflect.TypeOf((*MockInterfacesClientAPI)(nil).GetEffectiveRouteTable), ctx, resourceGroupName, networkInterfaceName)
}

// GetVirtualMachineScaleSetIPConfiguration mocks base method
func (m *MockInterfacesClientAPI) GetVirtualMachineScaleSetIPConfiguration(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, expand string) (network.InterfaceIPConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineScaleSetIPConfiguration", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, expand)
	ret0, _ := ret[0].(network.InterfaceIPConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineScaleSetIPConfiguration indicates an expected call of GetVirtualMachineScaleSetIPConfiguration
func (mr *MockInterfacesClientAPIMockRecorder) GetVirtualMachineScaleSetIPConfiguration(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineScaleSetIPConfiguration", reflect.TypeOf((*MockInterfacesClientAPI)(nil).GetVirtualMachineScaleSetIPConfiguration), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, expand)
}

// GetVirtualMachineScaleSetNetworkInterface mocks base method
func (m *MockInterfacesClientAPI) GetVirtualMachineScaleSetNetworkInterface(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand string) (network.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineScaleSetNetworkInterface", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand)
	ret0, _ := ret[0].(network.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineScaleSetNetworkInterface indicates an expected call of GetVirtualMachineScaleSetNetworkInterface
func (mr *MockInterfacesClientAPIMockRecorder) GetVirtualMachineScaleSetNetworkInterface(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineScaleSetNetworkInterface", reflect.TypeOf((*MockInterfacesClientAPI)(nil).GetVirtualMachineScaleSetNetworkInterface), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand)
}

// List mocks base method
func (m *MockInterfacesClientAPI) List(ctx context.Context, resourceGroupName string) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockInterfacesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterfacesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockInterfacesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockInterfacesClientAPI) ListAll(ctx context.Context) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockInterfacesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockInterfacesClientAPI) ListAllComplete(ctx context.Context) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListAllComplete), ctx)
}

// ListCloudServiceNetworkInterfaces mocks base method
func (m *MockInterfacesClientAPI) ListCloudServiceNetworkInterfaces(ctx context.Context, resourceGroupName, cloudServiceName string) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServiceNetworkInterfaces", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServiceNetworkInterfaces indicates an expected call of ListCloudServiceNetworkInterfaces
func (mr *MockInterfacesClientAPIMockRecorder) ListCloudServiceNetworkInterfaces(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServiceNetworkInterfaces", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListCloudServiceNetworkInterfaces), ctx, resourceGroupName, cloudServiceName)
}

// ListCloudServiceNetworkInterfacesComplete mocks base method
func (m *MockInterfacesClientAPI) ListCloudServiceNetworkInterfacesComplete(ctx context.Context, resourceGroupName, cloudServiceName string) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServiceNetworkInterfacesComplete", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServiceNetworkInterfacesComplete indicates an expected call of ListCloudServiceNetworkInterfacesComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListCloudServiceNetworkInterfacesComplete(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServiceNetworkInterfacesComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListCloudServiceNetworkInterfacesComplete), ctx, resourceGroupName, cloudServiceName)
}

// ListCloudServiceRoleInstanceNetworkInterfaces mocks base method
func (m *MockInterfacesClientAPI) ListCloudServiceRoleInstanceNetworkInterfaces(ctx context.Context, resourceGroupName, cloudServiceName, roleInstanceName string) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServiceRoleInstanceNetworkInterfaces", ctx, resourceGroupName, cloudServiceName, roleInstanceName)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServiceRoleInstanceNetworkInterfaces indicates an expected call of ListCloudServiceRoleInstanceNetworkInterfaces
func (mr *MockInterfacesClientAPIMockRecorder) ListCloudServiceRoleInstanceNetworkInterfaces(ctx, resourceGroupName, cloudServiceName, roleInstanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServiceRoleInstanceNetworkInterfaces", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListCloudServiceRoleInstanceNetworkInterfaces), ctx, resourceGroupName, cloudServiceName, roleInstanceName)
}

// ListCloudServiceRoleInstanceNetworkInterfacesComplete mocks base method
func (m *MockInterfacesClientAPI) ListCloudServiceRoleInstanceNetworkInterfacesComplete(ctx context.Context, resourceGroupName, cloudServiceName, roleInstanceName string) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServiceRoleInstanceNetworkInterfacesComplete", ctx, resourceGroupName, cloudServiceName, roleInstanceName)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServiceRoleInstanceNetworkInterfacesComplete indicates an expected call of ListCloudServiceRoleInstanceNetworkInterfacesComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListCloudServiceRoleInstanceNetworkInterfacesComplete(ctx, resourceGroupName, cloudServiceName, roleInstanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServiceRoleInstanceNetworkInterfacesComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListCloudServiceRoleInstanceNetworkInterfacesComplete), ctx, resourceGroupName, cloudServiceName, roleInstanceName)
}

// ListEffectiveNetworkSecurityGroups mocks base method
func (m *MockInterfacesClientAPI) ListEffectiveNetworkSecurityGroups(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfacesListEffectiveNetworkSecurityGroupsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEffectiveNetworkSecurityGroups", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfacesListEffectiveNetworkSecurityGroupsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEffectiveNetworkSecurityGroups indicates an expected call of ListEffectiveNetworkSecurityGroups
func (mr *MockInterfacesClientAPIMockRecorder) ListEffectiveNetworkSecurityGroups(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEffectiveNetworkSecurityGroups", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListEffectiveNetworkSecurityGroups), ctx, resourceGroupName, networkInterfaceName)
}

// ListVirtualMachineScaleSetIPConfigurations mocks base method
func (m *MockInterfacesClientAPI) ListVirtualMachineScaleSetIPConfigurations(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand string) (network.InterfaceIPConfigurationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetIPConfigurations", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand)
	ret0, _ := ret[0].(network.InterfaceIPConfigurationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetIPConfigurations indicates an expected call of ListVirtualMachineScaleSetIPConfigurations
func (mr *MockInterfacesClientAPIMockRecorder) ListVirtualMachineScaleSetIPConfigurations(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetIPConfigurations", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListVirtualMachineScaleSetIPConfigurations), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand)
}

// ListVirtualMachineScaleSetIPConfigurationsComplete mocks base method
func (m *MockInterfacesClientAPI) ListVirtualMachineScaleSetIPConfigurationsComplete(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand string) (network.InterfaceIPConfigurationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetIPConfigurationsComplete", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand)
	ret0, _ := ret[0].(network.InterfaceIPConfigurationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetIPConfigurationsComplete indicates an expected call of ListVirtualMachineScaleSetIPConfigurationsComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListVirtualMachineScaleSetIPConfigurationsComplete(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetIPConfigurationsComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListVirtualMachineScaleSetIPConfigurationsComplete), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, expand)
}

// ListVirtualMachineScaleSetNetworkInterfaces mocks base method
func (m *MockInterfacesClientAPI) ListVirtualMachineScaleSetNetworkInterfaces(ctx context.Context, resourceGroupName, virtualMachineScaleSetName string) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetNetworkInterfaces", ctx, resourceGroupName, virtualMachineScaleSetName)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetNetworkInterfaces indicates an expected call of ListVirtualMachineScaleSetNetworkInterfaces
func (mr *MockInterfacesClientAPIMockRecorder) ListVirtualMachineScaleSetNetworkInterfaces(ctx, resourceGroupName, virtualMachineScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetNetworkInterfaces", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListVirtualMachineScaleSetNetworkInterfaces), ctx, resourceGroupName, virtualMachineScaleSetName)
}

// ListVirtualMachineScaleSetNetworkInterfacesComplete mocks base method
func (m *MockInterfacesClientAPI) ListVirtualMachineScaleSetNetworkInterfacesComplete(ctx context.Context, resourceGroupName, virtualMachineScaleSetName string) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetNetworkInterfacesComplete", ctx, resourceGroupName, virtualMachineScaleSetName)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetNetworkInterfacesComplete indicates an expected call of ListVirtualMachineScaleSetNetworkInterfacesComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListVirtualMachineScaleSetNetworkInterfacesComplete(ctx, resourceGroupName, virtualMachineScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetNetworkInterfacesComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListVirtualMachineScaleSetNetworkInterfacesComplete), ctx, resourceGroupName, virtualMachineScaleSetName)
}

// ListVirtualMachineScaleSetVMNetworkInterfaces mocks base method
func (m *MockInterfacesClientAPI) ListVirtualMachineScaleSetVMNetworkInterfaces(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex string) (network.InterfaceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetVMNetworkInterfaces", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex)
	ret0, _ := ret[0].(network.InterfaceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetVMNetworkInterfaces indicates an expected call of ListVirtualMachineScaleSetVMNetworkInterfaces
func (mr *MockInterfacesClientAPIMockRecorder) ListVirtualMachineScaleSetVMNetworkInterfaces(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetVMNetworkInterfaces", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListVirtualMachineScaleSetVMNetworkInterfaces), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex)
}

// ListVirtualMachineScaleSetVMNetworkInterfacesComplete mocks base method
func (m *MockInterfacesClientAPI) ListVirtualMachineScaleSetVMNetworkInterfacesComplete(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex string) (network.InterfaceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetVMNetworkInterfacesComplete", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex)
	ret0, _ := ret[0].(network.InterfaceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetVMNetworkInterfacesComplete indicates an expected call of ListVirtualMachineScaleSetVMNetworkInterfacesComplete
func (mr *MockInterfacesClientAPIMockRecorder) ListVirtualMachineScaleSetVMNetworkInterfacesComplete(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetVMNetworkInterfacesComplete", reflect.TypeOf((*MockInterfacesClientAPI)(nil).ListVirtualMachineScaleSetVMNetworkInterfacesComplete), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex)
}

// UpdateTags mocks base method
func (m *MockInterfacesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkInterfaceName string, parameters network.TagsObject) (network.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkInterfaceName, parameters)
	ret0, _ := ret[0].(network.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockInterfacesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkInterfaceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockInterfacesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkInterfaceName, parameters)
}

// MockInterfaceIPConfigurationsClientAPI is a mock of InterfaceIPConfigurationsClientAPI interface
type MockInterfaceIPConfigurationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceIPConfigurationsClientAPIMockRecorder
}

// MockInterfaceIPConfigurationsClientAPIMockRecorder is the mock recorder for MockInterfaceIPConfigurationsClientAPI
type MockInterfaceIPConfigurationsClientAPIMockRecorder struct {
	mock *MockInterfaceIPConfigurationsClientAPI
}

// NewMockInterfaceIPConfigurationsClientAPI creates a new mock instance
func NewMockInterfaceIPConfigurationsClientAPI(ctrl *gomock.Controller) *MockInterfaceIPConfigurationsClientAPI {
	mock := &MockInterfaceIPConfigurationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockInterfaceIPConfigurationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterfaceIPConfigurationsClientAPI) EXPECT() *MockInterfaceIPConfigurationsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockInterfaceIPConfigurationsClientAPI) Get(ctx context.Context, resourceGroupName, networkInterfaceName, IPConfigurationName string) (network.InterfaceIPConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkInterfaceName, IPConfigurationName)
	ret0, _ := ret[0].(network.InterfaceIPConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockInterfaceIPConfigurationsClientAPIMockRecorder) Get(ctx, resourceGroupName, networkInterfaceName, IPConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfaceIPConfigurationsClientAPI)(nil).Get), ctx, resourceGroupName, networkInterfaceName, IPConfigurationName)
}

// List mocks base method
func (m *MockInterfaceIPConfigurationsClientAPI) List(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfaceIPConfigurationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfaceIPConfigurationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockInterfaceIPConfigurationsClientAPIMockRecorder) List(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterfaceIPConfigurationsClientAPI)(nil).List), ctx, resourceGroupName, networkInterfaceName)
}

// ListComplete mocks base method
func (m *MockInterfaceIPConfigurationsClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfaceIPConfigurationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfaceIPConfigurationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockInterfaceIPConfigurationsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockInterfaceIPConfigurationsClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkInterfaceName)
}

// MockInterfaceLoadBalancersClientAPI is a mock of InterfaceLoadBalancersClientAPI interface
type MockInterfaceLoadBalancersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceLoadBalancersClientAPIMockRecorder
}

// MockInterfaceLoadBalancersClientAPIMockRecorder is the mock recorder for MockInterfaceLoadBalancersClientAPI
type MockInterfaceLoadBalancersClientAPIMockRecorder struct {
	mock *MockInterfaceLoadBalancersClientAPI
}

// NewMockInterfaceLoadBalancersClientAPI creates a new mock instance
func NewMockInterfaceLoadBalancersClientAPI(ctrl *gomock.Controller) *MockInterfaceLoadBalancersClientAPI {
	mock := &MockInterfaceLoadBalancersClientAPI{ctrl: ctrl}
	mock.recorder = &MockInterfaceLoadBalancersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterfaceLoadBalancersClientAPI) EXPECT() *MockInterfaceLoadBalancersClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockInterfaceLoadBalancersClientAPI) List(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfaceLoadBalancerListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfaceLoadBalancerListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockInterfaceLoadBalancersClientAPIMockRecorder) List(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterfaceLoadBalancersClientAPI)(nil).List), ctx, resourceGroupName, networkInterfaceName)
}

// ListComplete mocks base method
func (m *MockInterfaceLoadBalancersClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfaceLoadBalancerListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfaceLoadBalancerListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockInterfaceLoadBalancersClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockInterfaceLoadBalancersClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkInterfaceName)
}

// MockInterfaceTapConfigurationsClientAPI is a mock of InterfaceTapConfigurationsClientAPI interface
type MockInterfaceTapConfigurationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceTapConfigurationsClientAPIMockRecorder
}

// MockInterfaceTapConfigurationsClientAPIMockRecorder is the mock recorder for MockInterfaceTapConfigurationsClientAPI
type MockInterfaceTapConfigurationsClientAPIMockRecorder struct {
	mock *MockInterfaceTapConfigurationsClientAPI
}

// NewMockInterfaceTapConfigurationsClientAPI creates a new mock instance
func NewMockInterfaceTapConfigurationsClientAPI(ctrl *gomock.Controller) *MockInterfaceTapConfigurationsClientAPI {
	mock := &MockInterfaceTapConfigurationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockInterfaceTapConfigurationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterfaceTapConfigurationsClientAPI) EXPECT() *MockInterfaceTapConfigurationsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockInterfaceTapConfigurationsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkInterfaceName, tapConfigurationName string, tapConfigurationParameters network.InterfaceTapConfiguration) (network.InterfaceTapConfigurationsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkInterfaceName, tapConfigurationName, tapConfigurationParameters)
	ret0, _ := ret[0].(network.InterfaceTapConfigurationsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockInterfaceTapConfigurationsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkInterfaceName, tapConfigurationName, tapConfigurationParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockInterfaceTapConfigurationsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkInterfaceName, tapConfigurationName, tapConfigurationParameters)
}

// Delete mocks base method
func (m *MockInterfaceTapConfigurationsClientAPI) Delete(ctx context.Context, resourceGroupName, networkInterfaceName, tapConfigurationName string) (network.InterfaceTapConfigurationsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkInterfaceName, tapConfigurationName)
	ret0, _ := ret[0].(network.InterfaceTapConfigurationsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockInterfaceTapConfigurationsClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkInterfaceName, tapConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterfaceTapConfigurationsClientAPI)(nil).Delete), ctx, resourceGroupName, networkInterfaceName, tapConfigurationName)
}

// Get mocks base method
func (m *MockInterfaceTapConfigurationsClientAPI) Get(ctx context.Context, resourceGroupName, networkInterfaceName, tapConfigurationName string) (network.InterfaceTapConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkInterfaceName, tapConfigurationName)
	ret0, _ := ret[0].(network.InterfaceTapConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockInterfaceTapConfigurationsClientAPIMockRecorder) Get(ctx, resourceGroupName, networkInterfaceName, tapConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfaceTapConfigurationsClientAPI)(nil).Get), ctx, resourceGroupName, networkInterfaceName, tapConfigurationName)
}

// List mocks base method
func (m *MockInterfaceTapConfigurationsClientAPI) List(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfaceTapConfigurationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfaceTapConfigurationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockInterfaceTapConfigurationsClientAPIMockRecorder) List(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterfaceTapConfigurationsClientAPI)(nil).List), ctx, resourceGroupName, networkInterfaceName)
}

// ListComplete mocks base method
func (m *MockInterfaceTapConfigurationsClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkInterfaceName string) (network.InterfaceTapConfigurationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkInterfaceName)
	ret0, _ := ret[0].(network.InterfaceTapConfigurationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockInterfaceTapConfigurationsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockInterfaceTapConfigurationsClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkInterfaceName)
}

// MockProfilesClientAPI is a mock of ProfilesClientAPI interface
type MockProfilesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesClientAPIMockRecorder
}

// MockProfilesClientAPIMockRecorder is the mock recorder for MockProfilesClientAPI
type MockProfilesClientAPIMockRecorder struct {
	mock *MockProfilesClientAPI
}

// NewMockProfilesClientAPI creates a new mock instance
func NewMockProfilesClientAPI(ctrl *gomock.Controller) *MockProfilesClientAPI {
	mock := &MockProfilesClientAPI{ctrl: ctrl}
	mock.recorder = &MockProfilesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfilesClientAPI) EXPECT() *MockProfilesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockProfilesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkProfileName string, parameters network.Profile) (network.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkProfileName, parameters)
	ret0, _ := ret[0].(network.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockProfilesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkProfileName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockProfilesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkProfileName, parameters)
}

// Delete mocks base method
func (m *MockProfilesClientAPI) Delete(ctx context.Context, resourceGroupName, networkProfileName string) (network.ProfilesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkProfileName)
	ret0, _ := ret[0].(network.ProfilesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockProfilesClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkProfileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfilesClientAPI)(nil).Delete), ctx, resourceGroupName, networkProfileName)
}

// Get mocks base method
func (m *MockProfilesClientAPI) Get(ctx context.Context, resourceGroupName, networkProfileName, expand string) (network.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkProfileName, expand)
	ret0, _ := ret[0].(network.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProfilesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkProfileName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfilesClientAPI)(nil).Get), ctx, resourceGroupName, networkProfileName, expand)
}

// List mocks base method
func (m *MockProfilesClientAPI) List(ctx context.Context, resourceGroupName string) (network.ProfileListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ProfileListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockProfilesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProfilesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockProfilesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.ProfileListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ProfileListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockProfilesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockProfilesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockProfilesClientAPI) ListAll(ctx context.Context) (network.ProfileListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.ProfileListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockProfilesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockProfilesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockProfilesClientAPI) ListAllComplete(ctx context.Context) (network.ProfileListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.ProfileListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockProfilesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockProfilesClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockProfilesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkProfileName string, parameters network.TagsObject) (network.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkProfileName, parameters)
	ret0, _ := ret[0].(network.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockProfilesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkProfileName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockProfilesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkProfileName, parameters)
}

// MockSecurityGroupsClientAPI is a mock of SecurityGroupsClientAPI interface
type MockSecurityGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsClientAPIMockRecorder
}

// MockSecurityGroupsClientAPIMockRecorder is the mock recorder for MockSecurityGroupsClientAPI
type MockSecurityGroupsClientAPIMockRecorder struct {
	mock *MockSecurityGroupsClientAPI
}

// NewMockSecurityGroupsClientAPI creates a new mock instance
func NewMockSecurityGroupsClientAPI(ctrl *gomock.Controller) *MockSecurityGroupsClientAPI {
	mock := &MockSecurityGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityGroupsClientAPI) EXPECT() *MockSecurityGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSecurityGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkSecurityGroupName string, parameters network.SecurityGroup) (network.SecurityGroupsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkSecurityGroupName, parameters)
	ret0, _ := ret[0].(network.SecurityGroupsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSecurityGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkSecurityGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkSecurityGroupName, parameters)
}

// Delete mocks base method
func (m *MockSecurityGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, networkSecurityGroupName string) (network.SecurityGroupsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkSecurityGroupName)
	ret0, _ := ret[0].(network.SecurityGroupsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSecurityGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, networkSecurityGroupName)
}

// Get mocks base method
func (m *MockSecurityGroupsClientAPI) Get(ctx context.Context, resourceGroupName, networkSecurityGroupName, expand string) (network.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkSecurityGroupName, expand)
	ret0, _ := ret[0].(network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSecurityGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, networkSecurityGroupName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).Get), ctx, resourceGroupName, networkSecurityGroupName, expand)
}

// List mocks base method
func (m *MockSecurityGroupsClientAPI) List(ctx context.Context, resourceGroupName string) (network.SecurityGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.SecurityGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSecurityGroupsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockSecurityGroupsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.SecurityGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.SecurityGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockSecurityGroupsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockSecurityGroupsClientAPI) ListAll(ctx context.Context) (network.SecurityGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.SecurityGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockSecurityGroupsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockSecurityGroupsClientAPI) ListAllComplete(ctx context.Context) (network.SecurityGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.SecurityGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockSecurityGroupsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockSecurityGroupsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkSecurityGroupName string, parameters network.TagsObject) (network.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkSecurityGroupName, parameters)
	ret0, _ := ret[0].(network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockSecurityGroupsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkSecurityGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockSecurityGroupsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkSecurityGroupName, parameters)
}

// MockSecurityRulesClientAPI is a mock of SecurityRulesClientAPI interface
type MockSecurityRulesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityRulesClientAPIMockRecorder
}

// MockSecurityRulesClientAPIMockRecorder is the mock recorder for MockSecurityRulesClientAPI
type MockSecurityRulesClientAPIMockRecorder struct {
	mock *MockSecurityRulesClientAPI
}

// NewMockSecurityRulesClientAPI creates a new mock instance
func NewMockSecurityRulesClientAPI(ctrl *gomock.Controller) *MockSecurityRulesClientAPI {
	mock := &MockSecurityRulesClientAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityRulesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityRulesClientAPI) EXPECT() *MockSecurityRulesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSecurityRulesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkSecurityGroupName, securityRuleName string, securityRuleParameters network.SecurityRule) (network.SecurityRulesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters)
	ret0, _ := ret[0].(network.SecurityRulesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSecurityRulesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSecurityRulesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters)
}

// Delete mocks base method
func (m *MockSecurityRulesClientAPI) Delete(ctx context.Context, resourceGroupName, networkSecurityGroupName, securityRuleName string) (network.SecurityRulesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkSecurityGroupName, securityRuleName)
	ret0, _ := ret[0].(network.SecurityRulesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSecurityRulesClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkSecurityGroupName, securityRuleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecurityRulesClientAPI)(nil).Delete), ctx, resourceGroupName, networkSecurityGroupName, securityRuleName)
}

// Get mocks base method
func (m *MockSecurityRulesClientAPI) Get(ctx context.Context, resourceGroupName, networkSecurityGroupName, securityRuleName string) (network.SecurityRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkSecurityGroupName, securityRuleName)
	ret0, _ := ret[0].(network.SecurityRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSecurityRulesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkSecurityGroupName, securityRuleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecurityRulesClientAPI)(nil).Get), ctx, resourceGroupName, networkSecurityGroupName, securityRuleName)
}

// List mocks base method
func (m *MockSecurityRulesClientAPI) List(ctx context.Context, resourceGroupName, networkSecurityGroupName string) (network.SecurityRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkSecurityGroupName)
	ret0, _ := ret[0].(network.SecurityRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSecurityRulesClientAPIMockRecorder) List(ctx, resourceGroupName, networkSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecurityRulesClientAPI)(nil).List), ctx, resourceGroupName, networkSecurityGroupName)
}

// ListComplete mocks base method
func (m *MockSecurityRulesClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkSecurityGroupName string) (network.SecurityRuleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkSecurityGroupName)
	ret0, _ := ret[0].(network.SecurityRuleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockSecurityRulesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSecurityRulesClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkSecurityGroupName)
}

// MockDefaultSecurityRulesClientAPI is a mock of DefaultSecurityRulesClientAPI interface
type MockDefaultSecurityRulesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultSecurityRulesClientAPIMockRecorder
}

// MockDefaultSecurityRulesClientAPIMockRecorder is the mock recorder for MockDefaultSecurityRulesClientAPI
type MockDefaultSecurityRulesClientAPIMockRecorder struct {
	mock *MockDefaultSecurityRulesClientAPI
}

// NewMockDefaultSecurityRulesClientAPI creates a new mock instance
func NewMockDefaultSecurityRulesClientAPI(ctrl *gomock.Controller) *MockDefaultSecurityRulesClientAPI {
	mock := &MockDefaultSecurityRulesClientAPI{ctrl: ctrl}
	mock.recorder = &MockDefaultSecurityRulesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDefaultSecurityRulesClientAPI) EXPECT() *MockDefaultSecurityRulesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDefaultSecurityRulesClientAPI) Get(ctx context.Context, resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName string) (network.SecurityRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName)
	ret0, _ := ret[0].(network.SecurityRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDefaultSecurityRulesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDefaultSecurityRulesClientAPI)(nil).Get), ctx, resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName)
}

// List mocks base method
func (m *MockDefaultSecurityRulesClientAPI) List(ctx context.Context, resourceGroupName, networkSecurityGroupName string) (network.SecurityRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkSecurityGroupName)
	ret0, _ := ret[0].(network.SecurityRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDefaultSecurityRulesClientAPIMockRecorder) List(ctx, resourceGroupName, networkSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDefaultSecurityRulesClientAPI)(nil).List), ctx, resourceGroupName, networkSecurityGroupName)
}

// ListComplete mocks base method
func (m *MockDefaultSecurityRulesClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkSecurityGroupName string) (network.SecurityRuleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkSecurityGroupName)
	ret0, _ := ret[0].(network.SecurityRuleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockDefaultSecurityRulesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockDefaultSecurityRulesClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkSecurityGroupName)
}

// MockVirtualAppliancesClientAPI is a mock of VirtualAppliancesClientAPI interface
type MockVirtualAppliancesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualAppliancesClientAPIMockRecorder
}

// MockVirtualAppliancesClientAPIMockRecorder is the mock recorder for MockVirtualAppliancesClientAPI
type MockVirtualAppliancesClientAPIMockRecorder struct {
	mock *MockVirtualAppliancesClientAPI
}

// NewMockVirtualAppliancesClientAPI creates a new mock instance
func NewMockVirtualAppliancesClientAPI(ctrl *gomock.Controller) *MockVirtualAppliancesClientAPI {
	mock := &MockVirtualAppliancesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualAppliancesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualAppliancesClientAPI) EXPECT() *MockVirtualAppliancesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualAppliancesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkVirtualApplianceName string, parameters network.VirtualAppliance) (network.VirtualAppliancesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkVirtualApplianceName, parameters)
	ret0, _ := ret[0].(network.VirtualAppliancesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualAppliancesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkVirtualApplianceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkVirtualApplianceName, parameters)
}

// Delete mocks base method
func (m *MockVirtualAppliancesClientAPI) Delete(ctx context.Context, resourceGroupName, networkVirtualApplianceName string) (network.VirtualAppliancesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkVirtualApplianceName)
	ret0, _ := ret[0].(network.VirtualAppliancesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualAppliancesClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkVirtualApplianceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).Delete), ctx, resourceGroupName, networkVirtualApplianceName)
}

// Get mocks base method
func (m *MockVirtualAppliancesClientAPI) Get(ctx context.Context, resourceGroupName, networkVirtualApplianceName, expand string) (network.VirtualAppliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkVirtualApplianceName, expand)
	ret0, _ := ret[0].(network.VirtualAppliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualAppliancesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkVirtualApplianceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).Get), ctx, resourceGroupName, networkVirtualApplianceName, expand)
}

// List mocks base method
func (m *MockVirtualAppliancesClientAPI) List(ctx context.Context) (network.VirtualApplianceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.VirtualApplianceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualAppliancesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVirtualAppliancesClientAPI) ListComplete(ctx context.Context) (network.VirtualApplianceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.VirtualApplianceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualAppliancesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVirtualAppliancesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.VirtualApplianceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualApplianceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVirtualAppliancesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVirtualAppliancesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.VirtualApplianceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualApplianceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVirtualAppliancesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockVirtualAppliancesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkVirtualApplianceName string, parameters network.TagsObject) (network.VirtualAppliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkVirtualApplianceName, parameters)
	ret0, _ := ret[0].(network.VirtualAppliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualAppliancesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkVirtualApplianceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualAppliancesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkVirtualApplianceName, parameters)
}

// MockVirtualApplianceSitesClientAPI is a mock of VirtualApplianceSitesClientAPI interface
type MockVirtualApplianceSitesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualApplianceSitesClientAPIMockRecorder
}

// MockVirtualApplianceSitesClientAPIMockRecorder is the mock recorder for MockVirtualApplianceSitesClientAPI
type MockVirtualApplianceSitesClientAPIMockRecorder struct {
	mock *MockVirtualApplianceSitesClientAPI
}

// NewMockVirtualApplianceSitesClientAPI creates a new mock instance
func NewMockVirtualApplianceSitesClientAPI(ctrl *gomock.Controller) *MockVirtualApplianceSitesClientAPI {
	mock := &MockVirtualApplianceSitesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualApplianceSitesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualApplianceSitesClientAPI) EXPECT() *MockVirtualApplianceSitesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualApplianceSitesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkVirtualApplianceName, siteName string, parameters network.VirtualApplianceSite) (network.VirtualApplianceSitesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkVirtualApplianceName, siteName, parameters)
	ret0, _ := ret[0].(network.VirtualApplianceSitesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualApplianceSitesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkVirtualApplianceName, siteName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualApplianceSitesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkVirtualApplianceName, siteName, parameters)
}

// Delete mocks base method
func (m *MockVirtualApplianceSitesClientAPI) Delete(ctx context.Context, resourceGroupName, networkVirtualApplianceName, siteName string) (network.VirtualApplianceSitesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkVirtualApplianceName, siteName)
	ret0, _ := ret[0].(network.VirtualApplianceSitesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualApplianceSitesClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkVirtualApplianceName, siteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualApplianceSitesClientAPI)(nil).Delete), ctx, resourceGroupName, networkVirtualApplianceName, siteName)
}

// Get mocks base method
func (m *MockVirtualApplianceSitesClientAPI) Get(ctx context.Context, resourceGroupName, networkVirtualApplianceName, siteName string) (network.VirtualApplianceSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkVirtualApplianceName, siteName)
	ret0, _ := ret[0].(network.VirtualApplianceSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualApplianceSitesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkVirtualApplianceName, siteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualApplianceSitesClientAPI)(nil).Get), ctx, resourceGroupName, networkVirtualApplianceName, siteName)
}

// List mocks base method
func (m *MockVirtualApplianceSitesClientAPI) List(ctx context.Context, resourceGroupName, networkVirtualApplianceName string) (network.VirtualApplianceSiteListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkVirtualApplianceName)
	ret0, _ := ret[0].(network.VirtualApplianceSiteListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualApplianceSitesClientAPIMockRecorder) List(ctx, resourceGroupName, networkVirtualApplianceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualApplianceSitesClientAPI)(nil).List), ctx, resourceGroupName, networkVirtualApplianceName)
}

// ListComplete mocks base method
func (m *MockVirtualApplianceSitesClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkVirtualApplianceName string) (network.VirtualApplianceSiteListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkVirtualApplianceName)
	ret0, _ := ret[0].(network.VirtualApplianceSiteListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualApplianceSitesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkVirtualApplianceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualApplianceSitesClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkVirtualApplianceName)
}

// MockVirtualApplianceSkusClientAPI is a mock of VirtualApplianceSkusClientAPI interface
type MockVirtualApplianceSkusClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualApplianceSkusClientAPIMockRecorder
}

// MockVirtualApplianceSkusClientAPIMockRecorder is the mock recorder for MockVirtualApplianceSkusClientAPI
type MockVirtualApplianceSkusClientAPIMockRecorder struct {
	mock *MockVirtualApplianceSkusClientAPI
}

// NewMockVirtualApplianceSkusClientAPI creates a new mock instance
func NewMockVirtualApplianceSkusClientAPI(ctrl *gomock.Controller) *MockVirtualApplianceSkusClientAPI {
	mock := &MockVirtualApplianceSkusClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualApplianceSkusClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualApplianceSkusClientAPI) EXPECT() *MockVirtualApplianceSkusClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockVirtualApplianceSkusClientAPI) Get(ctx context.Context, skuName string) (network.VirtualApplianceSku, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, skuName)
	ret0, _ := ret[0].(network.VirtualApplianceSku)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualApplianceSkusClientAPIMockRecorder) Get(ctx, skuName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualApplianceSkusClientAPI)(nil).Get), ctx, skuName)
}

// List mocks base method
func (m *MockVirtualApplianceSkusClientAPI) List(ctx context.Context) (network.VirtualApplianceSkuListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.VirtualApplianceSkuListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualApplianceSkusClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualApplianceSkusClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVirtualApplianceSkusClientAPI) ListComplete(ctx context.Context) (network.VirtualApplianceSkuListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.VirtualApplianceSkuListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualApplianceSkusClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualApplianceSkusClientAPI)(nil).ListComplete), ctx)
}

// MockInboundSecurityRuleClientAPI is a mock of InboundSecurityRuleClientAPI interface
type MockInboundSecurityRuleClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInboundSecurityRuleClientAPIMockRecorder
}

// MockInboundSecurityRuleClientAPIMockRecorder is the mock recorder for MockInboundSecurityRuleClientAPI
type MockInboundSecurityRuleClientAPIMockRecorder struct {
	mock *MockInboundSecurityRuleClientAPI
}

// NewMockInboundSecurityRuleClientAPI creates a new mock instance
func NewMockInboundSecurityRuleClientAPI(ctrl *gomock.Controller) *MockInboundSecurityRuleClientAPI {
	mock := &MockInboundSecurityRuleClientAPI{ctrl: ctrl}
	mock.recorder = &MockInboundSecurityRuleClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInboundSecurityRuleClientAPI) EXPECT() *MockInboundSecurityRuleClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockInboundSecurityRuleClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkVirtualApplianceName, ruleCollectionName string, parameters network.InboundSecurityRule) (network.InboundSecurityRuleCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkVirtualApplianceName, ruleCollectionName, parameters)
	ret0, _ := ret[0].(network.InboundSecurityRuleCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockInboundSecurityRuleClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkVirtualApplianceName, ruleCollectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockInboundSecurityRuleClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkVirtualApplianceName, ruleCollectionName, parameters)
}

// MockWatchersClientAPI is a mock of WatchersClientAPI interface
type MockWatchersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWatchersClientAPIMockRecorder
}

// MockWatchersClientAPIMockRecorder is the mock recorder for MockWatchersClientAPI
type MockWatchersClientAPIMockRecorder struct {
	mock *MockWatchersClientAPI
}

// NewMockWatchersClientAPI creates a new mock instance
func NewMockWatchersClientAPI(ctrl *gomock.Controller) *MockWatchersClientAPI {
	mock := &MockWatchersClientAPI{ctrl: ctrl}
	mock.recorder = &MockWatchersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatchersClientAPI) EXPECT() *MockWatchersClientAPIMockRecorder {
	return m.recorder
}

// CheckConnectivity mocks base method
func (m *MockWatchersClientAPI) CheckConnectivity(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.ConnectivityParameters) (network.WatchersCheckConnectivityFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnectivity", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersCheckConnectivityFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConnectivity indicates an expected call of CheckConnectivity
func (mr *MockWatchersClientAPIMockRecorder) CheckConnectivity(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnectivity", reflect.TypeOf((*MockWatchersClientAPI)(nil).CheckConnectivity), ctx, resourceGroupName, networkWatcherName, parameters)
}

// CreateOrUpdate mocks base method
func (m *MockWatchersClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.Watcher) (network.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockWatchersClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockWatchersClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkWatcherName, parameters)
}

// Delete mocks base method
func (m *MockWatchersClientAPI) Delete(ctx context.Context, resourceGroupName, networkWatcherName string) (network.WatchersDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkWatcherName)
	ret0, _ := ret[0].(network.WatchersDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockWatchersClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkWatcherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWatchersClientAPI)(nil).Delete), ctx, resourceGroupName, networkWatcherName)
}

// Get mocks base method
func (m *MockWatchersClientAPI) Get(ctx context.Context, resourceGroupName, networkWatcherName string) (network.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkWatcherName)
	ret0, _ := ret[0].(network.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockWatchersClientAPIMockRecorder) Get(ctx, resourceGroupName, networkWatcherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWatchersClientAPI)(nil).Get), ctx, resourceGroupName, networkWatcherName)
}

// GetAzureReachabilityReport mocks base method
func (m *MockWatchersClientAPI) GetAzureReachabilityReport(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.AzureReachabilityReportParameters) (network.WatchersGetAzureReachabilityReportFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureReachabilityReport", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetAzureReachabilityReportFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureReachabilityReport indicates an expected call of GetAzureReachabilityReport
func (mr *MockWatchersClientAPIMockRecorder) GetAzureReachabilityReport(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureReachabilityReport", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetAzureReachabilityReport), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetFlowLogStatus mocks base method
func (m *MockWatchersClientAPI) GetFlowLogStatus(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.FlowLogStatusParameters) (network.WatchersGetFlowLogStatusFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowLogStatus", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetFlowLogStatusFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowLogStatus indicates an expected call of GetFlowLogStatus
func (mr *MockWatchersClientAPIMockRecorder) GetFlowLogStatus(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowLogStatus", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetFlowLogStatus), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetNetworkConfigurationDiagnostic mocks base method
func (m *MockWatchersClientAPI) GetNetworkConfigurationDiagnostic(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.ConfigurationDiagnosticParameters) (network.WatchersGetNetworkConfigurationDiagnosticFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkConfigurationDiagnostic", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetNetworkConfigurationDiagnosticFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkConfigurationDiagnostic indicates an expected call of GetNetworkConfigurationDiagnostic
func (mr *MockWatchersClientAPIMockRecorder) GetNetworkConfigurationDiagnostic(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkConfigurationDiagnostic", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetNetworkConfigurationDiagnostic), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetNextHop mocks base method
func (m *MockWatchersClientAPI) GetNextHop(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.NextHopParameters) (network.WatchersGetNextHopFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextHop", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetNextHopFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextHop indicates an expected call of GetNextHop
func (mr *MockWatchersClientAPIMockRecorder) GetNextHop(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextHop", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetNextHop), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetTopology mocks base method
func (m *MockWatchersClientAPI) GetTopology(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.TopologyParameters) (network.Topology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopology", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.Topology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopology indicates an expected call of GetTopology
func (mr *MockWatchersClientAPIMockRecorder) GetTopology(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopology", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetTopology), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetTroubleshooting mocks base method
func (m *MockWatchersClientAPI) GetTroubleshooting(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.TroubleshootingParameters) (network.WatchersGetTroubleshootingFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTroubleshooting", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetTroubleshootingFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTroubleshooting indicates an expected call of GetTroubleshooting
func (mr *MockWatchersClientAPIMockRecorder) GetTroubleshooting(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTroubleshooting", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetTroubleshooting), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetTroubleshootingResult mocks base method
func (m *MockWatchersClientAPI) GetTroubleshootingResult(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.QueryTroubleshootingParameters) (network.WatchersGetTroubleshootingResultFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTroubleshootingResult", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetTroubleshootingResultFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTroubleshootingResult indicates an expected call of GetTroubleshootingResult
func (mr *MockWatchersClientAPIMockRecorder) GetTroubleshootingResult(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTroubleshootingResult", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetTroubleshootingResult), ctx, resourceGroupName, networkWatcherName, parameters)
}

// GetVMSecurityRules mocks base method
func (m *MockWatchersClientAPI) GetVMSecurityRules(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.SecurityGroupViewParameters) (network.WatchersGetVMSecurityRulesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMSecurityRules", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersGetVMSecurityRulesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMSecurityRules indicates an expected call of GetVMSecurityRules
func (mr *MockWatchersClientAPIMockRecorder) GetVMSecurityRules(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMSecurityRules", reflect.TypeOf((*MockWatchersClientAPI)(nil).GetVMSecurityRules), ctx, resourceGroupName, networkWatcherName, parameters)
}

// List mocks base method
func (m *MockWatchersClientAPI) List(ctx context.Context, resourceGroupName string) (network.WatcherListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.WatcherListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockWatchersClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWatchersClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockWatchersClientAPI) ListAll(ctx context.Context) (network.WatcherListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.WatcherListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockWatchersClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockWatchersClientAPI)(nil).ListAll), ctx)
}

// ListAvailableProviders mocks base method
func (m *MockWatchersClientAPI) ListAvailableProviders(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.AvailableProvidersListParameters) (network.WatchersListAvailableProvidersFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableProviders", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersListAvailableProvidersFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableProviders indicates an expected call of ListAvailableProviders
func (mr *MockWatchersClientAPIMockRecorder) ListAvailableProviders(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableProviders", reflect.TypeOf((*MockWatchersClientAPI)(nil).ListAvailableProviders), ctx, resourceGroupName, networkWatcherName, parameters)
}

// SetFlowLogConfiguration mocks base method
func (m *MockWatchersClientAPI) SetFlowLogConfiguration(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.FlowLogInformation) (network.WatchersSetFlowLogConfigurationFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlowLogConfiguration", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersSetFlowLogConfigurationFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFlowLogConfiguration indicates an expected call of SetFlowLogConfiguration
func (mr *MockWatchersClientAPIMockRecorder) SetFlowLogConfiguration(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlowLogConfiguration", reflect.TypeOf((*MockWatchersClientAPI)(nil).SetFlowLogConfiguration), ctx, resourceGroupName, networkWatcherName, parameters)
}

// UpdateTags mocks base method
func (m *MockWatchersClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.TagsObject) (network.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockWatchersClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockWatchersClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkWatcherName, parameters)
}

// VerifyIPFlow mocks base method
func (m *MockWatchersClientAPI) VerifyIPFlow(ctx context.Context, resourceGroupName, networkWatcherName string, parameters network.VerificationIPFlowParameters) (network.WatchersVerifyIPFlowFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIPFlow", ctx, resourceGroupName, networkWatcherName, parameters)
	ret0, _ := ret[0].(network.WatchersVerifyIPFlowFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIPFlow indicates an expected call of VerifyIPFlow
func (mr *MockWatchersClientAPIMockRecorder) VerifyIPFlow(ctx, resourceGroupName, networkWatcherName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIPFlow", reflect.TypeOf((*MockWatchersClientAPI)(nil).VerifyIPFlow), ctx, resourceGroupName, networkWatcherName, parameters)
}

// MockPacketCapturesClientAPI is a mock of PacketCapturesClientAPI interface
type MockPacketCapturesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPacketCapturesClientAPIMockRecorder
}

// MockPacketCapturesClientAPIMockRecorder is the mock recorder for MockPacketCapturesClientAPI
type MockPacketCapturesClientAPIMockRecorder struct {
	mock *MockPacketCapturesClientAPI
}

// NewMockPacketCapturesClientAPI creates a new mock instance
func NewMockPacketCapturesClientAPI(ctrl *gomock.Controller) *MockPacketCapturesClientAPI {
	mock := &MockPacketCapturesClientAPI{ctrl: ctrl}
	mock.recorder = &MockPacketCapturesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPacketCapturesClientAPI) EXPECT() *MockPacketCapturesClientAPIMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPacketCapturesClientAPI) Create(ctx context.Context, resourceGroupName, networkWatcherName, packetCaptureName string, parameters network.PacketCapture) (network.PacketCapturesCreateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resourceGroupName, networkWatcherName, packetCaptureName, parameters)
	ret0, _ := ret[0].(network.PacketCapturesCreateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPacketCapturesClientAPIMockRecorder) Create(ctx, resourceGroupName, networkWatcherName, packetCaptureName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPacketCapturesClientAPI)(nil).Create), ctx, resourceGroupName, networkWatcherName, packetCaptureName, parameters)
}

// Delete mocks base method
func (m *MockPacketCapturesClientAPI) Delete(ctx context.Context, resourceGroupName, networkWatcherName, packetCaptureName string) (network.PacketCapturesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkWatcherName, packetCaptureName)
	ret0, _ := ret[0].(network.PacketCapturesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPacketCapturesClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkWatcherName, packetCaptureName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPacketCapturesClientAPI)(nil).Delete), ctx, resourceGroupName, networkWatcherName, packetCaptureName)
}

// Get mocks base method
func (m *MockPacketCapturesClientAPI) Get(ctx context.Context, resourceGroupName, networkWatcherName, packetCaptureName string) (network.PacketCaptureResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkWatcherName, packetCaptureName)
	ret0, _ := ret[0].(network.PacketCaptureResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPacketCapturesClientAPIMockRecorder) Get(ctx, resourceGroupName, networkWatcherName, packetCaptureName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPacketCapturesClientAPI)(nil).Get), ctx, resourceGroupName, networkWatcherName, packetCaptureName)
}

// GetStatus mocks base method
func (m *MockPacketCapturesClientAPI) GetStatus(ctx context.Context, resourceGroupName, networkWatcherName, packetCaptureName string) (network.PacketCapturesGetStatusFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, resourceGroupName, networkWatcherName, packetCaptureName)
	ret0, _ := ret[0].(network.PacketCapturesGetStatusFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockPacketCapturesClientAPIMockRecorder) GetStatus(ctx, resourceGroupName, networkWatcherName, packetCaptureName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPacketCapturesClientAPI)(nil).GetStatus), ctx, resourceGroupName, networkWatcherName, packetCaptureName)
}

// List mocks base method
func (m *MockPacketCapturesClientAPI) List(ctx context.Context, resourceGroupName, networkWatcherName string) (network.PacketCaptureListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkWatcherName)
	ret0, _ := ret[0].(network.PacketCaptureListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPacketCapturesClientAPIMockRecorder) List(ctx, resourceGroupName, networkWatcherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPacketCapturesClientAPI)(nil).List), ctx, resourceGroupName, networkWatcherName)
}

// Stop mocks base method
func (m *MockPacketCapturesClientAPI) Stop(ctx context.Context, resourceGroupName, networkWatcherName, packetCaptureName string) (network.PacketCapturesStopFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, resourceGroupName, networkWatcherName, packetCaptureName)
	ret0, _ := ret[0].(network.PacketCapturesStopFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockPacketCapturesClientAPIMockRecorder) Stop(ctx, resourceGroupName, networkWatcherName, packetCaptureName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPacketCapturesClientAPI)(nil).Stop), ctx, resourceGroupName, networkWatcherName, packetCaptureName)
}

// MockConnectionMonitorsClientAPI is a mock of ConnectionMonitorsClientAPI interface
type MockConnectionMonitorsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMonitorsClientAPIMockRecorder
}

// MockConnectionMonitorsClientAPIMockRecorder is the mock recorder for MockConnectionMonitorsClientAPI
type MockConnectionMonitorsClientAPIMockRecorder struct {
	mock *MockConnectionMonitorsClientAPI
}

// NewMockConnectionMonitorsClientAPI creates a new mock instance
func NewMockConnectionMonitorsClientAPI(ctrl *gomock.Controller) *MockConnectionMonitorsClientAPI {
	mock := &MockConnectionMonitorsClientAPI{ctrl: ctrl}
	mock.recorder = &MockConnectionMonitorsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectionMonitorsClientAPI) EXPECT() *MockConnectionMonitorsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockConnectionMonitorsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string, parameters network.ConnectionMonitor, migrate string) (network.ConnectionMonitorsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkWatcherName, connectionMonitorName, parameters, migrate)
	ret0, _ := ret[0].(network.ConnectionMonitorsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockConnectionMonitorsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkWatcherName, connectionMonitorName, parameters, migrate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkWatcherName, connectionMonitorName, parameters, migrate)
}

// Delete mocks base method
func (m *MockConnectionMonitorsClientAPI) Delete(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string) (network.ConnectionMonitorsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
	ret0, _ := ret[0].(network.ConnectionMonitorsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockConnectionMonitorsClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkWatcherName, connectionMonitorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).Delete), ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
}

// Get mocks base method
func (m *MockConnectionMonitorsClientAPI) Get(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string) (network.ConnectionMonitorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
	ret0, _ := ret[0].(network.ConnectionMonitorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockConnectionMonitorsClientAPIMockRecorder) Get(ctx, resourceGroupName, networkWatcherName, connectionMonitorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).Get), ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
}

// List mocks base method
func (m *MockConnectionMonitorsClientAPI) List(ctx context.Context, resourceGroupName, networkWatcherName string) (network.ConnectionMonitorListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkWatcherName)
	ret0, _ := ret[0].(network.ConnectionMonitorListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockConnectionMonitorsClientAPIMockRecorder) List(ctx, resourceGroupName, networkWatcherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).List), ctx, resourceGroupName, networkWatcherName)
}

// Query mocks base method
func (m *MockConnectionMonitorsClientAPI) Query(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string) (network.ConnectionMonitorsQueryFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
	ret0, _ := ret[0].(network.ConnectionMonitorsQueryFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockConnectionMonitorsClientAPIMockRecorder) Query(ctx, resourceGroupName, networkWatcherName, connectionMonitorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).Query), ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
}

// Start mocks base method
func (m *MockConnectionMonitorsClientAPI) Start(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string) (network.ConnectionMonitorsStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
	ret0, _ := ret[0].(network.ConnectionMonitorsStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockConnectionMonitorsClientAPIMockRecorder) Start(ctx, resourceGroupName, networkWatcherName, connectionMonitorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).Start), ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
}

// Stop mocks base method
func (m *MockConnectionMonitorsClientAPI) Stop(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string) (network.ConnectionMonitorsStopFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
	ret0, _ := ret[0].(network.ConnectionMonitorsStopFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockConnectionMonitorsClientAPIMockRecorder) Stop(ctx, resourceGroupName, networkWatcherName, connectionMonitorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).Stop), ctx, resourceGroupName, networkWatcherName, connectionMonitorName)
}

// UpdateTags mocks base method
func (m *MockConnectionMonitorsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkWatcherName, connectionMonitorName string, parameters network.TagsObject) (network.ConnectionMonitorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkWatcherName, connectionMonitorName, parameters)
	ret0, _ := ret[0].(network.ConnectionMonitorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockConnectionMonitorsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkWatcherName, connectionMonitorName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockConnectionMonitorsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkWatcherName, connectionMonitorName, parameters)
}

// MockFlowLogsClientAPI is a mock of FlowLogsClientAPI interface
type MockFlowLogsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFlowLogsClientAPIMockRecorder
}

// MockFlowLogsClientAPIMockRecorder is the mock recorder for MockFlowLogsClientAPI
type MockFlowLogsClientAPIMockRecorder struct {
	mock *MockFlowLogsClientAPI
}

// NewMockFlowLogsClientAPI creates a new mock instance
func NewMockFlowLogsClientAPI(ctrl *gomock.Controller) *MockFlowLogsClientAPI {
	mock := &MockFlowLogsClientAPI{ctrl: ctrl}
	mock.recorder = &MockFlowLogsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowLogsClientAPI) EXPECT() *MockFlowLogsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockFlowLogsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string, parameters network.FlowLog) (network.FlowLogsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, networkWatcherName, flowLogName, parameters)
	ret0, _ := ret[0].(network.FlowLogsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockFlowLogsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, networkWatcherName, flowLogName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockFlowLogsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, networkWatcherName, flowLogName, parameters)
}

// Delete mocks base method
func (m *MockFlowLogsClientAPI) Delete(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string) (network.FlowLogsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, networkWatcherName, flowLogName)
	ret0, _ := ret[0].(network.FlowLogsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockFlowLogsClientAPIMockRecorder) Delete(ctx, resourceGroupName, networkWatcherName, flowLogName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlowLogsClientAPI)(nil).Delete), ctx, resourceGroupName, networkWatcherName, flowLogName)
}

// Get mocks base method
func (m *MockFlowLogsClientAPI) Get(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string) (network.FlowLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkWatcherName, flowLogName)
	ret0, _ := ret[0].(network.FlowLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFlowLogsClientAPIMockRecorder) Get(ctx, resourceGroupName, networkWatcherName, flowLogName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlowLogsClientAPI)(nil).Get), ctx, resourceGroupName, networkWatcherName, flowLogName)
}

// List mocks base method
func (m *MockFlowLogsClientAPI) List(ctx context.Context, resourceGroupName, networkWatcherName string) (network.FlowLogListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, networkWatcherName)
	ret0, _ := ret[0].(network.FlowLogListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFlowLogsClientAPIMockRecorder) List(ctx, resourceGroupName, networkWatcherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFlowLogsClientAPI)(nil).List), ctx, resourceGroupName, networkWatcherName)
}

// ListComplete mocks base method
func (m *MockFlowLogsClientAPI) ListComplete(ctx context.Context, resourceGroupName, networkWatcherName string) (network.FlowLogListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, networkWatcherName)
	ret0, _ := ret[0].(network.FlowLogListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockFlowLogsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, networkWatcherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockFlowLogsClientAPI)(nil).ListComplete), ctx, resourceGroupName, networkWatcherName)
}

// UpdateTags mocks base method
func (m *MockFlowLogsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string, parameters network.TagsObject) (network.FlowLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, networkWatcherName, flowLogName, parameters)
	ret0, _ := ret[0].(network.FlowLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockFlowLogsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, networkWatcherName, flowLogName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockFlowLogsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, networkWatcherName, flowLogName, parameters)
}

// MockOperationsClientAPI is a mock of OperationsClientAPI interface
type MockOperationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsClientAPIMockRecorder
}

// MockOperationsClientAPIMockRecorder is the mock recorder for MockOperationsClientAPI
type MockOperationsClientAPIMockRecorder struct {
	mock *MockOperationsClientAPI
}

// NewMockOperationsClientAPI creates a new mock instance
func NewMockOperationsClientAPI(ctrl *gomock.Controller) *MockOperationsClientAPI {
	mock := &MockOperationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockOperationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperationsClientAPI) EXPECT() *MockOperationsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockOperationsClientAPI) List(ctx context.Context) (network.OperationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.OperationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockOperationsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOperationsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockOperationsClientAPI) ListComplete(ctx context.Context) (network.OperationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.OperationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockOperationsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockOperationsClientAPI)(nil).ListComplete), ctx)
}

// MockPrivateEndpointsClientAPI is a mock of PrivateEndpointsClientAPI interface
type MockPrivateEndpointsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateEndpointsClientAPIMockRecorder
}

// MockPrivateEndpointsClientAPIMockRecorder is the mock recorder for MockPrivateEndpointsClientAPI
type MockPrivateEndpointsClientAPIMockRecorder struct {
	mock *MockPrivateEndpointsClientAPI
}

// NewMockPrivateEndpointsClientAPI creates a new mock instance
func NewMockPrivateEndpointsClientAPI(ctrl *gomock.Controller) *MockPrivateEndpointsClientAPI {
	mock := &MockPrivateEndpointsClientAPI{ctrl: ctrl}
	mock.recorder = &MockPrivateEndpointsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateEndpointsClientAPI) EXPECT() *MockPrivateEndpointsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockPrivateEndpointsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, privateEndpointName string, parameters network.PrivateEndpoint) (network.PrivateEndpointsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, privateEndpointName, parameters)
	ret0, _ := ret[0].(network.PrivateEndpointsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockPrivateEndpointsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, privateEndpointName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, privateEndpointName, parameters)
}

// Delete mocks base method
func (m *MockPrivateEndpointsClientAPI) Delete(ctx context.Context, resourceGroupName, privateEndpointName string) (network.PrivateEndpointsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, privateEndpointName)
	ret0, _ := ret[0].(network.PrivateEndpointsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPrivateEndpointsClientAPIMockRecorder) Delete(ctx, resourceGroupName, privateEndpointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).Delete), ctx, resourceGroupName, privateEndpointName)
}

// Get mocks base method
func (m *MockPrivateEndpointsClientAPI) Get(ctx context.Context, resourceGroupName, privateEndpointName, expand string) (network.PrivateEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, privateEndpointName, expand)
	ret0, _ := ret[0].(network.PrivateEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPrivateEndpointsClientAPIMockRecorder) Get(ctx, resourceGroupName, privateEndpointName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).Get), ctx, resourceGroupName, privateEndpointName, expand)
}

// List mocks base method
func (m *MockPrivateEndpointsClientAPI) List(ctx context.Context, resourceGroupName string) (network.PrivateEndpointListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PrivateEndpointListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPrivateEndpointsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockPrivateEndpointsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.PrivateEndpointListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PrivateEndpointListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockPrivateEndpointsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListBySubscription mocks base method
func (m *MockPrivateEndpointsClientAPI) ListBySubscription(ctx context.Context) (network.PrivateEndpointListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(network.PrivateEndpointListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription
func (mr *MockPrivateEndpointsClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).ListBySubscription), ctx)
}

// ListBySubscriptionComplete mocks base method
func (m *MockPrivateEndpointsClientAPI) ListBySubscriptionComplete(ctx context.Context) (network.PrivateEndpointListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx)
	ret0, _ := ret[0].(network.PrivateEndpointListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete
func (mr *MockPrivateEndpointsClientAPIMockRecorder) ListBySubscriptionComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockPrivateEndpointsClientAPI)(nil).ListBySubscriptionComplete), ctx)
}

// MockAvailablePrivateEndpointTypesClientAPI is a mock of AvailablePrivateEndpointTypesClientAPI interface
type MockAvailablePrivateEndpointTypesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAvailablePrivateEndpointTypesClientAPIMockRecorder
}

// MockAvailablePrivateEndpointTypesClientAPIMockRecorder is the mock recorder for MockAvailablePrivateEndpointTypesClientAPI
type MockAvailablePrivateEndpointTypesClientAPIMockRecorder struct {
	mock *MockAvailablePrivateEndpointTypesClientAPI
}

// NewMockAvailablePrivateEndpointTypesClientAPI creates a new mock instance
func NewMockAvailablePrivateEndpointTypesClientAPI(ctrl *gomock.Controller) *MockAvailablePrivateEndpointTypesClientAPI {
	mock := &MockAvailablePrivateEndpointTypesClientAPI{ctrl: ctrl}
	mock.recorder = &MockAvailablePrivateEndpointTypesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAvailablePrivateEndpointTypesClientAPI) EXPECT() *MockAvailablePrivateEndpointTypesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAvailablePrivateEndpointTypesClientAPI) List(ctx context.Context, location string) (network.AvailablePrivateEndpointTypesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(network.AvailablePrivateEndpointTypesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAvailablePrivateEndpointTypesClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAvailablePrivateEndpointTypesClientAPI)(nil).List), ctx, location)
}

// ListComplete mocks base method
func (m *MockAvailablePrivateEndpointTypesClientAPI) ListComplete(ctx context.Context, location string) (network.AvailablePrivateEndpointTypesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(network.AvailablePrivateEndpointTypesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockAvailablePrivateEndpointTypesClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAvailablePrivateEndpointTypesClientAPI)(nil).ListComplete), ctx, location)
}

// ListByResourceGroup mocks base method
func (m *MockAvailablePrivateEndpointTypesClientAPI) ListByResourceGroup(ctx context.Context, location, resourceGroupName string) (network.AvailablePrivateEndpointTypesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, location, resourceGroupName)
	ret0, _ := ret[0].(network.AvailablePrivateEndpointTypesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockAvailablePrivateEndpointTypesClientAPIMockRecorder) ListByResourceGroup(ctx, location, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockAvailablePrivateEndpointTypesClientAPI)(nil).ListByResourceGroup), ctx, location, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockAvailablePrivateEndpointTypesClientAPI) ListByResourceGroupComplete(ctx context.Context, location, resourceGroupName string) (network.AvailablePrivateEndpointTypesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, location, resourceGroupName)
	ret0, _ := ret[0].(network.AvailablePrivateEndpointTypesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockAvailablePrivateEndpointTypesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, location, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockAvailablePrivateEndpointTypesClientAPI)(nil).ListByResourceGroupComplete), ctx, location, resourceGroupName)
}

// MockPrivateDNSZoneGroupsClientAPI is a mock of PrivateDNSZoneGroupsClientAPI interface
type MockPrivateDNSZoneGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateDNSZoneGroupsClientAPIMockRecorder
}

// MockPrivateDNSZoneGroupsClientAPIMockRecorder is the mock recorder for MockPrivateDNSZoneGroupsClientAPI
type MockPrivateDNSZoneGroupsClientAPIMockRecorder struct {
	mock *MockPrivateDNSZoneGroupsClientAPI
}

// NewMockPrivateDNSZoneGroupsClientAPI creates a new mock instance
func NewMockPrivateDNSZoneGroupsClientAPI(ctrl *gomock.Controller) *MockPrivateDNSZoneGroupsClientAPI {
	mock := &MockPrivateDNSZoneGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockPrivateDNSZoneGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateDNSZoneGroupsClientAPI) EXPECT() *MockPrivateDNSZoneGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockPrivateDNSZoneGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, privateEndpointName, privateDNSZoneGroupName string, parameters network.PrivateDNSZoneGroup) (network.PrivateDNSZoneGroupsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName, parameters)
	ret0, _ := ret[0].(network.PrivateDNSZoneGroupsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockPrivateDNSZoneGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockPrivateDNSZoneGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName, parameters)
}

// Delete mocks base method
func (m *MockPrivateDNSZoneGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, privateEndpointName, privateDNSZoneGroupName string) (network.PrivateDNSZoneGroupsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName)
	ret0, _ := ret[0].(network.PrivateDNSZoneGroupsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPrivateDNSZoneGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrivateDNSZoneGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName)
}

// Get mocks base method
func (m *MockPrivateDNSZoneGroupsClientAPI) Get(ctx context.Context, resourceGroupName, privateEndpointName, privateDNSZoneGroupName string) (network.PrivateDNSZoneGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName)
	ret0, _ := ret[0].(network.PrivateDNSZoneGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPrivateDNSZoneGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPrivateDNSZoneGroupsClientAPI)(nil).Get), ctx, resourceGroupName, privateEndpointName, privateDNSZoneGroupName)
}

// List mocks base method
func (m *MockPrivateDNSZoneGroupsClientAPI) List(ctx context.Context, privateEndpointName, resourceGroupName string) (network.PrivateDNSZoneGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, privateEndpointName, resourceGroupName)
	ret0, _ := ret[0].(network.PrivateDNSZoneGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPrivateDNSZoneGroupsClientAPIMockRecorder) List(ctx, privateEndpointName, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPrivateDNSZoneGroupsClientAPI)(nil).List), ctx, privateEndpointName, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockPrivateDNSZoneGroupsClientAPI) ListComplete(ctx context.Context, privateEndpointName, resourceGroupName string) (network.PrivateDNSZoneGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, privateEndpointName, resourceGroupName)
	ret0, _ := ret[0].(network.PrivateDNSZoneGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockPrivateDNSZoneGroupsClientAPIMockRecorder) ListComplete(ctx, privateEndpointName, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockPrivateDNSZoneGroupsClientAPI)(nil).ListComplete), ctx, privateEndpointName, resourceGroupName)
}

// MockPrivateLinkServicesClientAPI is a mock of PrivateLinkServicesClientAPI interface
type MockPrivateLinkServicesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateLinkServicesClientAPIMockRecorder
}

// MockPrivateLinkServicesClientAPIMockRecorder is the mock recorder for MockPrivateLinkServicesClientAPI
type MockPrivateLinkServicesClientAPIMockRecorder struct {
	mock *MockPrivateLinkServicesClientAPI
}

// NewMockPrivateLinkServicesClientAPI creates a new mock instance
func NewMockPrivateLinkServicesClientAPI(ctrl *gomock.Controller) *MockPrivateLinkServicesClientAPI {
	mock := &MockPrivateLinkServicesClientAPI{ctrl: ctrl}
	mock.recorder = &MockPrivateLinkServicesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateLinkServicesClientAPI) EXPECT() *MockPrivateLinkServicesClientAPIMockRecorder {
	return m.recorder
}

// CheckPrivateLinkServiceVisibility mocks base method
func (m *MockPrivateLinkServicesClientAPI) CheckPrivateLinkServiceVisibility(ctx context.Context, location string, parameters network.CheckPrivateLinkServiceVisibilityRequest) (network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPrivateLinkServiceVisibility", ctx, location, parameters)
	ret0, _ := ret[0].(network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPrivateLinkServiceVisibility indicates an expected call of CheckPrivateLinkServiceVisibility
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) CheckPrivateLinkServiceVisibility(ctx, location, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPrivateLinkServiceVisibility", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).CheckPrivateLinkServiceVisibility), ctx, location, parameters)
}

// CheckPrivateLinkServiceVisibilityByResourceGroup mocks base method
func (m *MockPrivateLinkServicesClientAPI) CheckPrivateLinkServiceVisibilityByResourceGroup(ctx context.Context, location, resourceGroupName string, parameters network.CheckPrivateLinkServiceVisibilityRequest) (network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPrivateLinkServiceVisibilityByResourceGroup", ctx, location, resourceGroupName, parameters)
	ret0, _ := ret[0].(network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPrivateLinkServiceVisibilityByResourceGroup indicates an expected call of CheckPrivateLinkServiceVisibilityByResourceGroup
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) CheckPrivateLinkServiceVisibilityByResourceGroup(ctx, location, resourceGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPrivateLinkServiceVisibilityByResourceGroup", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).CheckPrivateLinkServiceVisibilityByResourceGroup), ctx, location, resourceGroupName, parameters)
}

// CreateOrUpdate mocks base method
func (m *MockPrivateLinkServicesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, serviceName string, parameters network.PrivateLinkService) (network.PrivateLinkServicesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, serviceName, parameters)
	ret0, _ := ret[0].(network.PrivateLinkServicesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, serviceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, serviceName, parameters)
}

// Delete mocks base method
func (m *MockPrivateLinkServicesClientAPI) Delete(ctx context.Context, resourceGroupName, serviceName string) (network.PrivateLinkServicesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, serviceName)
	ret0, _ := ret[0].(network.PrivateLinkServicesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) Delete(ctx, resourceGroupName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).Delete), ctx, resourceGroupName, serviceName)
}

// DeletePrivateEndpointConnection mocks base method
func (m *MockPrivateLinkServicesClientAPI) DeletePrivateEndpointConnection(ctx context.Context, resourceGroupName, serviceName, peConnectionName string) (network.PrivateLinkServicesDeletePrivateEndpointConnectionFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateEndpointConnection", ctx, resourceGroupName, serviceName, peConnectionName)
	ret0, _ := ret[0].(network.PrivateLinkServicesDeletePrivateEndpointConnectionFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivateEndpointConnection indicates an expected call of DeletePrivateEndpointConnection
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) DeletePrivateEndpointConnection(ctx, resourceGroupName, serviceName, peConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateEndpointConnection", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).DeletePrivateEndpointConnection), ctx, resourceGroupName, serviceName, peConnectionName)
}

// Get mocks base method
func (m *MockPrivateLinkServicesClientAPI) Get(ctx context.Context, resourceGroupName, serviceName, expand string) (network.PrivateLinkService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, serviceName, expand)
	ret0, _ := ret[0].(network.PrivateLinkService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) Get(ctx, resourceGroupName, serviceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).Get), ctx, resourceGroupName, serviceName, expand)
}

// GetPrivateEndpointConnection mocks base method
func (m *MockPrivateLinkServicesClientAPI) GetPrivateEndpointConnection(ctx context.Context, resourceGroupName, serviceName, peConnectionName, expand string) (network.PrivateEndpointConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpointConnection", ctx, resourceGroupName, serviceName, peConnectionName, expand)
	ret0, _ := ret[0].(network.PrivateEndpointConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateEndpointConnection indicates an expected call of GetPrivateEndpointConnection
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) GetPrivateEndpointConnection(ctx, resourceGroupName, serviceName, peConnectionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpointConnection", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).GetPrivateEndpointConnection), ctx, resourceGroupName, serviceName, peConnectionName, expand)
}

// List mocks base method
func (m *MockPrivateLinkServicesClientAPI) List(ctx context.Context, resourceGroupName string) (network.PrivateLinkServiceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PrivateLinkServiceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.PrivateLinkServiceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PrivateLinkServiceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAutoApprovedPrivateLinkServices mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListAutoApprovedPrivateLinkServices(ctx context.Context, location string) (network.AutoApprovedPrivateLinkServicesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoApprovedPrivateLinkServices", ctx, location)
	ret0, _ := ret[0].(network.AutoApprovedPrivateLinkServicesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoApprovedPrivateLinkServices indicates an expected call of ListAutoApprovedPrivateLinkServices
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListAutoApprovedPrivateLinkServices(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoApprovedPrivateLinkServices", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListAutoApprovedPrivateLinkServices), ctx, location)
}

// ListAutoApprovedPrivateLinkServicesComplete mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListAutoApprovedPrivateLinkServicesComplete(ctx context.Context, location string) (network.AutoApprovedPrivateLinkServicesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoApprovedPrivateLinkServicesComplete", ctx, location)
	ret0, _ := ret[0].(network.AutoApprovedPrivateLinkServicesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoApprovedPrivateLinkServicesComplete indicates an expected call of ListAutoApprovedPrivateLinkServicesComplete
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListAutoApprovedPrivateLinkServicesComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoApprovedPrivateLinkServicesComplete", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListAutoApprovedPrivateLinkServicesComplete), ctx, location)
}

// ListAutoApprovedPrivateLinkServicesByResourceGroup mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListAutoApprovedPrivateLinkServicesByResourceGroup(ctx context.Context, location, resourceGroupName string) (network.AutoApprovedPrivateLinkServicesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoApprovedPrivateLinkServicesByResourceGroup", ctx, location, resourceGroupName)
	ret0, _ := ret[0].(network.AutoApprovedPrivateLinkServicesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoApprovedPrivateLinkServicesByResourceGroup indicates an expected call of ListAutoApprovedPrivateLinkServicesByResourceGroup
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListAutoApprovedPrivateLinkServicesByResourceGroup(ctx, location, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoApprovedPrivateLinkServicesByResourceGroup", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListAutoApprovedPrivateLinkServicesByResourceGroup), ctx, location, resourceGroupName)
}

// ListAutoApprovedPrivateLinkServicesByResourceGroupComplete mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListAutoApprovedPrivateLinkServicesByResourceGroupComplete(ctx context.Context, location, resourceGroupName string) (network.AutoApprovedPrivateLinkServicesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoApprovedPrivateLinkServicesByResourceGroupComplete", ctx, location, resourceGroupName)
	ret0, _ := ret[0].(network.AutoApprovedPrivateLinkServicesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoApprovedPrivateLinkServicesByResourceGroupComplete indicates an expected call of ListAutoApprovedPrivateLinkServicesByResourceGroupComplete
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListAutoApprovedPrivateLinkServicesByResourceGroupComplete(ctx, location, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoApprovedPrivateLinkServicesByResourceGroupComplete", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListAutoApprovedPrivateLinkServicesByResourceGroupComplete), ctx, location, resourceGroupName)
}

// ListBySubscription mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListBySubscription(ctx context.Context) (network.PrivateLinkServiceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(network.PrivateLinkServiceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListBySubscription), ctx)
}

// ListBySubscriptionComplete mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListBySubscriptionComplete(ctx context.Context) (network.PrivateLinkServiceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx)
	ret0, _ := ret[0].(network.PrivateLinkServiceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListBySubscriptionComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListBySubscriptionComplete), ctx)
}

// ListPrivateEndpointConnections mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListPrivateEndpointConnections(ctx context.Context, resourceGroupName, serviceName string) (network.PrivateEndpointConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointConnections", ctx, resourceGroupName, serviceName)
	ret0, _ := ret[0].(network.PrivateEndpointConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateEndpointConnections indicates an expected call of ListPrivateEndpointConnections
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListPrivateEndpointConnections(ctx, resourceGroupName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointConnections", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListPrivateEndpointConnections), ctx, resourceGroupName, serviceName)
}

// ListPrivateEndpointConnectionsComplete mocks base method
func (m *MockPrivateLinkServicesClientAPI) ListPrivateEndpointConnectionsComplete(ctx context.Context, resourceGroupName, serviceName string) (network.PrivateEndpointConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointConnectionsComplete", ctx, resourceGroupName, serviceName)
	ret0, _ := ret[0].(network.PrivateEndpointConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateEndpointConnectionsComplete indicates an expected call of ListPrivateEndpointConnectionsComplete
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) ListPrivateEndpointConnectionsComplete(ctx, resourceGroupName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointConnectionsComplete", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).ListPrivateEndpointConnectionsComplete), ctx, resourceGroupName, serviceName)
}

// UpdatePrivateEndpointConnection mocks base method
func (m *MockPrivateLinkServicesClientAPI) UpdatePrivateEndpointConnection(ctx context.Context, resourceGroupName, serviceName, peConnectionName string, parameters network.PrivateEndpointConnection) (network.PrivateEndpointConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateEndpointConnection", ctx, resourceGroupName, serviceName, peConnectionName, parameters)
	ret0, _ := ret[0].(network.PrivateEndpointConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateEndpointConnection indicates an expected call of UpdatePrivateEndpointConnection
func (mr *MockPrivateLinkServicesClientAPIMockRecorder) UpdatePrivateEndpointConnection(ctx, resourceGroupName, serviceName, peConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateEndpointConnection", reflect.TypeOf((*MockPrivateLinkServicesClientAPI)(nil).UpdatePrivateEndpointConnection), ctx, resourceGroupName, serviceName, peConnectionName, parameters)
}

// MockPublicIPAddressesClientAPI is a mock of PublicIPAddressesClientAPI interface
type MockPublicIPAddressesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPublicIPAddressesClientAPIMockRecorder
}

// MockPublicIPAddressesClientAPIMockRecorder is the mock recorder for MockPublicIPAddressesClientAPI
type MockPublicIPAddressesClientAPIMockRecorder struct {
	mock *MockPublicIPAddressesClientAPI
}

// NewMockPublicIPAddressesClientAPI creates a new mock instance
func NewMockPublicIPAddressesClientAPI(ctrl *gomock.Controller) *MockPublicIPAddressesClientAPI {
	mock := &MockPublicIPAddressesClientAPI{ctrl: ctrl}
	mock.recorder = &MockPublicIPAddressesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicIPAddressesClientAPI) EXPECT() *MockPublicIPAddressesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockPublicIPAddressesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, publicIPAddressName string, parameters network.PublicIPAddress) (network.PublicIPAddressesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, publicIPAddressName, parameters)
	ret0, _ := ret[0].(network.PublicIPAddressesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockPublicIPAddressesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, publicIPAddressName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, publicIPAddressName, parameters)
}

// Delete mocks base method
func (m *MockPublicIPAddressesClientAPI) Delete(ctx context.Context, resourceGroupName, publicIPAddressName string) (network.PublicIPAddressesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, publicIPAddressName)
	ret0, _ := ret[0].(network.PublicIPAddressesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) Delete(ctx, resourceGroupName, publicIPAddressName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).Delete), ctx, resourceGroupName, publicIPAddressName)
}

// Get mocks base method
func (m *MockPublicIPAddressesClientAPI) Get(ctx context.Context, resourceGroupName, publicIPAddressName, expand string) (network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, publicIPAddressName, expand)
	ret0, _ := ret[0].(network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPublicIPAddressesClientAPIMockRecorder) Get(ctx, resourceGroupName, publicIPAddressName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).Get), ctx, resourceGroupName, publicIPAddressName, expand)
}

// GetCloudServicePublicIPAddress mocks base method
func (m *MockPublicIPAddressesClientAPI) GetCloudServicePublicIPAddress(ctx context.Context, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand string) (network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudServicePublicIPAddress", ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand)
	ret0, _ := ret[0].(network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudServicePublicIPAddress indicates an expected call of GetCloudServicePublicIPAddress
func (mr *MockPublicIPAddressesClientAPIMockRecorder) GetCloudServicePublicIPAddress(ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudServicePublicIPAddress", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).GetCloudServicePublicIPAddress), ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand)
}

// GetVirtualMachineScaleSetPublicIPAddress mocks base method
func (m *MockPublicIPAddressesClientAPI) GetVirtualMachineScaleSetPublicIPAddress(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand string) (network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineScaleSetPublicIPAddress", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand)
	ret0, _ := ret[0].(network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineScaleSetPublicIPAddress indicates an expected call of GetVirtualMachineScaleSetPublicIPAddress
func (mr *MockPublicIPAddressesClientAPIMockRecorder) GetVirtualMachineScaleSetPublicIPAddress(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineScaleSetPublicIPAddress", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).GetVirtualMachineScaleSetPublicIPAddress), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName, publicIPAddressName, expand)
}

// List mocks base method
func (m *MockPublicIPAddressesClientAPI) List(ctx context.Context, resourceGroupName string) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPublicIPAddressesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockPublicIPAddressesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.PublicIPAddressListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockPublicIPAddressesClientAPI) ListAll(ctx context.Context) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockPublicIPAddressesClientAPI) ListAllComplete(ctx context.Context) (network.PublicIPAddressListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.PublicIPAddressListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListAllComplete), ctx)
}

// ListCloudServicePublicIPAddresses mocks base method
func (m *MockPublicIPAddressesClientAPI) ListCloudServicePublicIPAddresses(ctx context.Context, resourceGroupName, cloudServiceName string) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServicePublicIPAddresses", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServicePublicIPAddresses indicates an expected call of ListCloudServicePublicIPAddresses
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListCloudServicePublicIPAddresses(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServicePublicIPAddresses", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListCloudServicePublicIPAddresses), ctx, resourceGroupName, cloudServiceName)
}

// ListCloudServicePublicIPAddressesComplete mocks base method
func (m *MockPublicIPAddressesClientAPI) ListCloudServicePublicIPAddressesComplete(ctx context.Context, resourceGroupName, cloudServiceName string) (network.PublicIPAddressListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServicePublicIPAddressesComplete", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServicePublicIPAddressesComplete indicates an expected call of ListCloudServicePublicIPAddressesComplete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListCloudServicePublicIPAddressesComplete(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServicePublicIPAddressesComplete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListCloudServicePublicIPAddressesComplete), ctx, resourceGroupName, cloudServiceName)
}

// ListCloudServiceRoleInstancePublicIPAddresses mocks base method
func (m *MockPublicIPAddressesClientAPI) ListCloudServiceRoleInstancePublicIPAddresses(ctx context.Context, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName string) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServiceRoleInstancePublicIPAddresses", ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServiceRoleInstancePublicIPAddresses indicates an expected call of ListCloudServiceRoleInstancePublicIPAddresses
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListCloudServiceRoleInstancePublicIPAddresses(ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServiceRoleInstancePublicIPAddresses", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListCloudServiceRoleInstancePublicIPAddresses), ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName)
}

// ListCloudServiceRoleInstancePublicIPAddressesComplete mocks base method
func (m *MockPublicIPAddressesClientAPI) ListCloudServiceRoleInstancePublicIPAddressesComplete(ctx context.Context, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName string) (network.PublicIPAddressListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudServiceRoleInstancePublicIPAddressesComplete", ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudServiceRoleInstancePublicIPAddressesComplete indicates an expected call of ListCloudServiceRoleInstancePublicIPAddressesComplete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListCloudServiceRoleInstancePublicIPAddressesComplete(ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudServiceRoleInstancePublicIPAddressesComplete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListCloudServiceRoleInstancePublicIPAddressesComplete), ctx, resourceGroupName, cloudServiceName, roleInstanceName, networkInterfaceName, IPConfigurationName)
}

// ListVirtualMachineScaleSetPublicIPAddresses mocks base method
func (m *MockPublicIPAddressesClientAPI) ListVirtualMachineScaleSetPublicIPAddresses(ctx context.Context, resourceGroupName, virtualMachineScaleSetName string) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetPublicIPAddresses", ctx, resourceGroupName, virtualMachineScaleSetName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetPublicIPAddresses indicates an expected call of ListVirtualMachineScaleSetPublicIPAddresses
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListVirtualMachineScaleSetPublicIPAddresses(ctx, resourceGroupName, virtualMachineScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetPublicIPAddresses", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListVirtualMachineScaleSetPublicIPAddresses), ctx, resourceGroupName, virtualMachineScaleSetName)
}

// ListVirtualMachineScaleSetPublicIPAddressesComplete mocks base method
func (m *MockPublicIPAddressesClientAPI) ListVirtualMachineScaleSetPublicIPAddressesComplete(ctx context.Context, resourceGroupName, virtualMachineScaleSetName string) (network.PublicIPAddressListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetPublicIPAddressesComplete", ctx, resourceGroupName, virtualMachineScaleSetName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetPublicIPAddressesComplete indicates an expected call of ListVirtualMachineScaleSetPublicIPAddressesComplete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListVirtualMachineScaleSetPublicIPAddressesComplete(ctx, resourceGroupName, virtualMachineScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetPublicIPAddressesComplete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListVirtualMachineScaleSetPublicIPAddressesComplete), ctx, resourceGroupName, virtualMachineScaleSetName)
}

// ListVirtualMachineScaleSetVMPublicIPAddresses mocks base method
func (m *MockPublicIPAddressesClientAPI) ListVirtualMachineScaleSetVMPublicIPAddresses(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName string) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetVMPublicIPAddresses", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetVMPublicIPAddresses indicates an expected call of ListVirtualMachineScaleSetVMPublicIPAddresses
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListVirtualMachineScaleSetVMPublicIPAddresses(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetVMPublicIPAddresses", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListVirtualMachineScaleSetVMPublicIPAddresses), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName)
}

// ListVirtualMachineScaleSetVMPublicIPAddressesComplete mocks base method
func (m *MockPublicIPAddressesClientAPI) ListVirtualMachineScaleSetVMPublicIPAddressesComplete(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName string) (network.PublicIPAddressListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetVMPublicIPAddressesComplete", ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName)
	ret0, _ := ret[0].(network.PublicIPAddressListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetVMPublicIPAddressesComplete indicates an expected call of ListVirtualMachineScaleSetVMPublicIPAddressesComplete
func (mr *MockPublicIPAddressesClientAPIMockRecorder) ListVirtualMachineScaleSetVMPublicIPAddressesComplete(ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetVMPublicIPAddressesComplete", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).ListVirtualMachineScaleSetVMPublicIPAddressesComplete), ctx, resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, IPConfigurationName)
}

// UpdateTags mocks base method
func (m *MockPublicIPAddressesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, publicIPAddressName string, parameters network.TagsObject) (network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, publicIPAddressName, parameters)
	ret0, _ := ret[0].(network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockPublicIPAddressesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, publicIPAddressName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockPublicIPAddressesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, publicIPAddressName, parameters)
}

// MockPublicIPPrefixesClientAPI is a mock of PublicIPPrefixesClientAPI interface
type MockPublicIPPrefixesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPublicIPPrefixesClientAPIMockRecorder
}

// MockPublicIPPrefixesClientAPIMockRecorder is the mock recorder for MockPublicIPPrefixesClientAPI
type MockPublicIPPrefixesClientAPIMockRecorder struct {
	mock *MockPublicIPPrefixesClientAPI
}

// NewMockPublicIPPrefixesClientAPI creates a new mock instance
func NewMockPublicIPPrefixesClientAPI(ctrl *gomock.Controller) *MockPublicIPPrefixesClientAPI {
	mock := &MockPublicIPPrefixesClientAPI{ctrl: ctrl}
	mock.recorder = &MockPublicIPPrefixesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicIPPrefixesClientAPI) EXPECT() *MockPublicIPPrefixesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockPublicIPPrefixesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, publicIPPrefixName string, parameters network.PublicIPPrefix) (network.PublicIPPrefixesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, publicIPPrefixName, parameters)
	ret0, _ := ret[0].(network.PublicIPPrefixesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, publicIPPrefixName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, publicIPPrefixName, parameters)
}

// Delete mocks base method
func (m *MockPublicIPPrefixesClientAPI) Delete(ctx context.Context, resourceGroupName, publicIPPrefixName string) (network.PublicIPPrefixesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, publicIPPrefixName)
	ret0, _ := ret[0].(network.PublicIPPrefixesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) Delete(ctx, resourceGroupName, publicIPPrefixName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).Delete), ctx, resourceGroupName, publicIPPrefixName)
}

// Get mocks base method
func (m *MockPublicIPPrefixesClientAPI) Get(ctx context.Context, resourceGroupName, publicIPPrefixName, expand string) (network.PublicIPPrefix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, publicIPPrefixName, expand)
	ret0, _ := ret[0].(network.PublicIPPrefix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) Get(ctx, resourceGroupName, publicIPPrefixName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).Get), ctx, resourceGroupName, publicIPPrefixName, expand)
}

// List mocks base method
func (m *MockPublicIPPrefixesClientAPI) List(ctx context.Context, resourceGroupName string) (network.PublicIPPrefixListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PublicIPPrefixListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockPublicIPPrefixesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.PublicIPPrefixListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.PublicIPPrefixListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockPublicIPPrefixesClientAPI) ListAll(ctx context.Context) (network.PublicIPPrefixListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.PublicIPPrefixListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockPublicIPPrefixesClientAPI) ListAllComplete(ctx context.Context) (network.PublicIPPrefixListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.PublicIPPrefixListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockPublicIPPrefixesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, publicIPPrefixName string, parameters network.TagsObject) (network.PublicIPPrefix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, publicIPPrefixName, parameters)
	ret0, _ := ret[0].(network.PublicIPPrefix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockPublicIPPrefixesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, publicIPPrefixName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockPublicIPPrefixesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, publicIPPrefixName, parameters)
}

// MockRouteFiltersClientAPI is a mock of RouteFiltersClientAPI interface
type MockRouteFiltersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRouteFiltersClientAPIMockRecorder
}

// MockRouteFiltersClientAPIMockRecorder is the mock recorder for MockRouteFiltersClientAPI
type MockRouteFiltersClientAPIMockRecorder struct {
	mock *MockRouteFiltersClientAPI
}

// NewMockRouteFiltersClientAPI creates a new mock instance
func NewMockRouteFiltersClientAPI(ctrl *gomock.Controller) *MockRouteFiltersClientAPI {
	mock := &MockRouteFiltersClientAPI{ctrl: ctrl}
	mock.recorder = &MockRouteFiltersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteFiltersClientAPI) EXPECT() *MockRouteFiltersClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockRouteFiltersClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, routeFilterName string, routeFilterParameters network.RouteFilter) (network.RouteFiltersCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, routeFilterName, routeFilterParameters)
	ret0, _ := ret[0].(network.RouteFiltersCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockRouteFiltersClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, routeFilterName, routeFilterParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, routeFilterName, routeFilterParameters)
}

// Delete mocks base method
func (m *MockRouteFiltersClientAPI) Delete(ctx context.Context, resourceGroupName, routeFilterName string) (network.RouteFiltersDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, routeFilterName)
	ret0, _ := ret[0].(network.RouteFiltersDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRouteFiltersClientAPIMockRecorder) Delete(ctx, resourceGroupName, routeFilterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).Delete), ctx, resourceGroupName, routeFilterName)
}

// Get mocks base method
func (m *MockRouteFiltersClientAPI) Get(ctx context.Context, resourceGroupName, routeFilterName, expand string) (network.RouteFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, routeFilterName, expand)
	ret0, _ := ret[0].(network.RouteFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRouteFiltersClientAPIMockRecorder) Get(ctx, resourceGroupName, routeFilterName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).Get), ctx, resourceGroupName, routeFilterName, expand)
}

// List mocks base method
func (m *MockRouteFiltersClientAPI) List(ctx context.Context) (network.RouteFilterListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.RouteFilterListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRouteFiltersClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockRouteFiltersClientAPI) ListComplete(ctx context.Context) (network.RouteFilterListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.RouteFilterListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockRouteFiltersClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockRouteFiltersClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.RouteFilterListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.RouteFilterListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockRouteFiltersClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockRouteFiltersClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.RouteFilterListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.RouteFilterListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockRouteFiltersClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockRouteFiltersClientAPI) UpdateTags(ctx context.Context, resourceGroupName, routeFilterName string, parameters network.TagsObject) (network.RouteFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, routeFilterName, parameters)
	ret0, _ := ret[0].(network.RouteFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockRouteFiltersClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, routeFilterName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockRouteFiltersClientAPI)(nil).UpdateTags), ctx, resourceGroupName, routeFilterName, parameters)
}

// MockRouteFilterRulesClientAPI is a mock of RouteFilterRulesClientAPI interface
type MockRouteFilterRulesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRouteFilterRulesClientAPIMockRecorder
}

// MockRouteFilterRulesClientAPIMockRecorder is the mock recorder for MockRouteFilterRulesClientAPI
type MockRouteFilterRulesClientAPIMockRecorder struct {
	mock *MockRouteFilterRulesClientAPI
}

// NewMockRouteFilterRulesClientAPI creates a new mock instance
func NewMockRouteFilterRulesClientAPI(ctrl *gomock.Controller) *MockRouteFilterRulesClientAPI {
	mock := &MockRouteFilterRulesClientAPI{ctrl: ctrl}
	mock.recorder = &MockRouteFilterRulesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteFilterRulesClientAPI) EXPECT() *MockRouteFilterRulesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockRouteFilterRulesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, routeFilterName, ruleName string, routeFilterRuleParameters network.RouteFilterRule) (network.RouteFilterRulesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters)
	ret0, _ := ret[0].(network.RouteFilterRulesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockRouteFilterRulesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRouteFilterRulesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters)
}

// Delete mocks base method
func (m *MockRouteFilterRulesClientAPI) Delete(ctx context.Context, resourceGroupName, routeFilterName, ruleName string) (network.RouteFilterRulesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, routeFilterName, ruleName)
	ret0, _ := ret[0].(network.RouteFilterRulesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRouteFilterRulesClientAPIMockRecorder) Delete(ctx, resourceGroupName, routeFilterName, ruleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteFilterRulesClientAPI)(nil).Delete), ctx, resourceGroupName, routeFilterName, ruleName)
}

// Get mocks base method
func (m *MockRouteFilterRulesClientAPI) Get(ctx context.Context, resourceGroupName, routeFilterName, ruleName string) (network.RouteFilterRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, routeFilterName, ruleName)
	ret0, _ := ret[0].(network.RouteFilterRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRouteFilterRulesClientAPIMockRecorder) Get(ctx, resourceGroupName, routeFilterName, ruleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteFilterRulesClientAPI)(nil).Get), ctx, resourceGroupName, routeFilterName, ruleName)
}

// ListByRouteFilter mocks base method
func (m *MockRouteFilterRulesClientAPI) ListByRouteFilter(ctx context.Context, resourceGroupName, routeFilterName string) (network.RouteFilterRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRouteFilter", ctx, resourceGroupName, routeFilterName)
	ret0, _ := ret[0].(network.RouteFilterRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRouteFilter indicates an expected call of ListByRouteFilter
func (mr *MockRouteFilterRulesClientAPIMockRecorder) ListByRouteFilter(ctx, resourceGroupName, routeFilterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRouteFilter", reflect.TypeOf((*MockRouteFilterRulesClientAPI)(nil).ListByRouteFilter), ctx, resourceGroupName, routeFilterName)
}

// ListByRouteFilterComplete mocks base method
func (m *MockRouteFilterRulesClientAPI) ListByRouteFilterComplete(ctx context.Context, resourceGroupName, routeFilterName string) (network.RouteFilterRuleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRouteFilterComplete", ctx, resourceGroupName, routeFilterName)
	ret0, _ := ret[0].(network.RouteFilterRuleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRouteFilterComplete indicates an expected call of ListByRouteFilterComplete
func (mr *MockRouteFilterRulesClientAPIMockRecorder) ListByRouteFilterComplete(ctx, resourceGroupName, routeFilterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRouteFilterComplete", reflect.TypeOf((*MockRouteFilterRulesClientAPI)(nil).ListByRouteFilterComplete), ctx, resourceGroupName, routeFilterName)
}

// MockRouteTablesClientAPI is a mock of RouteTablesClientAPI interface
type MockRouteTablesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTablesClientAPIMockRecorder
}

// MockRouteTablesClientAPIMockRecorder is the mock recorder for MockRouteTablesClientAPI
type MockRouteTablesClientAPIMockRecorder struct {
	mock *MockRouteTablesClientAPI
}

// NewMockRouteTablesClientAPI creates a new mock instance
func NewMockRouteTablesClientAPI(ctrl *gomock.Controller) *MockRouteTablesClientAPI {
	mock := &MockRouteTablesClientAPI{ctrl: ctrl}
	mock.recorder = &MockRouteTablesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTablesClientAPI) EXPECT() *MockRouteTablesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockRouteTablesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, routeTableName string, parameters network.RouteTable) (network.RouteTablesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, routeTableName, parameters)
	ret0, _ := ret[0].(network.RouteTablesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockRouteTablesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, routeTableName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, routeTableName, parameters)
}

// Delete mocks base method
func (m *MockRouteTablesClientAPI) Delete(ctx context.Context, resourceGroupName, routeTableName string) (network.RouteTablesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, routeTableName)
	ret0, _ := ret[0].(network.RouteTablesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRouteTablesClientAPIMockRecorder) Delete(ctx, resourceGroupName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).Delete), ctx, resourceGroupName, routeTableName)
}

// Get mocks base method
func (m *MockRouteTablesClientAPI) Get(ctx context.Context, resourceGroupName, routeTableName, expand string) (network.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, routeTableName, expand)
	ret0, _ := ret[0].(network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRouteTablesClientAPIMockRecorder) Get(ctx, resourceGroupName, routeTableName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).Get), ctx, resourceGroupName, routeTableName, expand)
}

// List mocks base method
func (m *MockRouteTablesClientAPI) List(ctx context.Context, resourceGroupName string) (network.RouteTableListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.RouteTableListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRouteTablesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockRouteTablesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.RouteTableListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.RouteTableListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockRouteTablesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockRouteTablesClientAPI) ListAll(ctx context.Context) (network.RouteTableListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.RouteTableListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockRouteTablesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockRouteTablesClientAPI) ListAllComplete(ctx context.Context) (network.RouteTableListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.RouteTableListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockRouteTablesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).ListAllComplete), ctx)
}

// UpdateTags mocks base method
func (m *MockRouteTablesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, routeTableName string, parameters network.TagsObject) (network.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, routeTableName, parameters)
	ret0, _ := ret[0].(network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockRouteTablesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, routeTableName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockRouteTablesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, routeTableName, parameters)
}

// MockRoutesClientAPI is a mock of RoutesClientAPI interface
type MockRoutesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoutesClientAPIMockRecorder
}

// MockRoutesClientAPIMockRecorder is the mock recorder for MockRoutesClientAPI
type MockRoutesClientAPIMockRecorder struct {
	mock *MockRoutesClientAPI
}

// NewMockRoutesClientAPI creates a new mock instance
func NewMockRoutesClientAPI(ctrl *gomock.Controller) *MockRoutesClientAPI {
	mock := &MockRoutesClientAPI{ctrl: ctrl}
	mock.recorder = &MockRoutesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoutesClientAPI) EXPECT() *MockRoutesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockRoutesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, routeTableName, routeName string, routeParameters network.Route) (network.RoutesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, routeTableName, routeName, routeParameters)
	ret0, _ := ret[0].(network.RoutesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockRoutesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, routeTableName, routeName, routeParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRoutesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, routeTableName, routeName, routeParameters)
}

// Delete mocks base method
func (m *MockRoutesClientAPI) Delete(ctx context.Context, resourceGroupName, routeTableName, routeName string) (network.RoutesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, routeTableName, routeName)
	ret0, _ := ret[0].(network.RoutesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRoutesClientAPIMockRecorder) Delete(ctx, resourceGroupName, routeTableName, routeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoutesClientAPI)(nil).Delete), ctx, resourceGroupName, routeTableName, routeName)
}

// Get mocks base method
func (m *MockRoutesClientAPI) Get(ctx context.Context, resourceGroupName, routeTableName, routeName string) (network.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, routeTableName, routeName)
	ret0, _ := ret[0].(network.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRoutesClientAPIMockRecorder) Get(ctx, resourceGroupName, routeTableName, routeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoutesClientAPI)(nil).Get), ctx, resourceGroupName, routeTableName, routeName)
}

// List mocks base method
func (m *MockRoutesClientAPI) List(ctx context.Context, resourceGroupName, routeTableName string) (network.RouteListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, routeTableName)
	ret0, _ := ret[0].(network.RouteListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRoutesClientAPIMockRecorder) List(ctx, resourceGroupName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoutesClientAPI)(nil).List), ctx, resourceGroupName, routeTableName)
}

// ListComplete mocks base method
func (m *MockRoutesClientAPI) ListComplete(ctx context.Context, resourceGroupName, routeTableName string) (network.RouteListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, routeTableName)
	ret0, _ := ret[0].(network.RouteListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockRoutesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockRoutesClientAPI)(nil).ListComplete), ctx, resourceGroupName, routeTableName)
}

// MockSecurityPartnerProvidersClientAPI is a mock of SecurityPartnerProvidersClientAPI interface
type MockSecurityPartnerProvidersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityPartnerProvidersClientAPIMockRecorder
}

// MockSecurityPartnerProvidersClientAPIMockRecorder is the mock recorder for MockSecurityPartnerProvidersClientAPI
type MockSecurityPartnerProvidersClientAPIMockRecorder struct {
	mock *MockSecurityPartnerProvidersClientAPI
}

// NewMockSecurityPartnerProvidersClientAPI creates a new mock instance
func NewMockSecurityPartnerProvidersClientAPI(ctrl *gomock.Controller) *MockSecurityPartnerProvidersClientAPI {
	mock := &MockSecurityPartnerProvidersClientAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityPartnerProvidersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityPartnerProvidersClientAPI) EXPECT() *MockSecurityPartnerProvidersClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, securityPartnerProviderName string, parameters network.SecurityPartnerProvider) (network.SecurityPartnerProvidersCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, securityPartnerProviderName, parameters)
	ret0, _ := ret[0].(network.SecurityPartnerProvidersCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, securityPartnerProviderName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, securityPartnerProviderName, parameters)
}

// Delete mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) Delete(ctx context.Context, resourceGroupName, securityPartnerProviderName string) (network.SecurityPartnerProvidersDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, securityPartnerProviderName)
	ret0, _ := ret[0].(network.SecurityPartnerProvidersDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) Delete(ctx, resourceGroupName, securityPartnerProviderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).Delete), ctx, resourceGroupName, securityPartnerProviderName)
}

// Get mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) Get(ctx context.Context, resourceGroupName, securityPartnerProviderName string) (network.SecurityPartnerProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, securityPartnerProviderName)
	ret0, _ := ret[0].(network.SecurityPartnerProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) Get(ctx, resourceGroupName, securityPartnerProviderName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).Get), ctx, resourceGroupName, securityPartnerProviderName)
}

// List mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) List(ctx context.Context) (network.SecurityPartnerProviderListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.SecurityPartnerProviderListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) ListComplete(ctx context.Context) (network.SecurityPartnerProviderListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.SecurityPartnerProviderListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.SecurityPartnerProviderListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.SecurityPartnerProviderListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.SecurityPartnerProviderListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.SecurityPartnerProviderListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockSecurityPartnerProvidersClientAPI) UpdateTags(ctx context.Context, resourceGroupName, securityPartnerProviderName string, parameters network.TagsObject) (network.SecurityPartnerProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, securityPartnerProviderName, parameters)
	ret0, _ := ret[0].(network.SecurityPartnerProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockSecurityPartnerProvidersClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, securityPartnerProviderName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockSecurityPartnerProvidersClientAPI)(nil).UpdateTags), ctx, resourceGroupName, securityPartnerProviderName, parameters)
}

// MockBgpServiceCommunitiesClientAPI is a mock of BgpServiceCommunitiesClientAPI interface
type MockBgpServiceCommunitiesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBgpServiceCommunitiesClientAPIMockRecorder
}

// MockBgpServiceCommunitiesClientAPIMockRecorder is the mock recorder for MockBgpServiceCommunitiesClientAPI
type MockBgpServiceCommunitiesClientAPIMockRecorder struct {
	mock *MockBgpServiceCommunitiesClientAPI
}

// NewMockBgpServiceCommunitiesClientAPI creates a new mock instance
func NewMockBgpServiceCommunitiesClientAPI(ctrl *gomock.Controller) *MockBgpServiceCommunitiesClientAPI {
	mock := &MockBgpServiceCommunitiesClientAPI{ctrl: ctrl}
	mock.recorder = &MockBgpServiceCommunitiesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBgpServiceCommunitiesClientAPI) EXPECT() *MockBgpServiceCommunitiesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockBgpServiceCommunitiesClientAPI) List(ctx context.Context) (network.BgpServiceCommunityListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.BgpServiceCommunityListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBgpServiceCommunitiesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBgpServiceCommunitiesClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockBgpServiceCommunitiesClientAPI) ListComplete(ctx context.Context) (network.BgpServiceCommunityListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.BgpServiceCommunityListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockBgpServiceCommunitiesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockBgpServiceCommunitiesClientAPI)(nil).ListComplete), ctx)
}

// MockServiceEndpointPoliciesClientAPI is a mock of ServiceEndpointPoliciesClientAPI interface
type MockServiceEndpointPoliciesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEndpointPoliciesClientAPIMockRecorder
}

// MockServiceEndpointPoliciesClientAPIMockRecorder is the mock recorder for MockServiceEndpointPoliciesClientAPI
type MockServiceEndpointPoliciesClientAPIMockRecorder struct {
	mock *MockServiceEndpointPoliciesClientAPI
}

// NewMockServiceEndpointPoliciesClientAPI creates a new mock instance
func NewMockServiceEndpointPoliciesClientAPI(ctrl *gomock.Controller) *MockServiceEndpointPoliciesClientAPI {
	mock := &MockServiceEndpointPoliciesClientAPI{ctrl: ctrl}
	mock.recorder = &MockServiceEndpointPoliciesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceEndpointPoliciesClientAPI) EXPECT() *MockServiceEndpointPoliciesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, serviceEndpointPolicyName string, parameters network.ServiceEndpointPolicy) (network.ServiceEndpointPoliciesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, serviceEndpointPolicyName, parameters)
	ret0, _ := ret[0].(network.ServiceEndpointPoliciesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, serviceEndpointPolicyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, serviceEndpointPolicyName, parameters)
}

// Delete mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) Delete(ctx context.Context, resourceGroupName, serviceEndpointPolicyName string) (network.ServiceEndpointPoliciesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, serviceEndpointPolicyName)
	ret0, _ := ret[0].(network.ServiceEndpointPoliciesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) Delete(ctx, resourceGroupName, serviceEndpointPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).Delete), ctx, resourceGroupName, serviceEndpointPolicyName)
}

// Get mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) Get(ctx context.Context, resourceGroupName, serviceEndpointPolicyName, expand string) (network.ServiceEndpointPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, serviceEndpointPolicyName, expand)
	ret0, _ := ret[0].(network.ServiceEndpointPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) Get(ctx, resourceGroupName, serviceEndpointPolicyName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).Get), ctx, resourceGroupName, serviceEndpointPolicyName, expand)
}

// List mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) List(ctx context.Context) (network.ServiceEndpointPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) ListComplete(ctx context.Context) (network.ServiceEndpointPolicyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ServiceEndpointPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ServiceEndpointPolicyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockServiceEndpointPoliciesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, serviceEndpointPolicyName string, parameters network.TagsObject) (network.ServiceEndpointPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, serviceEndpointPolicyName, parameters)
	ret0, _ := ret[0].(network.ServiceEndpointPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockServiceEndpointPoliciesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, serviceEndpointPolicyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockServiceEndpointPoliciesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, serviceEndpointPolicyName, parameters)
}

// MockServiceEndpointPolicyDefinitionsClientAPI is a mock of ServiceEndpointPolicyDefinitionsClientAPI interface
type MockServiceEndpointPolicyDefinitionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder
}

// MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder is the mock recorder for MockServiceEndpointPolicyDefinitionsClientAPI
type MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder struct {
	mock *MockServiceEndpointPolicyDefinitionsClientAPI
}

// NewMockServiceEndpointPolicyDefinitionsClientAPI creates a new mock instance
func NewMockServiceEndpointPolicyDefinitionsClientAPI(ctrl *gomock.Controller) *MockServiceEndpointPolicyDefinitionsClientAPI {
	mock := &MockServiceEndpointPolicyDefinitionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceEndpointPolicyDefinitionsClientAPI) EXPECT() *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockServiceEndpointPolicyDefinitionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName string, serviceEndpointPolicyDefinitions network.ServiceEndpointPolicyDefinition) (network.ServiceEndpointPolicyDefinitionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, serviceEndpointPolicyDefinitions)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyDefinitionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, serviceEndpointPolicyDefinitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockServiceEndpointPolicyDefinitionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, serviceEndpointPolicyDefinitions)
}

// Delete mocks base method
func (m *MockServiceEndpointPolicyDefinitionsClientAPI) Delete(ctx context.Context, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName string) (network.ServiceEndpointPolicyDefinitionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyDefinitionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceEndpointPolicyDefinitionsClientAPI)(nil).Delete), ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName)
}

// Get mocks base method
func (m *MockServiceEndpointPolicyDefinitionsClientAPI) Get(ctx context.Context, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName string) (network.ServiceEndpointPolicyDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder) Get(ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceEndpointPolicyDefinitionsClientAPI)(nil).Get), ctx, resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName)
}

// ListByResourceGroup mocks base method
func (m *MockServiceEndpointPolicyDefinitionsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName, serviceEndpointPolicyName string) (network.ServiceEndpointPolicyDefinitionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName, serviceEndpointPolicyName)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyDefinitionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName, serviceEndpointPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockServiceEndpointPolicyDefinitionsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName, serviceEndpointPolicyName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockServiceEndpointPolicyDefinitionsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName, serviceEndpointPolicyName string) (network.ServiceEndpointPolicyDefinitionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName, serviceEndpointPolicyName)
	ret0, _ := ret[0].(network.ServiceEndpointPolicyDefinitionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockServiceEndpointPolicyDefinitionsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName, serviceEndpointPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockServiceEndpointPolicyDefinitionsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName, serviceEndpointPolicyName)
}

// MockServiceTagsClientAPI is a mock of ServiceTagsClientAPI interface
type MockServiceTagsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceTagsClientAPIMockRecorder
}

// MockServiceTagsClientAPIMockRecorder is the mock recorder for MockServiceTagsClientAPI
type MockServiceTagsClientAPIMockRecorder struct {
	mock *MockServiceTagsClientAPI
}

// NewMockServiceTagsClientAPI creates a new mock instance
func NewMockServiceTagsClientAPI(ctrl *gomock.Controller) *MockServiceTagsClientAPI {
	mock := &MockServiceTagsClientAPI{ctrl: ctrl}
	mock.recorder = &MockServiceTagsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceTagsClientAPI) EXPECT() *MockServiceTagsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockServiceTagsClientAPI) List(ctx context.Context, location string) (network.ServiceTagsListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(network.ServiceTagsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServiceTagsClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceTagsClientAPI)(nil).List), ctx, location)
}

// MockUsagesClientAPI is a mock of UsagesClientAPI interface
type MockUsagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUsagesClientAPIMockRecorder
}

// MockUsagesClientAPIMockRecorder is the mock recorder for MockUsagesClientAPI
type MockUsagesClientAPIMockRecorder struct {
	mock *MockUsagesClientAPI
}

// NewMockUsagesClientAPI creates a new mock instance
func NewMockUsagesClientAPI(ctrl *gomock.Controller) *MockUsagesClientAPI {
	mock := &MockUsagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockUsagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsagesClientAPI) EXPECT() *MockUsagesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockUsagesClientAPI) List(ctx context.Context, location string) (network.UsagesListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(network.UsagesListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockUsagesClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsagesClientAPI)(nil).List), ctx, location)
}

// ListComplete mocks base method
func (m *MockUsagesClientAPI) ListComplete(ctx context.Context, location string) (network.UsagesListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(network.UsagesListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockUsagesClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockUsagesClientAPI)(nil).ListComplete), ctx, location)
}

// MockVirtualNetworksClientAPI is a mock of VirtualNetworksClientAPI interface
type MockVirtualNetworksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworksClientAPIMockRecorder
}

// MockVirtualNetworksClientAPIMockRecorder is the mock recorder for MockVirtualNetworksClientAPI
type MockVirtualNetworksClientAPIMockRecorder struct {
	mock *MockVirtualNetworksClientAPI
}

// NewMockVirtualNetworksClientAPI creates a new mock instance
func NewMockVirtualNetworksClientAPI(ctrl *gomock.Controller) *MockVirtualNetworksClientAPI {
	mock := &MockVirtualNetworksClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworksClientAPI) EXPECT() *MockVirtualNetworksClientAPIMockRecorder {
	return m.recorder
}

// CheckIPAddressAvailability mocks base method
func (m *MockVirtualNetworksClientAPI) CheckIPAddressAvailability(ctx context.Context, resourceGroupName, virtualNetworkName, IPAddress string) (network.IPAddressAvailabilityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIPAddressAvailability", ctx, resourceGroupName, virtualNetworkName, IPAddress)
	ret0, _ := ret[0].(network.IPAddressAvailabilityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIPAddressAvailability indicates an expected call of CheckIPAddressAvailability
func (mr *MockVirtualNetworksClientAPIMockRecorder) CheckIPAddressAvailability(ctx, resourceGroupName, virtualNetworkName, IPAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIPAddressAvailability", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).CheckIPAddressAvailability), ctx, resourceGroupName, virtualNetworkName, IPAddress)
}

// CreateOrUpdate mocks base method
func (m *MockVirtualNetworksClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualNetworkName string, parameters network.VirtualNetwork) (network.VirtualNetworksCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualNetworkName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworksCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualNetworksClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualNetworkName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualNetworkName, parameters)
}

// Delete mocks base method
func (m *MockVirtualNetworksClientAPI) Delete(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.VirtualNetworksDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.VirtualNetworksDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworksClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).Delete), ctx, resourceGroupName, virtualNetworkName)
}

// Get mocks base method
func (m *MockVirtualNetworksClientAPI) Get(ctx context.Context, resourceGroupName, virtualNetworkName, expand string) (network.VirtualNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkName, expand)
	ret0, _ := ret[0].(network.VirtualNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualNetworksClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualNetworkName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).Get), ctx, resourceGroupName, virtualNetworkName, expand)
}

// List mocks base method
func (m *MockVirtualNetworksClientAPI) List(ctx context.Context, resourceGroupName string) (network.VirtualNetworkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualNetworksClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockVirtualNetworksClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.VirtualNetworkListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockVirtualNetworksClientAPI) ListAll(ctx context.Context) (network.VirtualNetworkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.VirtualNetworkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockVirtualNetworksClientAPI) ListAllComplete(ctx context.Context) (network.VirtualNetworkListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.VirtualNetworkListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListAllComplete), ctx)
}

// ListUsage mocks base method
func (m *MockVirtualNetworksClientAPI) ListUsage(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.VirtualNetworkListUsageResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsage", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.VirtualNetworkListUsageResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsage indicates an expected call of ListUsage
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListUsage(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsage", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListUsage), ctx, resourceGroupName, virtualNetworkName)
}

// ListUsageComplete mocks base method
func (m *MockVirtualNetworksClientAPI) ListUsageComplete(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.VirtualNetworkListUsageResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageComplete", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.VirtualNetworkListUsageResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageComplete indicates an expected call of ListUsageComplete
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListUsageComplete(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageComplete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListUsageComplete), ctx, resourceGroupName, virtualNetworkName)
}

// UpdateTags mocks base method
func (m *MockVirtualNetworksClientAPI) UpdateTags(ctx context.Context, resourceGroupName, virtualNetworkName string, parameters network.TagsObject) (network.VirtualNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, virtualNetworkName, parameters)
	ret0, _ := ret[0].(network.VirtualNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualNetworksClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, virtualNetworkName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).UpdateTags), ctx, resourceGroupName, virtualNetworkName, parameters)
}

// MockSubnetsClientAPI is a mock of SubnetsClientAPI interface
type MockSubnetsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetsClientAPIMockRecorder
}

// MockSubnetsClientAPIMockRecorder is the mock recorder for MockSubnetsClientAPI
type MockSubnetsClientAPIMockRecorder struct {
	mock *MockSubnetsClientAPI
}

// NewMockSubnetsClientAPI creates a new mock instance
func NewMockSubnetsClientAPI(ctrl *gomock.Controller) *MockSubnetsClientAPI {
	mock := &MockSubnetsClientAPI{ctrl: ctrl}
	mock.recorder = &MockSubnetsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubnetsClientAPI) EXPECT() *MockSubnetsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSubnetsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, subnetParameters network.Subnet) (network.SubnetsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualNetworkName, subnetName, subnetParameters)
	ret0, _ := ret[0].(network.SubnetsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSubnetsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualNetworkName, subnetName, subnetParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSubnetsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualNetworkName, subnetName, subnetParameters)
}

// Delete mocks base method
func (m *MockSubnetsClientAPI) Delete(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string) (network.SubnetsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualNetworkName, subnetName)
	ret0, _ := ret[0].(network.SubnetsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSubnetsClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualNetworkName, subnetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubnetsClientAPI)(nil).Delete), ctx, resourceGroupName, virtualNetworkName, subnetName)
}

// Get mocks base method
func (m *MockSubnetsClientAPI) Get(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName, expand string) (network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkName, subnetName, expand)
	ret0, _ := ret[0].(network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSubnetsClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualNetworkName, subnetName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubnetsClientAPI)(nil).Get), ctx, resourceGroupName, virtualNetworkName, subnetName, expand)
}

// List mocks base method
func (m *MockSubnetsClientAPI) List(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.SubnetListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.SubnetListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSubnetsClientAPIMockRecorder) List(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubnetsClientAPI)(nil).List), ctx, resourceGroupName, virtualNetworkName)
}

// ListComplete mocks base method
func (m *MockSubnetsClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.SubnetListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.SubnetListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockSubnetsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSubnetsClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualNetworkName)
}

// PrepareNetworkPolicies mocks base method
func (m *MockSubnetsClientAPI) PrepareNetworkPolicies(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, prepareNetworkPoliciesRequestParameters network.PrepareNetworkPoliciesRequest) (network.SubnetsPrepareNetworkPoliciesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNetworkPolicies", ctx, resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters)
	ret0, _ := ret[0].(network.SubnetsPrepareNetworkPoliciesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNetworkPolicies indicates an expected call of PrepareNetworkPolicies
func (mr *MockSubnetsClientAPIMockRecorder) PrepareNetworkPolicies(ctx, resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNetworkPolicies", reflect.TypeOf((*MockSubnetsClientAPI)(nil).PrepareNetworkPolicies), ctx, resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters)
}

// UnprepareNetworkPolicies mocks base method
func (m *MockSubnetsClientAPI) UnprepareNetworkPolicies(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, unprepareNetworkPoliciesRequestParameters network.UnprepareNetworkPoliciesRequest) (network.SubnetsUnprepareNetworkPoliciesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnprepareNetworkPolicies", ctx, resourceGroupName, virtualNetworkName, subnetName, unprepareNetworkPoliciesRequestParameters)
	ret0, _ := ret[0].(network.SubnetsUnprepareNetworkPoliciesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprepareNetworkPolicies indicates an expected call of UnprepareNetworkPolicies
func (mr *MockSubnetsClientAPIMockRecorder) UnprepareNetworkPolicies(ctx, resourceGroupName, virtualNetworkName, subnetName, unprepareNetworkPoliciesRequestParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprepareNetworkPolicies", reflect.TypeOf((*MockSubnetsClientAPI)(nil).UnprepareNetworkPolicies), ctx, resourceGroupName, virtualNetworkName, subnetName, unprepareNetworkPoliciesRequestParameters)
}

// MockResourceNavigationLinksClientAPI is a mock of ResourceNavigationLinksClientAPI interface
type MockResourceNavigationLinksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockResourceNavigationLinksClientAPIMockRecorder
}

// MockResourceNavigationLinksClientAPIMockRecorder is the mock recorder for MockResourceNavigationLinksClientAPI
type MockResourceNavigationLinksClientAPIMockRecorder struct {
	mock *MockResourceNavigationLinksClientAPI
}

// NewMockResourceNavigationLinksClientAPI creates a new mock instance
func NewMockResourceNavigationLinksClientAPI(ctrl *gomock.Controller) *MockResourceNavigationLinksClientAPI {
	mock := &MockResourceNavigationLinksClientAPI{ctrl: ctrl}
	mock.recorder = &MockResourceNavigationLinksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceNavigationLinksClientAPI) EXPECT() *MockResourceNavigationLinksClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockResourceNavigationLinksClientAPI) List(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string) (network.ResourceNavigationLinksListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualNetworkName, subnetName)
	ret0, _ := ret[0].(network.ResourceNavigationLinksListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockResourceNavigationLinksClientAPIMockRecorder) List(ctx, resourceGroupName, virtualNetworkName, subnetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceNavigationLinksClientAPI)(nil).List), ctx, resourceGroupName, virtualNetworkName, subnetName)
}

// MockServiceAssociationLinksClientAPI is a mock of ServiceAssociationLinksClientAPI interface
type MockServiceAssociationLinksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAssociationLinksClientAPIMockRecorder
}

// MockServiceAssociationLinksClientAPIMockRecorder is the mock recorder for MockServiceAssociationLinksClientAPI
type MockServiceAssociationLinksClientAPIMockRecorder struct {
	mock *MockServiceAssociationLinksClientAPI
}

// NewMockServiceAssociationLinksClientAPI creates a new mock instance
func NewMockServiceAssociationLinksClientAPI(ctrl *gomock.Controller) *MockServiceAssociationLinksClientAPI {
	mock := &MockServiceAssociationLinksClientAPI{ctrl: ctrl}
	mock.recorder = &MockServiceAssociationLinksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAssociationLinksClientAPI) EXPECT() *MockServiceAssociationLinksClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockServiceAssociationLinksClientAPI) List(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string) (network.ServiceAssociationLinksListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualNetworkName, subnetName)
	ret0, _ := ret[0].(network.ServiceAssociationLinksListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServiceAssociationLinksClientAPIMockRecorder) List(ctx, resourceGroupName, virtualNetworkName, subnetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceAssociationLinksClientAPI)(nil).List), ctx, resourceGroupName, virtualNetworkName, subnetName)
}

// MockVirtualNetworkPeeringsClientAPI is a mock of VirtualNetworkPeeringsClientAPI interface
type MockVirtualNetworkPeeringsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworkPeeringsClientAPIMockRecorder
}

// MockVirtualNetworkPeeringsClientAPIMockRecorder is the mock recorder for MockVirtualNetworkPeeringsClientAPI
type MockVirtualNetworkPeeringsClientAPIMockRecorder struct {
	mock *MockVirtualNetworkPeeringsClientAPI
}

// NewMockVirtualNetworkPeeringsClientAPI creates a new mock instance
func NewMockVirtualNetworkPeeringsClientAPI(ctrl *gomock.Controller) *MockVirtualNetworkPeeringsClientAPI {
	mock := &MockVirtualNetworkPeeringsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworkPeeringsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworkPeeringsClientAPI) EXPECT() *MockVirtualNetworkPeeringsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualNetworkPeeringsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName string, virtualNetworkPeeringParameters network.VirtualNetworkPeering) (network.VirtualNetworkPeeringsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters)
	ret0, _ := ret[0].(network.VirtualNetworkPeeringsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualNetworkPeeringsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworkPeeringsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters)
}

// Delete mocks base method
func (m *MockVirtualNetworkPeeringsClientAPI) Delete(ctx context.Context, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName string) (network.VirtualNetworkPeeringsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName)
	ret0, _ := ret[0].(network.VirtualNetworkPeeringsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworkPeeringsClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworkPeeringsClientAPI)(nil).Delete), ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName)
}

// Get mocks base method
func (m *MockVirtualNetworkPeeringsClientAPI) Get(ctx context.Context, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName string) (network.VirtualNetworkPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName)
	ret0, _ := ret[0].(network.VirtualNetworkPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualNetworkPeeringsClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworkPeeringsClientAPI)(nil).Get), ctx, resourceGroupName, virtualNetworkName, virtualNetworkPeeringName)
}

// List mocks base method
func (m *MockVirtualNetworkPeeringsClientAPI) List(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.VirtualNetworkPeeringListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.VirtualNetworkPeeringListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualNetworkPeeringsClientAPIMockRecorder) List(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworkPeeringsClientAPI)(nil).List), ctx, resourceGroupName, virtualNetworkName)
}

// ListComplete mocks base method
func (m *MockVirtualNetworkPeeringsClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualNetworkName string) (network.VirtualNetworkPeeringListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualNetworkName)
	ret0, _ := ret[0].(network.VirtualNetworkPeeringListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualNetworkPeeringsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualNetworkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualNetworkPeeringsClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualNetworkName)
}

// MockVirtualNetworkGatewaysClientAPI is a mock of VirtualNetworkGatewaysClientAPI interface
type MockVirtualNetworkGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworkGatewaysClientAPIMockRecorder
}

// MockVirtualNetworkGatewaysClientAPIMockRecorder is the mock recorder for MockVirtualNetworkGatewaysClientAPI
type MockVirtualNetworkGatewaysClientAPIMockRecorder struct {
	mock *MockVirtualNetworkGatewaysClientAPI
}

// NewMockVirtualNetworkGatewaysClientAPI creates a new mock instance
func NewMockVirtualNetworkGatewaysClientAPI(ctrl *gomock.Controller) *MockVirtualNetworkGatewaysClientAPI {
	mock := &MockVirtualNetworkGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworkGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworkGatewaysClientAPI) EXPECT() *MockVirtualNetworkGatewaysClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, parameters network.VirtualNetworkGateway) (network.VirtualNetworkGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
}

// Delete mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// DisconnectVirtualNetworkGatewayVpnConnections mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) DisconnectVirtualNetworkGatewayVpnConnections(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, request network.P2SVpnConnectionRequest) (network.VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectVirtualNetworkGatewayVpnConnections", ctx, resourceGroupName, virtualNetworkGatewayName, request)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectVirtualNetworkGatewayVpnConnections indicates an expected call of DisconnectVirtualNetworkGatewayVpnConnections
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) DisconnectVirtualNetworkGatewayVpnConnections(ctx, resourceGroupName, virtualNetworkGatewayName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectVirtualNetworkGatewayVpnConnections", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).DisconnectVirtualNetworkGatewayVpnConnections), ctx, resourceGroupName, virtualNetworkGatewayName, request)
}

// Generatevpnclientpackage mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) Generatevpnclientpackage(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, parameters network.VpnClientParameters) (network.VirtualNetworkGatewaysGeneratevpnclientpackageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generatevpnclientpackage", ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGeneratevpnclientpackageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generatevpnclientpackage indicates an expected call of Generatevpnclientpackage
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) Generatevpnclientpackage(ctx, resourceGroupName, virtualNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generatevpnclientpackage", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).Generatevpnclientpackage), ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
}

// GenerateVpnProfile mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GenerateVpnProfile(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, parameters network.VpnClientParameters) (network.VirtualNetworkGatewaysGenerateVpnProfileFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVpnProfile", ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGenerateVpnProfileFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVpnProfile indicates an expected call of GenerateVpnProfile
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GenerateVpnProfile(ctx, resourceGroupName, virtualNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVpnProfile", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GenerateVpnProfile), ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
}

// Get mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// GetAdvertisedRoutes mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GetAdvertisedRoutes(ctx context.Context, resourceGroupName, virtualNetworkGatewayName, peer string) (network.VirtualNetworkGatewaysGetAdvertisedRoutesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertisedRoutes", ctx, resourceGroupName, virtualNetworkGatewayName, peer)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGetAdvertisedRoutesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertisedRoutes indicates an expected call of GetAdvertisedRoutes
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GetAdvertisedRoutes(ctx, resourceGroupName, virtualNetworkGatewayName, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertisedRoutes", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GetAdvertisedRoutes), ctx, resourceGroupName, virtualNetworkGatewayName, peer)
}

// GetBgpPeerStatus mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GetBgpPeerStatus(ctx context.Context, resourceGroupName, virtualNetworkGatewayName, peer string) (network.VirtualNetworkGatewaysGetBgpPeerStatusFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBgpPeerStatus", ctx, resourceGroupName, virtualNetworkGatewayName, peer)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGetBgpPeerStatusFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBgpPeerStatus indicates an expected call of GetBgpPeerStatus
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GetBgpPeerStatus(ctx, resourceGroupName, virtualNetworkGatewayName, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBgpPeerStatus", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GetBgpPeerStatus), ctx, resourceGroupName, virtualNetworkGatewayName, peer)
}

// GetLearnedRoutes mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GetLearnedRoutes(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewaysGetLearnedRoutesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearnedRoutes", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGetLearnedRoutesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearnedRoutes indicates an expected call of GetLearnedRoutes
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GetLearnedRoutes(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearnedRoutes", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GetLearnedRoutes), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// GetVpnclientConnectionHealth mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GetVpnclientConnectionHealth(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewaysGetVpnclientConnectionHealthFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpnclientConnectionHealth", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGetVpnclientConnectionHealthFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpnclientConnectionHealth indicates an expected call of GetVpnclientConnectionHealth
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GetVpnclientConnectionHealth(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnclientConnectionHealth", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GetVpnclientConnectionHealth), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// GetVpnclientIpsecParameters mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GetVpnclientIpsecParameters(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewaysGetVpnclientIpsecParametersFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpnclientIpsecParameters", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGetVpnclientIpsecParametersFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpnclientIpsecParameters indicates an expected call of GetVpnclientIpsecParameters
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GetVpnclientIpsecParameters(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnclientIpsecParameters", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GetVpnclientIpsecParameters), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// GetVpnProfilePackageURL mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) GetVpnProfilePackageURL(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewaysGetVpnProfilePackageURLFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpnProfilePackageURL", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysGetVpnProfilePackageURLFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpnProfilePackageURL indicates an expected call of GetVpnProfilePackageURL
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) GetVpnProfilePackageURL(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnProfilePackageURL", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).GetVpnProfilePackageURL), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// List mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) List(ctx context.Context, resourceGroupName string) (network.VirtualNetworkGatewayListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.VirtualNetworkGatewayListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListConnections mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) ListConnections(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewayListConnectionsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnections", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayListConnectionsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) ListConnections(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).ListConnections), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// ListConnectionsComplete mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) ListConnectionsComplete(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewayListConnectionsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsComplete", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayListConnectionsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionsComplete indicates an expected call of ListConnectionsComplete
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) ListConnectionsComplete(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsComplete", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).ListConnectionsComplete), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// Reset mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) Reset(ctx context.Context, resourceGroupName, virtualNetworkGatewayName, gatewayVip string) (network.VirtualNetworkGatewaysResetFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, resourceGroupName, virtualNetworkGatewayName, gatewayVip)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysResetFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) Reset(ctx, resourceGroupName, virtualNetworkGatewayName, gatewayVip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).Reset), ctx, resourceGroupName, virtualNetworkGatewayName, gatewayVip)
}

// ResetVpnClientSharedKey mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) ResetVpnClientSharedKey(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.VirtualNetworkGatewaysResetVpnClientSharedKeyFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetVpnClientSharedKey", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysResetVpnClientSharedKeyFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetVpnClientSharedKey indicates an expected call of ResetVpnClientSharedKey
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) ResetVpnClientSharedKey(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVpnClientSharedKey", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).ResetVpnClientSharedKey), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// SetVpnclientIpsecParameters mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) SetVpnclientIpsecParameters(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, vpnclientIpsecParams network.VpnClientIPsecParameters) (network.VirtualNetworkGatewaysSetVpnclientIpsecParametersFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVpnclientIpsecParameters", ctx, resourceGroupName, virtualNetworkGatewayName, vpnclientIpsecParams)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysSetVpnclientIpsecParametersFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVpnclientIpsecParameters indicates an expected call of SetVpnclientIpsecParameters
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) SetVpnclientIpsecParameters(ctx, resourceGroupName, virtualNetworkGatewayName, vpnclientIpsecParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVpnclientIpsecParameters", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).SetVpnclientIpsecParameters), ctx, resourceGroupName, virtualNetworkGatewayName, vpnclientIpsecParams)
}

// StartPacketCapture mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) StartPacketCapture(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, parameters *network.VpnPacketCaptureStartParameters) (network.VirtualNetworkGatewaysStartPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPacketCapture", ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysStartPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPacketCapture indicates an expected call of StartPacketCapture
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) StartPacketCapture(ctx, resourceGroupName, virtualNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPacketCapture", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).StartPacketCapture), ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
}

// StopPacketCapture mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) StopPacketCapture(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, parameters network.VpnPacketCaptureStopParameters) (network.VirtualNetworkGatewaysStopPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPacketCapture", ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysStopPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPacketCapture indicates an expected call of StopPacketCapture
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) StopPacketCapture(ctx, resourceGroupName, virtualNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPacketCapture", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).StopPacketCapture), ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
}

// SupportedVpnDevices mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) SupportedVpnDevices(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string) (network.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedVpnDevices", ctx, resourceGroupName, virtualNetworkGatewayName)
	ret0, _ := ret[0].(network.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedVpnDevices indicates an expected call of SupportedVpnDevices
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) SupportedVpnDevices(ctx, resourceGroupName, virtualNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedVpnDevices", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).SupportedVpnDevices), ctx, resourceGroupName, virtualNetworkGatewayName)
}

// UpdateTags mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) UpdateTags(ctx context.Context, resourceGroupName, virtualNetworkGatewayName string, parameters network.TagsObject) (network.VirtualNetworkGatewaysUpdateTagsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewaysUpdateTagsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, virtualNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).UpdateTags), ctx, resourceGroupName, virtualNetworkGatewayName, parameters)
}

// VpnDeviceConfigurationScript mocks base method
func (m *MockVirtualNetworkGatewaysClientAPI) VpnDeviceConfigurationScript(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters network.VpnDeviceScriptParameters) (network.String, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VpnDeviceConfigurationScript", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.String)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VpnDeviceConfigurationScript indicates an expected call of VpnDeviceConfigurationScript
func (mr *MockVirtualNetworkGatewaysClientAPIMockRecorder) VpnDeviceConfigurationScript(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VpnDeviceConfigurationScript", reflect.TypeOf((*MockVirtualNetworkGatewaysClientAPI)(nil).VpnDeviceConfigurationScript), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// MockVirtualNetworkGatewayConnectionsClientAPI is a mock of VirtualNetworkGatewayConnectionsClientAPI interface
type MockVirtualNetworkGatewayConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder
}

// MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder is the mock recorder for MockVirtualNetworkGatewayConnectionsClientAPI
type MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder struct {
	mock *MockVirtualNetworkGatewayConnectionsClientAPI
}

// NewMockVirtualNetworkGatewayConnectionsClientAPI creates a new mock instance
func NewMockVirtualNetworkGatewayConnectionsClientAPI(ctrl *gomock.Controller) *MockVirtualNetworkGatewayConnectionsClientAPI {
	mock := &MockVirtualNetworkGatewayConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) EXPECT() *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters network.VirtualNetworkGatewayConnection) (network.VirtualNetworkGatewayConnectionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// Delete mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) Delete(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string) (network.VirtualNetworkGatewayConnectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualNetworkGatewayConnectionName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualNetworkGatewayConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).Delete), ctx, resourceGroupName, virtualNetworkGatewayConnectionName)
}

// Get mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string) (network.VirtualNetworkGatewayConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkGatewayConnectionName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualNetworkGatewayConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, virtualNetworkGatewayConnectionName)
}

// GetSharedKey mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) GetSharedKey(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string) (network.ConnectionSharedKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedKey", ctx, resourceGroupName, virtualNetworkGatewayConnectionName)
	ret0, _ := ret[0].(network.ConnectionSharedKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharedKey indicates an expected call of GetSharedKey
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) GetSharedKey(ctx, resourceGroupName, virtualNetworkGatewayConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedKey", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).GetSharedKey), ctx, resourceGroupName, virtualNetworkGatewayConnectionName)
}

// List mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) List(ctx context.Context, resourceGroupName string) (network.VirtualNetworkGatewayConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.VirtualNetworkGatewayConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ResetSharedKey mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) ResetSharedKey(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters network.ConnectionResetSharedKey) (network.VirtualNetworkGatewayConnectionsResetSharedKeyFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSharedKey", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsResetSharedKeyFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSharedKey indicates an expected call of ResetSharedKey
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) ResetSharedKey(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSharedKey", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).ResetSharedKey), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// SetSharedKey mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) SetSharedKey(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters network.ConnectionSharedKey) (network.VirtualNetworkGatewayConnectionsSetSharedKeyFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSharedKey", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsSetSharedKeyFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSharedKey indicates an expected call of SetSharedKey
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) SetSharedKey(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSharedKey", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).SetSharedKey), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// StartPacketCapture mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) StartPacketCapture(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters *network.VpnPacketCaptureStartParameters) (network.VirtualNetworkGatewayConnectionsStartPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPacketCapture", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsStartPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPacketCapture indicates an expected call of StartPacketCapture
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) StartPacketCapture(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPacketCapture", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).StartPacketCapture), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// StopPacketCapture mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) StopPacketCapture(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters network.VpnPacketCaptureStopParameters) (network.VirtualNetworkGatewayConnectionsStopPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPacketCapture", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsStopPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPacketCapture indicates an expected call of StopPacketCapture
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) StopPacketCapture(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPacketCapture", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).StopPacketCapture), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// UpdateTags mocks base method
func (m *MockVirtualNetworkGatewayConnectionsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, virtualNetworkGatewayConnectionName string, parameters network.TagsObject) (network.VirtualNetworkGatewayConnectionsUpdateTagsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkGatewayConnectionsUpdateTagsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualNetworkGatewayConnectionsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualNetworkGatewayConnectionsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
}

// MockLocalNetworkGatewaysClientAPI is a mock of LocalNetworkGatewaysClientAPI interface
type MockLocalNetworkGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLocalNetworkGatewaysClientAPIMockRecorder
}

// MockLocalNetworkGatewaysClientAPIMockRecorder is the mock recorder for MockLocalNetworkGatewaysClientAPI
type MockLocalNetworkGatewaysClientAPIMockRecorder struct {
	mock *MockLocalNetworkGatewaysClientAPI
}

// NewMockLocalNetworkGatewaysClientAPI creates a new mock instance
func NewMockLocalNetworkGatewaysClientAPI(ctrl *gomock.Controller) *MockLocalNetworkGatewaysClientAPI {
	mock := &MockLocalNetworkGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockLocalNetworkGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalNetworkGatewaysClientAPI) EXPECT() *MockLocalNetworkGatewaysClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockLocalNetworkGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, localNetworkGatewayName string, parameters network.LocalNetworkGateway) (network.LocalNetworkGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, localNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.LocalNetworkGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockLocalNetworkGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, localNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockLocalNetworkGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, localNetworkGatewayName, parameters)
}

// Delete mocks base method
func (m *MockLocalNetworkGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, localNetworkGatewayName string) (network.LocalNetworkGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, localNetworkGatewayName)
	ret0, _ := ret[0].(network.LocalNetworkGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockLocalNetworkGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, localNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLocalNetworkGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, localNetworkGatewayName)
}

// Get mocks base method
func (m *MockLocalNetworkGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, localNetworkGatewayName string) (network.LocalNetworkGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, localNetworkGatewayName)
	ret0, _ := ret[0].(network.LocalNetworkGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLocalNetworkGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, localNetworkGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLocalNetworkGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, localNetworkGatewayName)
}

// List mocks base method
func (m *MockLocalNetworkGatewaysClientAPI) List(ctx context.Context, resourceGroupName string) (network.LocalNetworkGatewayListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.LocalNetworkGatewayListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLocalNetworkGatewaysClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLocalNetworkGatewaysClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockLocalNetworkGatewaysClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.LocalNetworkGatewayListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.LocalNetworkGatewayListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockLocalNetworkGatewaysClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockLocalNetworkGatewaysClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockLocalNetworkGatewaysClientAPI) UpdateTags(ctx context.Context, resourceGroupName, localNetworkGatewayName string, parameters network.TagsObject) (network.LocalNetworkGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, localNetworkGatewayName, parameters)
	ret0, _ := ret[0].(network.LocalNetworkGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockLocalNetworkGatewaysClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, localNetworkGatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockLocalNetworkGatewaysClientAPI)(nil).UpdateTags), ctx, resourceGroupName, localNetworkGatewayName, parameters)
}

// MockVirtualNetworkTapsClientAPI is a mock of VirtualNetworkTapsClientAPI interface
type MockVirtualNetworkTapsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworkTapsClientAPIMockRecorder
}

// MockVirtualNetworkTapsClientAPIMockRecorder is the mock recorder for MockVirtualNetworkTapsClientAPI
type MockVirtualNetworkTapsClientAPIMockRecorder struct {
	mock *MockVirtualNetworkTapsClientAPI
}

// NewMockVirtualNetworkTapsClientAPI creates a new mock instance
func NewMockVirtualNetworkTapsClientAPI(ctrl *gomock.Controller) *MockVirtualNetworkTapsClientAPI {
	mock := &MockVirtualNetworkTapsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworkTapsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworkTapsClientAPI) EXPECT() *MockVirtualNetworkTapsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualNetworkTapsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, tapName string, parameters network.VirtualNetworkTap) (network.VirtualNetworkTapsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, tapName, parameters)
	ret0, _ := ret[0].(network.VirtualNetworkTapsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, tapName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, tapName, parameters)
}

// Delete mocks base method
func (m *MockVirtualNetworkTapsClientAPI) Delete(ctx context.Context, resourceGroupName, tapName string) (network.VirtualNetworkTapsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, tapName)
	ret0, _ := ret[0].(network.VirtualNetworkTapsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) Delete(ctx, resourceGroupName, tapName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).Delete), ctx, resourceGroupName, tapName)
}

// Get mocks base method
func (m *MockVirtualNetworkTapsClientAPI) Get(ctx context.Context, resourceGroupName, tapName string) (network.VirtualNetworkTap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, tapName)
	ret0, _ := ret[0].(network.VirtualNetworkTap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) Get(ctx, resourceGroupName, tapName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).Get), ctx, resourceGroupName, tapName)
}

// ListAll mocks base method
func (m *MockVirtualNetworkTapsClientAPI) ListAll(ctx context.Context) (network.VirtualNetworkTapListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.VirtualNetworkTapListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockVirtualNetworkTapsClientAPI) ListAllComplete(ctx context.Context) (network.VirtualNetworkTapListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.VirtualNetworkTapListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).ListAllComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVirtualNetworkTapsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.VirtualNetworkTapListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkTapListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVirtualNetworkTapsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.VirtualNetworkTapListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualNetworkTapListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockVirtualNetworkTapsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, tapName string, tapParameters network.TagsObject) (network.VirtualNetworkTap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, tapName, tapParameters)
	ret0, _ := ret[0].(network.VirtualNetworkTap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualNetworkTapsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, tapName, tapParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualNetworkTapsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, tapName, tapParameters)
}

// MockVirtualRoutersClientAPI is a mock of VirtualRoutersClientAPI interface
type MockVirtualRoutersClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRoutersClientAPIMockRecorder
}

// MockVirtualRoutersClientAPIMockRecorder is the mock recorder for MockVirtualRoutersClientAPI
type MockVirtualRoutersClientAPIMockRecorder struct {
	mock *MockVirtualRoutersClientAPI
}

// NewMockVirtualRoutersClientAPI creates a new mock instance
func NewMockVirtualRoutersClientAPI(ctrl *gomock.Controller) *MockVirtualRoutersClientAPI {
	mock := &MockVirtualRoutersClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualRoutersClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRoutersClientAPI) EXPECT() *MockVirtualRoutersClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualRoutersClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualRouterName string, parameters network.VirtualRouter) (network.VirtualRoutersCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualRouterName, parameters)
	ret0, _ := ret[0].(network.VirtualRoutersCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualRoutersClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualRouterName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualRouterName, parameters)
}

// Delete mocks base method
func (m *MockVirtualRoutersClientAPI) Delete(ctx context.Context, resourceGroupName, virtualRouterName string) (network.VirtualRoutersDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualRouterName)
	ret0, _ := ret[0].(network.VirtualRoutersDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualRoutersClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualRouterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).Delete), ctx, resourceGroupName, virtualRouterName)
}

// Get mocks base method
func (m *MockVirtualRoutersClientAPI) Get(ctx context.Context, resourceGroupName, virtualRouterName, expand string) (network.VirtualRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualRouterName, expand)
	ret0, _ := ret[0].(network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualRoutersClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualRouterName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).Get), ctx, resourceGroupName, virtualRouterName, expand)
}

// List mocks base method
func (m *MockVirtualRoutersClientAPI) List(ctx context.Context) (network.VirtualRouterListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.VirtualRouterListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualRoutersClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVirtualRoutersClientAPI) ListComplete(ctx context.Context) (network.VirtualRouterListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.VirtualRouterListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualRoutersClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVirtualRoutersClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.VirtualRouterListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualRouterListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVirtualRoutersClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVirtualRoutersClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.VirtualRouterListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.VirtualRouterListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVirtualRoutersClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVirtualRoutersClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// MockVirtualRouterPeeringsClientAPI is a mock of VirtualRouterPeeringsClientAPI interface
type MockVirtualRouterPeeringsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterPeeringsClientAPIMockRecorder
}

// MockVirtualRouterPeeringsClientAPIMockRecorder is the mock recorder for MockVirtualRouterPeeringsClientAPI
type MockVirtualRouterPeeringsClientAPIMockRecorder struct {
	mock *MockVirtualRouterPeeringsClientAPI
}

// NewMockVirtualRouterPeeringsClientAPI creates a new mock instance
func NewMockVirtualRouterPeeringsClientAPI(ctrl *gomock.Controller) *MockVirtualRouterPeeringsClientAPI {
	mock := &MockVirtualRouterPeeringsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterPeeringsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterPeeringsClientAPI) EXPECT() *MockVirtualRouterPeeringsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualRouterPeeringsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualRouterName, peeringName string, parameters network.VirtualRouterPeering) (network.VirtualRouterPeeringsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualRouterName, peeringName, parameters)
	ret0, _ := ret[0].(network.VirtualRouterPeeringsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualRouterPeeringsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualRouterName, peeringName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualRouterPeeringsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualRouterName, peeringName, parameters)
}

// Delete mocks base method
func (m *MockVirtualRouterPeeringsClientAPI) Delete(ctx context.Context, resourceGroupName, virtualRouterName, peeringName string) (network.VirtualRouterPeeringsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualRouterName, peeringName)
	ret0, _ := ret[0].(network.VirtualRouterPeeringsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualRouterPeeringsClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualRouterName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualRouterPeeringsClientAPI)(nil).Delete), ctx, resourceGroupName, virtualRouterName, peeringName)
}

// Get mocks base method
func (m *MockVirtualRouterPeeringsClientAPI) Get(ctx context.Context, resourceGroupName, virtualRouterName, peeringName string) (network.VirtualRouterPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualRouterName, peeringName)
	ret0, _ := ret[0].(network.VirtualRouterPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualRouterPeeringsClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualRouterName, peeringName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualRouterPeeringsClientAPI)(nil).Get), ctx, resourceGroupName, virtualRouterName, peeringName)
}

// List mocks base method
func (m *MockVirtualRouterPeeringsClientAPI) List(ctx context.Context, resourceGroupName, virtualRouterName string) (network.VirtualRouterPeeringListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualRouterName)
	ret0, _ := ret[0].(network.VirtualRouterPeeringListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualRouterPeeringsClientAPIMockRecorder) List(ctx, resourceGroupName, virtualRouterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualRouterPeeringsClientAPI)(nil).List), ctx, resourceGroupName, virtualRouterName)
}

// ListComplete mocks base method
func (m *MockVirtualRouterPeeringsClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualRouterName string) (network.VirtualRouterPeeringListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualRouterName)
	ret0, _ := ret[0].(network.VirtualRouterPeeringListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualRouterPeeringsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualRouterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualRouterPeeringsClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualRouterName)
}

// MockVirtualWansClientAPI is a mock of VirtualWansClientAPI interface
type MockVirtualWansClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualWansClientAPIMockRecorder
}

// MockVirtualWansClientAPIMockRecorder is the mock recorder for MockVirtualWansClientAPI
type MockVirtualWansClientAPIMockRecorder struct {
	mock *MockVirtualWansClientAPI
}

// NewMockVirtualWansClientAPI creates a new mock instance
func NewMockVirtualWansClientAPI(ctrl *gomock.Controller) *MockVirtualWansClientAPI {
	mock := &MockVirtualWansClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualWansClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualWansClientAPI) EXPECT() *MockVirtualWansClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualWansClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualWANName string, wANParameters network.VirtualWAN) (network.VirtualWansCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualWANName, wANParameters)
	ret0, _ := ret[0].(network.VirtualWansCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualWansClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualWANName, wANParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualWANName, wANParameters)
}

// Delete mocks base method
func (m *MockVirtualWansClientAPI) Delete(ctx context.Context, resourceGroupName, virtualWANName string) (network.VirtualWansDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualWANName)
	ret0, _ := ret[0].(network.VirtualWansDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualWansClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualWANName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).Delete), ctx, resourceGroupName, virtualWANName)
}

// Get mocks base method
func (m *MockVirtualWansClientAPI) Get(ctx context.Context, resourceGroupName, virtualWANName string) (network.VirtualWAN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualWANName)
	ret0, _ := ret[0].(network.VirtualWAN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualWansClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualWANName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).Get), ctx, resourceGroupName, virtualWANName)
}

// List mocks base method
func (m *MockVirtualWansClientAPI) List(ctx context.Context) (network.ListVirtualWANsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ListVirtualWANsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualWansClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVirtualWansClientAPI) ListComplete(ctx context.Context) (network.ListVirtualWANsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ListVirtualWANsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualWansClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVirtualWansClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ListVirtualWANsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVirtualWANsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVirtualWansClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVirtualWansClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ListVirtualWANsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVirtualWANsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVirtualWansClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockVirtualWansClientAPI) UpdateTags(ctx context.Context, resourceGroupName, virtualWANName string, wANParameters network.TagsObject) (network.VirtualWAN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, virtualWANName, wANParameters)
	ret0, _ := ret[0].(network.VirtualWAN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualWansClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, virtualWANName, wANParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualWansClientAPI)(nil).UpdateTags), ctx, resourceGroupName, virtualWANName, wANParameters)
}

// MockVpnSitesClientAPI is a mock of VpnSitesClientAPI interface
type MockVpnSitesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnSitesClientAPIMockRecorder
}

// MockVpnSitesClientAPIMockRecorder is the mock recorder for MockVpnSitesClientAPI
type MockVpnSitesClientAPIMockRecorder struct {
	mock *MockVpnSitesClientAPI
}

// NewMockVpnSitesClientAPI creates a new mock instance
func NewMockVpnSitesClientAPI(ctrl *gomock.Controller) *MockVpnSitesClientAPI {
	mock := &MockVpnSitesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnSitesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnSitesClientAPI) EXPECT() *MockVpnSitesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVpnSitesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, vpnSiteName string, vpnSiteParameters network.VpnSite) (network.VpnSitesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, vpnSiteName, vpnSiteParameters)
	ret0, _ := ret[0].(network.VpnSitesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVpnSitesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, vpnSiteName, vpnSiteParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, vpnSiteName, vpnSiteParameters)
}

// Delete mocks base method
func (m *MockVpnSitesClientAPI) Delete(ctx context.Context, resourceGroupName, vpnSiteName string) (network.VpnSitesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, vpnSiteName)
	ret0, _ := ret[0].(network.VpnSitesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVpnSitesClientAPIMockRecorder) Delete(ctx, resourceGroupName, vpnSiteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).Delete), ctx, resourceGroupName, vpnSiteName)
}

// Get mocks base method
func (m *MockVpnSitesClientAPI) Get(ctx context.Context, resourceGroupName, vpnSiteName string) (network.VpnSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, vpnSiteName)
	ret0, _ := ret[0].(network.VpnSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVpnSitesClientAPIMockRecorder) Get(ctx, resourceGroupName, vpnSiteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).Get), ctx, resourceGroupName, vpnSiteName)
}

// List mocks base method
func (m *MockVpnSitesClientAPI) List(ctx context.Context) (network.ListVpnSitesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ListVpnSitesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVpnSitesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVpnSitesClientAPI) ListComplete(ctx context.Context) (network.ListVpnSitesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ListVpnSitesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVpnSitesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVpnSitesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ListVpnSitesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVpnSitesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVpnSitesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVpnSitesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ListVpnSitesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVpnSitesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVpnSitesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockVpnSitesClientAPI) UpdateTags(ctx context.Context, resourceGroupName, vpnSiteName string, vpnSiteParameters network.TagsObject) (network.VpnSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, vpnSiteName, vpnSiteParameters)
	ret0, _ := ret[0].(network.VpnSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVpnSitesClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, vpnSiteName, vpnSiteParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVpnSitesClientAPI)(nil).UpdateTags), ctx, resourceGroupName, vpnSiteName, vpnSiteParameters)
}

// MockVpnSiteLinksClientAPI is a mock of VpnSiteLinksClientAPI interface
type MockVpnSiteLinksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnSiteLinksClientAPIMockRecorder
}

// MockVpnSiteLinksClientAPIMockRecorder is the mock recorder for MockVpnSiteLinksClientAPI
type MockVpnSiteLinksClientAPIMockRecorder struct {
	mock *MockVpnSiteLinksClientAPI
}

// NewMockVpnSiteLinksClientAPI creates a new mock instance
func NewMockVpnSiteLinksClientAPI(ctrl *gomock.Controller) *MockVpnSiteLinksClientAPI {
	mock := &MockVpnSiteLinksClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnSiteLinksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnSiteLinksClientAPI) EXPECT() *MockVpnSiteLinksClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockVpnSiteLinksClientAPI) Get(ctx context.Context, resourceGroupName, vpnSiteName, vpnSiteLinkName string) (network.VpnSiteLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, vpnSiteName, vpnSiteLinkName)
	ret0, _ := ret[0].(network.VpnSiteLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVpnSiteLinksClientAPIMockRecorder) Get(ctx, resourceGroupName, vpnSiteName, vpnSiteLinkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVpnSiteLinksClientAPI)(nil).Get), ctx, resourceGroupName, vpnSiteName, vpnSiteLinkName)
}

// ListByVpnSite mocks base method
func (m *MockVpnSiteLinksClientAPI) ListByVpnSite(ctx context.Context, resourceGroupName, vpnSiteName string) (network.ListVpnSiteLinksResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVpnSite", ctx, resourceGroupName, vpnSiteName)
	ret0, _ := ret[0].(network.ListVpnSiteLinksResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVpnSite indicates an expected call of ListByVpnSite
func (mr *MockVpnSiteLinksClientAPIMockRecorder) ListByVpnSite(ctx, resourceGroupName, vpnSiteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVpnSite", reflect.TypeOf((*MockVpnSiteLinksClientAPI)(nil).ListByVpnSite), ctx, resourceGroupName, vpnSiteName)
}

// ListByVpnSiteComplete mocks base method
func (m *MockVpnSiteLinksClientAPI) ListByVpnSiteComplete(ctx context.Context, resourceGroupName, vpnSiteName string) (network.ListVpnSiteLinksResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVpnSiteComplete", ctx, resourceGroupName, vpnSiteName)
	ret0, _ := ret[0].(network.ListVpnSiteLinksResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVpnSiteComplete indicates an expected call of ListByVpnSiteComplete
func (mr *MockVpnSiteLinksClientAPIMockRecorder) ListByVpnSiteComplete(ctx, resourceGroupName, vpnSiteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVpnSiteComplete", reflect.TypeOf((*MockVpnSiteLinksClientAPI)(nil).ListByVpnSiteComplete), ctx, resourceGroupName, vpnSiteName)
}

// MockVpnSitesConfigurationClientAPI is a mock of VpnSitesConfigurationClientAPI interface
type MockVpnSitesConfigurationClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnSitesConfigurationClientAPIMockRecorder
}

// MockVpnSitesConfigurationClientAPIMockRecorder is the mock recorder for MockVpnSitesConfigurationClientAPI
type MockVpnSitesConfigurationClientAPIMockRecorder struct {
	mock *MockVpnSitesConfigurationClientAPI
}

// NewMockVpnSitesConfigurationClientAPI creates a new mock instance
func NewMockVpnSitesConfigurationClientAPI(ctrl *gomock.Controller) *MockVpnSitesConfigurationClientAPI {
	mock := &MockVpnSitesConfigurationClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnSitesConfigurationClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnSitesConfigurationClientAPI) EXPECT() *MockVpnSitesConfigurationClientAPIMockRecorder {
	return m.recorder
}

// Download mocks base method
func (m *MockVpnSitesConfigurationClientAPI) Download(ctx context.Context, resourceGroupName, virtualWANName string, request network.GetVpnSitesConfigurationRequest) (network.VpnSitesConfigurationDownloadFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, resourceGroupName, virtualWANName, request)
	ret0, _ := ret[0].(network.VpnSitesConfigurationDownloadFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockVpnSitesConfigurationClientAPIMockRecorder) Download(ctx, resourceGroupName, virtualWANName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockVpnSitesConfigurationClientAPI)(nil).Download), ctx, resourceGroupName, virtualWANName, request)
}

// MockVpnServerConfigurationsClientAPI is a mock of VpnServerConfigurationsClientAPI interface
type MockVpnServerConfigurationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnServerConfigurationsClientAPIMockRecorder
}

// MockVpnServerConfigurationsClientAPIMockRecorder is the mock recorder for MockVpnServerConfigurationsClientAPI
type MockVpnServerConfigurationsClientAPIMockRecorder struct {
	mock *MockVpnServerConfigurationsClientAPI
}

// NewMockVpnServerConfigurationsClientAPI creates a new mock instance
func NewMockVpnServerConfigurationsClientAPI(ctrl *gomock.Controller) *MockVpnServerConfigurationsClientAPI {
	mock := &MockVpnServerConfigurationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnServerConfigurationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnServerConfigurationsClientAPI) EXPECT() *MockVpnServerConfigurationsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVpnServerConfigurationsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, vpnServerConfigurationName string, vpnServerConfigurationParameters network.VpnServerConfiguration) (network.VpnServerConfigurationsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters)
	ret0, _ := ret[0].(network.VpnServerConfigurationsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters)
}

// Delete mocks base method
func (m *MockVpnServerConfigurationsClientAPI) Delete(ctx context.Context, resourceGroupName, vpnServerConfigurationName string) (network.VpnServerConfigurationsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, vpnServerConfigurationName)
	ret0, _ := ret[0].(network.VpnServerConfigurationsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) Delete(ctx, resourceGroupName, vpnServerConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).Delete), ctx, resourceGroupName, vpnServerConfigurationName)
}

// Get mocks base method
func (m *MockVpnServerConfigurationsClientAPI) Get(ctx context.Context, resourceGroupName, vpnServerConfigurationName string) (network.VpnServerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, vpnServerConfigurationName)
	ret0, _ := ret[0].(network.VpnServerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) Get(ctx, resourceGroupName, vpnServerConfigurationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).Get), ctx, resourceGroupName, vpnServerConfigurationName)
}

// List mocks base method
func (m *MockVpnServerConfigurationsClientAPI) List(ctx context.Context) (network.ListVpnServerConfigurationsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ListVpnServerConfigurationsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVpnServerConfigurationsClientAPI) ListComplete(ctx context.Context) (network.ListVpnServerConfigurationsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ListVpnServerConfigurationsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVpnServerConfigurationsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ListVpnServerConfigurationsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVpnServerConfigurationsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVpnServerConfigurationsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ListVpnServerConfigurationsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVpnServerConfigurationsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockVpnServerConfigurationsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, vpnServerConfigurationName string, vpnServerConfigurationParameters network.TagsObject) (network.VpnServerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters)
	ret0, _ := ret[0].(network.VpnServerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVpnServerConfigurationsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVpnServerConfigurationsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters)
}

// MockVirtualHubsClientAPI is a mock of VirtualHubsClientAPI interface
type MockVirtualHubsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHubsClientAPIMockRecorder
}

// MockVirtualHubsClientAPIMockRecorder is the mock recorder for MockVirtualHubsClientAPI
type MockVirtualHubsClientAPIMockRecorder struct {
	mock *MockVirtualHubsClientAPI
}

// NewMockVirtualHubsClientAPI creates a new mock instance
func NewMockVirtualHubsClientAPI(ctrl *gomock.Controller) *MockVirtualHubsClientAPI {
	mock := &MockVirtualHubsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualHubsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHubsClientAPI) EXPECT() *MockVirtualHubsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualHubsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualHubName string, virtualHubParameters network.VirtualHub) (network.VirtualHubsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualHubName, virtualHubParameters)
	ret0, _ := ret[0].(network.VirtualHubsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualHubsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualHubName, virtualHubParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualHubName, virtualHubParameters)
}

// Delete mocks base method
func (m *MockVirtualHubsClientAPI) Delete(ctx context.Context, resourceGroupName, virtualHubName string) (network.VirtualHubsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.VirtualHubsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualHubsClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).Delete), ctx, resourceGroupName, virtualHubName)
}

// Get mocks base method
func (m *MockVirtualHubsClientAPI) Get(ctx context.Context, resourceGroupName, virtualHubName string) (network.VirtualHub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.VirtualHub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualHubsClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).Get), ctx, resourceGroupName, virtualHubName)
}

// GetEffectiveVirtualHubRoutes mocks base method
func (m *MockVirtualHubsClientAPI) GetEffectiveVirtualHubRoutes(ctx context.Context, resourceGroupName, virtualHubName string, effectiveRoutesParameters *network.EffectiveRoutesParameters) (network.VirtualHubsGetEffectiveVirtualHubRoutesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveVirtualHubRoutes", ctx, resourceGroupName, virtualHubName, effectiveRoutesParameters)
	ret0, _ := ret[0].(network.VirtualHubsGetEffectiveVirtualHubRoutesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveVirtualHubRoutes indicates an expected call of GetEffectiveVirtualHubRoutes
func (mr *MockVirtualHubsClientAPIMockRecorder) GetEffectiveVirtualHubRoutes(ctx, resourceGroupName, virtualHubName, effectiveRoutesParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveVirtualHubRoutes", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).GetEffectiveVirtualHubRoutes), ctx, resourceGroupName, virtualHubName, effectiveRoutesParameters)
}

// List mocks base method
func (m *MockVirtualHubsClientAPI) List(ctx context.Context) (network.ListVirtualHubsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ListVirtualHubsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualHubsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVirtualHubsClientAPI) ListComplete(ctx context.Context) (network.ListVirtualHubsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ListVirtualHubsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualHubsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVirtualHubsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ListVirtualHubsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVirtualHubsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVirtualHubsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVirtualHubsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ListVirtualHubsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVirtualHubsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVirtualHubsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// UpdateTags mocks base method
func (m *MockVirtualHubsClientAPI) UpdateTags(ctx context.Context, resourceGroupName, virtualHubName string, virtualHubParameters network.TagsObject) (network.VirtualHub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, virtualHubName, virtualHubParameters)
	ret0, _ := ret[0].(network.VirtualHub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVirtualHubsClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, virtualHubName, virtualHubParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualHubsClientAPI)(nil).UpdateTags), ctx, resourceGroupName, virtualHubName, virtualHubParameters)
}

// MockHubVirtualNetworkConnectionsClientAPI is a mock of HubVirtualNetworkConnectionsClientAPI interface
type MockHubVirtualNetworkConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHubVirtualNetworkConnectionsClientAPIMockRecorder
}

// MockHubVirtualNetworkConnectionsClientAPIMockRecorder is the mock recorder for MockHubVirtualNetworkConnectionsClientAPI
type MockHubVirtualNetworkConnectionsClientAPIMockRecorder struct {
	mock *MockHubVirtualNetworkConnectionsClientAPI
}

// NewMockHubVirtualNetworkConnectionsClientAPI creates a new mock instance
func NewMockHubVirtualNetworkConnectionsClientAPI(ctrl *gomock.Controller) *MockHubVirtualNetworkConnectionsClientAPI {
	mock := &MockHubVirtualNetworkConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockHubVirtualNetworkConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHubVirtualNetworkConnectionsClientAPI) EXPECT() *MockHubVirtualNetworkConnectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockHubVirtualNetworkConnectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualHubName, connectionName string, hubVirtualNetworkConnectionParameters network.HubVirtualNetworkConnection) (network.HubVirtualNetworkConnectionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualHubName, connectionName, hubVirtualNetworkConnectionParameters)
	ret0, _ := ret[0].(network.HubVirtualNetworkConnectionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockHubVirtualNetworkConnectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualHubName, connectionName, hubVirtualNetworkConnectionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockHubVirtualNetworkConnectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualHubName, connectionName, hubVirtualNetworkConnectionParameters)
}

// Delete mocks base method
func (m *MockHubVirtualNetworkConnectionsClientAPI) Delete(ctx context.Context, resourceGroupName, virtualHubName, connectionName string) (network.HubVirtualNetworkConnectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualHubName, connectionName)
	ret0, _ := ret[0].(network.HubVirtualNetworkConnectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockHubVirtualNetworkConnectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualHubName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHubVirtualNetworkConnectionsClientAPI)(nil).Delete), ctx, resourceGroupName, virtualHubName, connectionName)
}

// Get mocks base method
func (m *MockHubVirtualNetworkConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, virtualHubName, connectionName string) (network.HubVirtualNetworkConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualHubName, connectionName)
	ret0, _ := ret[0].(network.HubVirtualNetworkConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHubVirtualNetworkConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualHubName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHubVirtualNetworkConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, virtualHubName, connectionName)
}

// List mocks base method
func (m *MockHubVirtualNetworkConnectionsClientAPI) List(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListHubVirtualNetworkConnectionsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListHubVirtualNetworkConnectionsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockHubVirtualNetworkConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHubVirtualNetworkConnectionsClientAPI)(nil).List), ctx, resourceGroupName, virtualHubName)
}

// ListComplete mocks base method
func (m *MockHubVirtualNetworkConnectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListHubVirtualNetworkConnectionsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListHubVirtualNetworkConnectionsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockHubVirtualNetworkConnectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockHubVirtualNetworkConnectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualHubName)
}

// MockVpnGatewaysClientAPI is a mock of VpnGatewaysClientAPI interface
type MockVpnGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnGatewaysClientAPIMockRecorder
}

// MockVpnGatewaysClientAPIMockRecorder is the mock recorder for MockVpnGatewaysClientAPI
type MockVpnGatewaysClientAPIMockRecorder struct {
	mock *MockVpnGatewaysClientAPI
}

// NewMockVpnGatewaysClientAPI creates a new mock instance
func NewMockVpnGatewaysClientAPI(ctrl *gomock.Controller) *MockVpnGatewaysClientAPI {
	mock := &MockVpnGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnGatewaysClientAPI) EXPECT() *MockVpnGatewaysClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVpnGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, gatewayName string, vpnGatewayParameters network.VpnGateway) (network.VpnGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, gatewayName, vpnGatewayParameters)
	ret0, _ := ret[0].(network.VpnGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVpnGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, gatewayName, vpnGatewayParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, gatewayName, vpnGatewayParameters)
}

// Delete mocks base method
func (m *MockVpnGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, gatewayName string) (network.VpnGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.VpnGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVpnGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, gatewayName)
}

// Get mocks base method
func (m *MockVpnGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, gatewayName string) (network.VpnGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.VpnGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVpnGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, gatewayName)
}

// List mocks base method
func (m *MockVpnGatewaysClientAPI) List(ctx context.Context) (network.ListVpnGatewaysResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ListVpnGatewaysResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVpnGatewaysClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockVpnGatewaysClientAPI) ListComplete(ctx context.Context) (network.ListVpnGatewaysResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ListVpnGatewaysResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVpnGatewaysClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockVpnGatewaysClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ListVpnGatewaysResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVpnGatewaysResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockVpnGatewaysClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockVpnGatewaysClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ListVpnGatewaysResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListVpnGatewaysResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockVpnGatewaysClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// Reset mocks base method
func (m *MockVpnGatewaysClientAPI) Reset(ctx context.Context, resourceGroupName, gatewayName string) (network.VpnGatewaysResetFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.VpnGatewaysResetFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset
func (mr *MockVpnGatewaysClientAPIMockRecorder) Reset(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).Reset), ctx, resourceGroupName, gatewayName)
}

// StartPacketCapture mocks base method
func (m *MockVpnGatewaysClientAPI) StartPacketCapture(ctx context.Context, resourceGroupName, gatewayName string, parameters *network.VpnGatewayPacketCaptureStartParameters) (network.VpnGatewaysStartPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPacketCapture", ctx, resourceGroupName, gatewayName, parameters)
	ret0, _ := ret[0].(network.VpnGatewaysStartPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPacketCapture indicates an expected call of StartPacketCapture
func (mr *MockVpnGatewaysClientAPIMockRecorder) StartPacketCapture(ctx, resourceGroupName, gatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPacketCapture", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).StartPacketCapture), ctx, resourceGroupName, gatewayName, parameters)
}

// StopPacketCapture mocks base method
func (m *MockVpnGatewaysClientAPI) StopPacketCapture(ctx context.Context, resourceGroupName, gatewayName string, parameters *network.VpnGatewayPacketCaptureStopParameters) (network.VpnGatewaysStopPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPacketCapture", ctx, resourceGroupName, gatewayName, parameters)
	ret0, _ := ret[0].(network.VpnGatewaysStopPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPacketCapture indicates an expected call of StopPacketCapture
func (mr *MockVpnGatewaysClientAPIMockRecorder) StopPacketCapture(ctx, resourceGroupName, gatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPacketCapture", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).StopPacketCapture), ctx, resourceGroupName, gatewayName, parameters)
}

// UpdateTags mocks base method
func (m *MockVpnGatewaysClientAPI) UpdateTags(ctx context.Context, resourceGroupName, gatewayName string, vpnGatewayParameters network.TagsObject) (network.VpnGatewaysUpdateTagsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, gatewayName, vpnGatewayParameters)
	ret0, _ := ret[0].(network.VpnGatewaysUpdateTagsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockVpnGatewaysClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, gatewayName, vpnGatewayParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVpnGatewaysClientAPI)(nil).UpdateTags), ctx, resourceGroupName, gatewayName, vpnGatewayParameters)
}

// MockVpnConnectionsClientAPI is a mock of VpnConnectionsClientAPI interface
type MockVpnConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnConnectionsClientAPIMockRecorder
}

// MockVpnConnectionsClientAPIMockRecorder is the mock recorder for MockVpnConnectionsClientAPI
type MockVpnConnectionsClientAPIMockRecorder struct {
	mock *MockVpnConnectionsClientAPI
}

// NewMockVpnConnectionsClientAPI creates a new mock instance
func NewMockVpnConnectionsClientAPI(ctrl *gomock.Controller) *MockVpnConnectionsClientAPI {
	mock := &MockVpnConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnConnectionsClientAPI) EXPECT() *MockVpnConnectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVpnConnectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, gatewayName, connectionName string, vpnConnectionParameters network.VpnConnection) (network.VpnConnectionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, gatewayName, connectionName, vpnConnectionParameters)
	ret0, _ := ret[0].(network.VpnConnectionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVpnConnectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, gatewayName, connectionName, vpnConnectionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, gatewayName, connectionName, vpnConnectionParameters)
}

// Delete mocks base method
func (m *MockVpnConnectionsClientAPI) Delete(ctx context.Context, resourceGroupName, gatewayName, connectionName string) (network.VpnConnectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, gatewayName, connectionName)
	ret0, _ := ret[0].(network.VpnConnectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVpnConnectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, gatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).Delete), ctx, resourceGroupName, gatewayName, connectionName)
}

// Get mocks base method
func (m *MockVpnConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, gatewayName, connectionName string) (network.VpnConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, gatewayName, connectionName)
	ret0, _ := ret[0].(network.VpnConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVpnConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, gatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, gatewayName, connectionName)
}

// ListByVpnGateway mocks base method
func (m *MockVpnConnectionsClientAPI) ListByVpnGateway(ctx context.Context, resourceGroupName, gatewayName string) (network.ListVpnConnectionsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVpnGateway", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.ListVpnConnectionsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVpnGateway indicates an expected call of ListByVpnGateway
func (mr *MockVpnConnectionsClientAPIMockRecorder) ListByVpnGateway(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVpnGateway", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).ListByVpnGateway), ctx, resourceGroupName, gatewayName)
}

// ListByVpnGatewayComplete mocks base method
func (m *MockVpnConnectionsClientAPI) ListByVpnGatewayComplete(ctx context.Context, resourceGroupName, gatewayName string) (network.ListVpnConnectionsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVpnGatewayComplete", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.ListVpnConnectionsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVpnGatewayComplete indicates an expected call of ListByVpnGatewayComplete
func (mr *MockVpnConnectionsClientAPIMockRecorder) ListByVpnGatewayComplete(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVpnGatewayComplete", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).ListByVpnGatewayComplete), ctx, resourceGroupName, gatewayName)
}

// StartPacketCapture mocks base method
func (m *MockVpnConnectionsClientAPI) StartPacketCapture(ctx context.Context, resourceGroupName, gatewayName, vpnConnectionName string, parameters *network.VpnConnectionPacketCaptureStartParameters) (network.VpnConnectionsStartPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPacketCapture", ctx, resourceGroupName, gatewayName, vpnConnectionName, parameters)
	ret0, _ := ret[0].(network.VpnConnectionsStartPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPacketCapture indicates an expected call of StartPacketCapture
func (mr *MockVpnConnectionsClientAPIMockRecorder) StartPacketCapture(ctx, resourceGroupName, gatewayName, vpnConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPacketCapture", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).StartPacketCapture), ctx, resourceGroupName, gatewayName, vpnConnectionName, parameters)
}

// StopPacketCapture mocks base method
func (m *MockVpnConnectionsClientAPI) StopPacketCapture(ctx context.Context, resourceGroupName, gatewayName, vpnConnectionName string, parameters *network.VpnConnectionPacketCaptureStopParameters) (network.VpnConnectionsStopPacketCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPacketCapture", ctx, resourceGroupName, gatewayName, vpnConnectionName, parameters)
	ret0, _ := ret[0].(network.VpnConnectionsStopPacketCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPacketCapture indicates an expected call of StopPacketCapture
func (mr *MockVpnConnectionsClientAPIMockRecorder) StopPacketCapture(ctx, resourceGroupName, gatewayName, vpnConnectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPacketCapture", reflect.TypeOf((*MockVpnConnectionsClientAPI)(nil).StopPacketCapture), ctx, resourceGroupName, gatewayName, vpnConnectionName, parameters)
}

// MockVpnSiteLinkConnectionsClientAPI is a mock of VpnSiteLinkConnectionsClientAPI interface
type MockVpnSiteLinkConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnSiteLinkConnectionsClientAPIMockRecorder
}

// MockVpnSiteLinkConnectionsClientAPIMockRecorder is the mock recorder for MockVpnSiteLinkConnectionsClientAPI
type MockVpnSiteLinkConnectionsClientAPIMockRecorder struct {
	mock *MockVpnSiteLinkConnectionsClientAPI
}

// NewMockVpnSiteLinkConnectionsClientAPI creates a new mock instance
func NewMockVpnSiteLinkConnectionsClientAPI(ctrl *gomock.Controller) *MockVpnSiteLinkConnectionsClientAPI {
	mock := &MockVpnSiteLinkConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnSiteLinkConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnSiteLinkConnectionsClientAPI) EXPECT() *MockVpnSiteLinkConnectionsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockVpnSiteLinkConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, gatewayName, connectionName, linkConnectionName string) (network.VpnSiteLinkConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, gatewayName, connectionName, linkConnectionName)
	ret0, _ := ret[0].(network.VpnSiteLinkConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVpnSiteLinkConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, gatewayName, connectionName, linkConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVpnSiteLinkConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, gatewayName, connectionName, linkConnectionName)
}

// MockVpnLinkConnectionsClientAPI is a mock of VpnLinkConnectionsClientAPI interface
type MockVpnLinkConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnLinkConnectionsClientAPIMockRecorder
}

// MockVpnLinkConnectionsClientAPIMockRecorder is the mock recorder for MockVpnLinkConnectionsClientAPI
type MockVpnLinkConnectionsClientAPIMockRecorder struct {
	mock *MockVpnLinkConnectionsClientAPI
}

// NewMockVpnLinkConnectionsClientAPI creates a new mock instance
func NewMockVpnLinkConnectionsClientAPI(ctrl *gomock.Controller) *MockVpnLinkConnectionsClientAPI {
	mock := &MockVpnLinkConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnLinkConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnLinkConnectionsClientAPI) EXPECT() *MockVpnLinkConnectionsClientAPIMockRecorder {
	return m.recorder
}

// ListByVpnConnection mocks base method
func (m *MockVpnLinkConnectionsClientAPI) ListByVpnConnection(ctx context.Context, resourceGroupName, gatewayName, connectionName string) (network.ListVpnSiteLinkConnectionsResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVpnConnection", ctx, resourceGroupName, gatewayName, connectionName)
	ret0, _ := ret[0].(network.ListVpnSiteLinkConnectionsResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVpnConnection indicates an expected call of ListByVpnConnection
func (mr *MockVpnLinkConnectionsClientAPIMockRecorder) ListByVpnConnection(ctx, resourceGroupName, gatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVpnConnection", reflect.TypeOf((*MockVpnLinkConnectionsClientAPI)(nil).ListByVpnConnection), ctx, resourceGroupName, gatewayName, connectionName)
}

// ListByVpnConnectionComplete mocks base method
func (m *MockVpnLinkConnectionsClientAPI) ListByVpnConnectionComplete(ctx context.Context, resourceGroupName, gatewayName, connectionName string) (network.ListVpnSiteLinkConnectionsResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVpnConnectionComplete", ctx, resourceGroupName, gatewayName, connectionName)
	ret0, _ := ret[0].(network.ListVpnSiteLinkConnectionsResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVpnConnectionComplete indicates an expected call of ListByVpnConnectionComplete
func (mr *MockVpnLinkConnectionsClientAPIMockRecorder) ListByVpnConnectionComplete(ctx, resourceGroupName, gatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVpnConnectionComplete", reflect.TypeOf((*MockVpnLinkConnectionsClientAPI)(nil).ListByVpnConnectionComplete), ctx, resourceGroupName, gatewayName, connectionName)
}

// MockP2sVpnGatewaysClientAPI is a mock of P2sVpnGatewaysClientAPI interface
type MockP2sVpnGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockP2sVpnGatewaysClientAPIMockRecorder
}

// MockP2sVpnGatewaysClientAPIMockRecorder is the mock recorder for MockP2sVpnGatewaysClientAPI
type MockP2sVpnGatewaysClientAPIMockRecorder struct {
	mock *MockP2sVpnGatewaysClientAPI
}

// NewMockP2sVpnGatewaysClientAPI creates a new mock instance
func NewMockP2sVpnGatewaysClientAPI(ctrl *gomock.Controller) *MockP2sVpnGatewaysClientAPI {
	mock := &MockP2sVpnGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockP2sVpnGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockP2sVpnGatewaysClientAPI) EXPECT() *MockP2sVpnGatewaysClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockP2sVpnGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, gatewayName string, p2SVpnGatewayParameters network.P2SVpnGateway) (network.P2sVpnGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, gatewayName, p2SVpnGatewayParameters)
	ret0, _ := ret[0].(network.P2sVpnGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, gatewayName, p2SVpnGatewayParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, gatewayName, p2SVpnGatewayParameters)
}

// Delete mocks base method
func (m *MockP2sVpnGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, gatewayName string) (network.P2sVpnGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.P2sVpnGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, gatewayName)
}

// DisconnectP2sVpnConnections mocks base method
func (m *MockP2sVpnGatewaysClientAPI) DisconnectP2sVpnConnections(ctx context.Context, resourceGroupName, p2sVpnGatewayName string, request network.P2SVpnConnectionRequest) (network.P2sVpnGatewaysDisconnectP2sVpnConnectionsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectP2sVpnConnections", ctx, resourceGroupName, p2sVpnGatewayName, request)
	ret0, _ := ret[0].(network.P2sVpnGatewaysDisconnectP2sVpnConnectionsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectP2sVpnConnections indicates an expected call of DisconnectP2sVpnConnections
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) DisconnectP2sVpnConnections(ctx, resourceGroupName, p2sVpnGatewayName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectP2sVpnConnections", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).DisconnectP2sVpnConnections), ctx, resourceGroupName, p2sVpnGatewayName, request)
}

// GenerateVpnProfile mocks base method
func (m *MockP2sVpnGatewaysClientAPI) GenerateVpnProfile(ctx context.Context, resourceGroupName, gatewayName string, parameters network.P2SVpnProfileParameters) (network.P2sVpnGatewaysGenerateVpnProfileFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVpnProfile", ctx, resourceGroupName, gatewayName, parameters)
	ret0, _ := ret[0].(network.P2sVpnGatewaysGenerateVpnProfileFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVpnProfile indicates an expected call of GenerateVpnProfile
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) GenerateVpnProfile(ctx, resourceGroupName, gatewayName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVpnProfile", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).GenerateVpnProfile), ctx, resourceGroupName, gatewayName, parameters)
}

// Get mocks base method
func (m *MockP2sVpnGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, gatewayName string) (network.P2SVpnGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.P2SVpnGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, gatewayName)
}

// GetP2sVpnConnectionHealth mocks base method
func (m *MockP2sVpnGatewaysClientAPI) GetP2sVpnConnectionHealth(ctx context.Context, resourceGroupName, gatewayName string) (network.P2sVpnGatewaysGetP2sVpnConnectionHealthFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetP2sVpnConnectionHealth", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.P2sVpnGatewaysGetP2sVpnConnectionHealthFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetP2sVpnConnectionHealth indicates an expected call of GetP2sVpnConnectionHealth
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) GetP2sVpnConnectionHealth(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetP2sVpnConnectionHealth", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).GetP2sVpnConnectionHealth), ctx, resourceGroupName, gatewayName)
}

// GetP2sVpnConnectionHealthDetailed mocks base method
func (m *MockP2sVpnGatewaysClientAPI) GetP2sVpnConnectionHealthDetailed(ctx context.Context, resourceGroupName, gatewayName string, request network.P2SVpnConnectionHealthRequest) (network.P2sVpnGatewaysGetP2sVpnConnectionHealthDetailedFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetP2sVpnConnectionHealthDetailed", ctx, resourceGroupName, gatewayName, request)
	ret0, _ := ret[0].(network.P2sVpnGatewaysGetP2sVpnConnectionHealthDetailedFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetP2sVpnConnectionHealthDetailed indicates an expected call of GetP2sVpnConnectionHealthDetailed
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) GetP2sVpnConnectionHealthDetailed(ctx, resourceGroupName, gatewayName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetP2sVpnConnectionHealthDetailed", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).GetP2sVpnConnectionHealthDetailed), ctx, resourceGroupName, gatewayName, request)
}

// List mocks base method
func (m *MockP2sVpnGatewaysClientAPI) List(ctx context.Context) (network.ListP2SVpnGatewaysResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(network.ListP2SVpnGatewaysResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockP2sVpnGatewaysClientAPI) ListComplete(ctx context.Context) (network.ListP2SVpnGatewaysResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(network.ListP2SVpnGatewaysResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).ListComplete), ctx)
}

// ListByResourceGroup mocks base method
func (m *MockP2sVpnGatewaysClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ListP2SVpnGatewaysResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListP2SVpnGatewaysResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method
func (m *MockP2sVpnGatewaysClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (network.ListP2SVpnGatewaysResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ListP2SVpnGatewaysResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// Reset mocks base method
func (m *MockP2sVpnGatewaysClientAPI) Reset(ctx context.Context, resourceGroupName, gatewayName string) (network.P2SVpnGatewaysResetFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, resourceGroupName, gatewayName)
	ret0, _ := ret[0].(network.P2SVpnGatewaysResetFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) Reset(ctx, resourceGroupName, gatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).Reset), ctx, resourceGroupName, gatewayName)
}

// UpdateTags mocks base method
func (m *MockP2sVpnGatewaysClientAPI) UpdateTags(ctx context.Context, resourceGroupName, gatewayName string, p2SVpnGatewayParameters network.TagsObject) (network.P2sVpnGatewaysUpdateTagsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, gatewayName, p2SVpnGatewayParameters)
	ret0, _ := ret[0].(network.P2sVpnGatewaysUpdateTagsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockP2sVpnGatewaysClientAPIMockRecorder) UpdateTags(ctx, resourceGroupName, gatewayName, p2SVpnGatewayParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockP2sVpnGatewaysClientAPI)(nil).UpdateTags), ctx, resourceGroupName, gatewayName, p2SVpnGatewayParameters)
}

// MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI is a mock of VpnServerConfigurationsAssociatedWithVirtualWanClientAPI interface
type MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPIMockRecorder
}

// MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPIMockRecorder is the mock recorder for MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI
type MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPIMockRecorder struct {
	mock *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI
}

// NewMockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI creates a new mock instance
func NewMockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI(ctrl *gomock.Controller) *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI {
	mock := &MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI{ctrl: ctrl}
	mock.recorder = &MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI) EXPECT() *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI) List(ctx context.Context, resourceGroupName, virtualWANName string) (network.VpnServerConfigurationsAssociatedWithVirtualWanListFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualWANName)
	ret0, _ := ret[0].(network.VpnServerConfigurationsAssociatedWithVirtualWanListFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPIMockRecorder) List(ctx, resourceGroupName, virtualWANName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVpnServerConfigurationsAssociatedWithVirtualWanClientAPI)(nil).List), ctx, resourceGroupName, virtualWANName)
}

// MockVirtualHubRouteTableV2sClientAPI is a mock of VirtualHubRouteTableV2sClientAPI interface
type MockVirtualHubRouteTableV2sClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHubRouteTableV2sClientAPIMockRecorder
}

// MockVirtualHubRouteTableV2sClientAPIMockRecorder is the mock recorder for MockVirtualHubRouteTableV2sClientAPI
type MockVirtualHubRouteTableV2sClientAPIMockRecorder struct {
	mock *MockVirtualHubRouteTableV2sClientAPI
}

// NewMockVirtualHubRouteTableV2sClientAPI creates a new mock instance
func NewMockVirtualHubRouteTableV2sClientAPI(ctrl *gomock.Controller) *MockVirtualHubRouteTableV2sClientAPI {
	mock := &MockVirtualHubRouteTableV2sClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualHubRouteTableV2sClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHubRouteTableV2sClientAPI) EXPECT() *MockVirtualHubRouteTableV2sClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualHubRouteTableV2sClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualHubName, routeTableName string, virtualHubRouteTableV2Parameters network.VirtualHubRouteTableV2) (network.VirtualHubRouteTableV2sCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters)
	ret0, _ := ret[0].(network.VirtualHubRouteTableV2sCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualHubRouteTableV2sClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualHubRouteTableV2sClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters)
}

// Delete mocks base method
func (m *MockVirtualHubRouteTableV2sClientAPI) Delete(ctx context.Context, resourceGroupName, virtualHubName, routeTableName string) (network.VirtualHubRouteTableV2sDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualHubName, routeTableName)
	ret0, _ := ret[0].(network.VirtualHubRouteTableV2sDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualHubRouteTableV2sClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualHubName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualHubRouteTableV2sClientAPI)(nil).Delete), ctx, resourceGroupName, virtualHubName, routeTableName)
}

// Get mocks base method
func (m *MockVirtualHubRouteTableV2sClientAPI) Get(ctx context.Context, resourceGroupName, virtualHubName, routeTableName string) (network.VirtualHubRouteTableV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualHubName, routeTableName)
	ret0, _ := ret[0].(network.VirtualHubRouteTableV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualHubRouteTableV2sClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualHubName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualHubRouteTableV2sClientAPI)(nil).Get), ctx, resourceGroupName, virtualHubName, routeTableName)
}

// List mocks base method
func (m *MockVirtualHubRouteTableV2sClientAPI) List(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListVirtualHubRouteTableV2sResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListVirtualHubRouteTableV2sResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualHubRouteTableV2sClientAPIMockRecorder) List(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualHubRouteTableV2sClientAPI)(nil).List), ctx, resourceGroupName, virtualHubName)
}

// ListComplete mocks base method
func (m *MockVirtualHubRouteTableV2sClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListVirtualHubRouteTableV2sResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListVirtualHubRouteTableV2sResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualHubRouteTableV2sClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualHubRouteTableV2sClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualHubName)
}

// MockExpressRouteGatewaysClientAPI is a mock of ExpressRouteGatewaysClientAPI interface
type MockExpressRouteGatewaysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteGatewaysClientAPIMockRecorder
}

// MockExpressRouteGatewaysClientAPIMockRecorder is the mock recorder for MockExpressRouteGatewaysClientAPI
type MockExpressRouteGatewaysClientAPIMockRecorder struct {
	mock *MockExpressRouteGatewaysClientAPI
}

// NewMockExpressRouteGatewaysClientAPI creates a new mock instance
func NewMockExpressRouteGatewaysClientAPI(ctrl *gomock.Controller) *MockExpressRouteGatewaysClientAPI {
	mock := &MockExpressRouteGatewaysClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteGatewaysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteGatewaysClientAPI) EXPECT() *MockExpressRouteGatewaysClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteGatewaysClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, expressRouteGatewayName string, putExpressRouteGatewayParameters network.ExpressRouteGateway) (network.ExpressRouteGatewaysCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters)
	ret0, _ := ret[0].(network.ExpressRouteGatewaysCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteGatewaysClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteGatewaysClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters)
}

// Delete mocks base method
func (m *MockExpressRouteGatewaysClientAPI) Delete(ctx context.Context, resourceGroupName, expressRouteGatewayName string) (network.ExpressRouteGatewaysDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, expressRouteGatewayName)
	ret0, _ := ret[0].(network.ExpressRouteGatewaysDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteGatewaysClientAPIMockRecorder) Delete(ctx, resourceGroupName, expressRouteGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteGatewaysClientAPI)(nil).Delete), ctx, resourceGroupName, expressRouteGatewayName)
}

// Get mocks base method
func (m *MockExpressRouteGatewaysClientAPI) Get(ctx context.Context, resourceGroupName, expressRouteGatewayName string) (network.ExpressRouteGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, expressRouteGatewayName)
	ret0, _ := ret[0].(network.ExpressRouteGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteGatewaysClientAPIMockRecorder) Get(ctx, resourceGroupName, expressRouteGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteGatewaysClientAPI)(nil).Get), ctx, resourceGroupName, expressRouteGatewayName)
}

// ListByResourceGroup mocks base method
func (m *MockExpressRouteGatewaysClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (network.ExpressRouteGatewayList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.ExpressRouteGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockExpressRouteGatewaysClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockExpressRouteGatewaysClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListBySubscription mocks base method
func (m *MockExpressRouteGatewaysClientAPI) ListBySubscription(ctx context.Context) (network.ExpressRouteGatewayList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(network.ExpressRouteGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription
func (mr *MockExpressRouteGatewaysClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockExpressRouteGatewaysClientAPI)(nil).ListBySubscription), ctx)
}

// MockExpressRouteConnectionsClientAPI is a mock of ExpressRouteConnectionsClientAPI interface
type MockExpressRouteConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteConnectionsClientAPIMockRecorder
}

// MockExpressRouteConnectionsClientAPIMockRecorder is the mock recorder for MockExpressRouteConnectionsClientAPI
type MockExpressRouteConnectionsClientAPIMockRecorder struct {
	mock *MockExpressRouteConnectionsClientAPI
}

// NewMockExpressRouteConnectionsClientAPI creates a new mock instance
func NewMockExpressRouteConnectionsClientAPI(ctrl *gomock.Controller) *MockExpressRouteConnectionsClientAPI {
	mock := &MockExpressRouteConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockExpressRouteConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpressRouteConnectionsClientAPI) EXPECT() *MockExpressRouteConnectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockExpressRouteConnectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, expressRouteGatewayName, connectionName string, putExpressRouteConnectionParameters network.ExpressRouteConnection) (network.ExpressRouteConnectionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters)
	ret0, _ := ret[0].(network.ExpressRouteConnectionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockExpressRouteConnectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockExpressRouteConnectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters)
}

// Delete mocks base method
func (m *MockExpressRouteConnectionsClientAPI) Delete(ctx context.Context, resourceGroupName, expressRouteGatewayName, connectionName string) (network.ExpressRouteConnectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, expressRouteGatewayName, connectionName)
	ret0, _ := ret[0].(network.ExpressRouteConnectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockExpressRouteConnectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, expressRouteGatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpressRouteConnectionsClientAPI)(nil).Delete), ctx, resourceGroupName, expressRouteGatewayName, connectionName)
}

// Get mocks base method
func (m *MockExpressRouteConnectionsClientAPI) Get(ctx context.Context, resourceGroupName, expressRouteGatewayName, connectionName string) (network.ExpressRouteConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, expressRouteGatewayName, connectionName)
	ret0, _ := ret[0].(network.ExpressRouteConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockExpressRouteConnectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, expressRouteGatewayName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteConnectionsClientAPI)(nil).Get), ctx, resourceGroupName, expressRouteGatewayName, connectionName)
}

// List mocks base method
func (m *MockExpressRouteConnectionsClientAPI) List(ctx context.Context, resourceGroupName, expressRouteGatewayName string) (network.ExpressRouteConnectionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, expressRouteGatewayName)
	ret0, _ := ret[0].(network.ExpressRouteConnectionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockExpressRouteConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName, expressRouteGatewayName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpressRouteConnectionsClientAPI)(nil).List), ctx, resourceGroupName, expressRouteGatewayName)
}

// MockVirtualHubBgpConnectionClientAPI is a mock of VirtualHubBgpConnectionClientAPI interface
type MockVirtualHubBgpConnectionClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHubBgpConnectionClientAPIMockRecorder
}

// MockVirtualHubBgpConnectionClientAPIMockRecorder is the mock recorder for MockVirtualHubBgpConnectionClientAPI
type MockVirtualHubBgpConnectionClientAPIMockRecorder struct {
	mock *MockVirtualHubBgpConnectionClientAPI
}

// NewMockVirtualHubBgpConnectionClientAPI creates a new mock instance
func NewMockVirtualHubBgpConnectionClientAPI(ctrl *gomock.Controller) *MockVirtualHubBgpConnectionClientAPI {
	mock := &MockVirtualHubBgpConnectionClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualHubBgpConnectionClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHubBgpConnectionClientAPI) EXPECT() *MockVirtualHubBgpConnectionClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualHubBgpConnectionClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualHubName, connectionName string, parameters network.BgpConnection) (network.VirtualHubBgpConnectionCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualHubName, connectionName, parameters)
	ret0, _ := ret[0].(network.VirtualHubBgpConnectionCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualHubBgpConnectionClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualHubName, connectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualHubBgpConnectionClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualHubName, connectionName, parameters)
}

// Delete mocks base method
func (m *MockVirtualHubBgpConnectionClientAPI) Delete(ctx context.Context, resourceGroupName, virtualHubName, connectionName string) (network.VirtualHubBgpConnectionDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualHubName, connectionName)
	ret0, _ := ret[0].(network.VirtualHubBgpConnectionDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualHubBgpConnectionClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualHubName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualHubBgpConnectionClientAPI)(nil).Delete), ctx, resourceGroupName, virtualHubName, connectionName)
}

// Get mocks base method
func (m *MockVirtualHubBgpConnectionClientAPI) Get(ctx context.Context, resourceGroupName, virtualHubName, connectionName string) (network.BgpConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualHubName, connectionName)
	ret0, _ := ret[0].(network.BgpConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualHubBgpConnectionClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualHubName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualHubBgpConnectionClientAPI)(nil).Get), ctx, resourceGroupName, virtualHubName, connectionName)
}

// MockVirtualHubBgpConnectionsClientAPI is a mock of VirtualHubBgpConnectionsClientAPI interface
type MockVirtualHubBgpConnectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHubBgpConnectionsClientAPIMockRecorder
}

// MockVirtualHubBgpConnectionsClientAPIMockRecorder is the mock recorder for MockVirtualHubBgpConnectionsClientAPI
type MockVirtualHubBgpConnectionsClientAPIMockRecorder struct {
	mock *MockVirtualHubBgpConnectionsClientAPI
}

// NewMockVirtualHubBgpConnectionsClientAPI creates a new mock instance
func NewMockVirtualHubBgpConnectionsClientAPI(ctrl *gomock.Controller) *MockVirtualHubBgpConnectionsClientAPI {
	mock := &MockVirtualHubBgpConnectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualHubBgpConnectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHubBgpConnectionsClientAPI) EXPECT() *MockVirtualHubBgpConnectionsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockVirtualHubBgpConnectionsClientAPI) List(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListVirtualHubBgpConnectionResultsPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListVirtualHubBgpConnectionResultsPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualHubBgpConnectionsClientAPIMockRecorder) List(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualHubBgpConnectionsClientAPI)(nil).List), ctx, resourceGroupName, virtualHubName)
}

// ListComplete mocks base method
func (m *MockVirtualHubBgpConnectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListVirtualHubBgpConnectionResultsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListVirtualHubBgpConnectionResultsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualHubBgpConnectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualHubBgpConnectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualHubName)
}

// ListAdvertisedRoutes mocks base method
func (m *MockVirtualHubBgpConnectionsClientAPI) ListAdvertisedRoutes(ctx context.Context, resourceGroupName, hubName, connectionName string) (network.VirtualHubBgpConnectionsListAdvertisedRoutesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdvertisedRoutes", ctx, resourceGroupName, hubName, connectionName)
	ret0, _ := ret[0].(network.VirtualHubBgpConnectionsListAdvertisedRoutesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdvertisedRoutes indicates an expected call of ListAdvertisedRoutes
func (mr *MockVirtualHubBgpConnectionsClientAPIMockRecorder) ListAdvertisedRoutes(ctx, resourceGroupName, hubName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdvertisedRoutes", reflect.TypeOf((*MockVirtualHubBgpConnectionsClientAPI)(nil).ListAdvertisedRoutes), ctx, resourceGroupName, hubName, connectionName)
}

// ListLearnedRoutes mocks base method
func (m *MockVirtualHubBgpConnectionsClientAPI) ListLearnedRoutes(ctx context.Context, resourceGroupName, hubName, connectionName string) (network.VirtualHubBgpConnectionsListLearnedRoutesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLearnedRoutes", ctx, resourceGroupName, hubName, connectionName)
	ret0, _ := ret[0].(network.VirtualHubBgpConnectionsListLearnedRoutesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLearnedRoutes indicates an expected call of ListLearnedRoutes
func (mr *MockVirtualHubBgpConnectionsClientAPIMockRecorder) ListLearnedRoutes(ctx, resourceGroupName, hubName, connectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLearnedRoutes", reflect.TypeOf((*MockVirtualHubBgpConnectionsClientAPI)(nil).ListLearnedRoutes), ctx, resourceGroupName, hubName, connectionName)
}

// MockVirtualHubIPConfigurationClientAPI is a mock of VirtualHubIPConfigurationClientAPI interface
type MockVirtualHubIPConfigurationClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualHubIPConfigurationClientAPIMockRecorder
}

// MockVirtualHubIPConfigurationClientAPIMockRecorder is the mock recorder for MockVirtualHubIPConfigurationClientAPI
type MockVirtualHubIPConfigurationClientAPIMockRecorder struct {
	mock *MockVirtualHubIPConfigurationClientAPI
}

// NewMockVirtualHubIPConfigurationClientAPI creates a new mock instance
func NewMockVirtualHubIPConfigurationClientAPI(ctrl *gomock.Controller) *MockVirtualHubIPConfigurationClientAPI {
	mock := &MockVirtualHubIPConfigurationClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualHubIPConfigurationClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualHubIPConfigurationClientAPI) EXPECT() *MockVirtualHubIPConfigurationClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualHubIPConfigurationClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualHubName, IPConfigName string, parameters network.HubIPConfiguration) (network.VirtualHubIPConfigurationCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualHubName, IPConfigName, parameters)
	ret0, _ := ret[0].(network.VirtualHubIPConfigurationCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualHubIPConfigurationClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualHubName, IPConfigName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualHubIPConfigurationClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualHubName, IPConfigName, parameters)
}

// Delete mocks base method
func (m *MockVirtualHubIPConfigurationClientAPI) Delete(ctx context.Context, resourceGroupName, virtualHubName, IPConfigName string) (network.VirtualHubIPConfigurationDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualHubName, IPConfigName)
	ret0, _ := ret[0].(network.VirtualHubIPConfigurationDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualHubIPConfigurationClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualHubName, IPConfigName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualHubIPConfigurationClientAPI)(nil).Delete), ctx, resourceGroupName, virtualHubName, IPConfigName)
}

// Get mocks base method
func (m *MockVirtualHubIPConfigurationClientAPI) Get(ctx context.Context, resourceGroupName, virtualHubName, IPConfigName string) (network.HubIPConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualHubName, IPConfigName)
	ret0, _ := ret[0].(network.HubIPConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualHubIPConfigurationClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualHubName, IPConfigName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualHubIPConfigurationClientAPI)(nil).Get), ctx, resourceGroupName, virtualHubName, IPConfigName)
}

// List mocks base method
func (m *MockVirtualHubIPConfigurationClientAPI) List(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListVirtualHubIPConfigurationResultsPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListVirtualHubIPConfigurationResultsPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualHubIPConfigurationClientAPIMockRecorder) List(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualHubIPConfigurationClientAPI)(nil).List), ctx, resourceGroupName, virtualHubName)
}

// ListComplete mocks base method
func (m *MockVirtualHubIPConfigurationClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListVirtualHubIPConfigurationResultsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListVirtualHubIPConfigurationResultsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockVirtualHubIPConfigurationClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualHubIPConfigurationClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualHubName)
}

// MockHubRouteTablesClientAPI is a mock of HubRouteTablesClientAPI interface
type MockHubRouteTablesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHubRouteTablesClientAPIMockRecorder
}

// MockHubRouteTablesClientAPIMockRecorder is the mock recorder for MockHubRouteTablesClientAPI
type MockHubRouteTablesClientAPIMockRecorder struct {
	mock *MockHubRouteTablesClientAPI
}

// NewMockHubRouteTablesClientAPI creates a new mock instance
func NewMockHubRouteTablesClientAPI(ctrl *gomock.Controller) *MockHubRouteTablesClientAPI {
	mock := &MockHubRouteTablesClientAPI{ctrl: ctrl}
	mock.recorder = &MockHubRouteTablesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHubRouteTablesClientAPI) EXPECT() *MockHubRouteTablesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockHubRouteTablesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, virtualHubName, routeTableName string, routeTableParameters network.HubRouteTable) (network.HubRouteTablesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, virtualHubName, routeTableName, routeTableParameters)
	ret0, _ := ret[0].(network.HubRouteTablesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockHubRouteTablesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, virtualHubName, routeTableName, routeTableParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockHubRouteTablesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, virtualHubName, routeTableName, routeTableParameters)
}

// Delete mocks base method
func (m *MockHubRouteTablesClientAPI) Delete(ctx context.Context, resourceGroupName, virtualHubName, routeTableName string) (network.HubRouteTablesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, virtualHubName, routeTableName)
	ret0, _ := ret[0].(network.HubRouteTablesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockHubRouteTablesClientAPIMockRecorder) Delete(ctx, resourceGroupName, virtualHubName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHubRouteTablesClientAPI)(nil).Delete), ctx, resourceGroupName, virtualHubName, routeTableName)
}

// Get mocks base method
func (m *MockHubRouteTablesClientAPI) Get(ctx context.Context, resourceGroupName, virtualHubName, routeTableName string) (network.HubRouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualHubName, routeTableName)
	ret0, _ := ret[0].(network.HubRouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHubRouteTablesClientAPIMockRecorder) Get(ctx, resourceGroupName, virtualHubName, routeTableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHubRouteTablesClientAPI)(nil).Get), ctx, resourceGroupName, virtualHubName, routeTableName)
}

// List mocks base method
func (m *MockHubRouteTablesClientAPI) List(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListHubRouteTablesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListHubRouteTablesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockHubRouteTablesClientAPIMockRecorder) List(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHubRouteTablesClientAPI)(nil).List), ctx, resourceGroupName, virtualHubName)
}

// ListComplete mocks base method
func (m *MockHubRouteTablesClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualHubName string) (network.ListHubRouteTablesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualHubName)
	ret0, _ := ret[0].(network.ListHubRouteTablesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockHubRouteTablesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualHubName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockHubRouteTablesClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualHubName)
}

// MockWebApplicationFirewallPoliciesClientAPI is a mock of WebApplicationFirewallPoliciesClientAPI interface
type MockWebApplicationFirewallPoliciesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWebApplicationFirewallPoliciesClientAPIMockRecorder
}

// MockWebApplicationFirewallPoliciesClientAPIMockRecorder is the mock recorder for MockWebApplicationFirewallPoliciesClientAPI
type MockWebApplicationFirewallPoliciesClientAPIMockRecorder struct {
	mock *MockWebApplicationFirewallPoliciesClientAPI
}

// NewMockWebApplicationFirewallPoliciesClientAPI creates a new mock instance
func NewMockWebApplicationFirewallPoliciesClientAPI(ctrl *gomock.Controller) *MockWebApplicationFirewallPoliciesClientAPI {
	mock := &MockWebApplicationFirewallPoliciesClientAPI{ctrl: ctrl}
	mock.recorder = &MockWebApplicationFirewallPoliciesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebApplicationFirewallPoliciesClientAPI) EXPECT() *MockWebApplicationFirewallPoliciesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, policyName string, parameters network.WebApplicationFirewallPolicy) (network.WebApplicationFirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, policyName, parameters)
	ret0, _ := ret[0].(network.WebApplicationFirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, policyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, policyName, parameters)
}

// Delete mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) Delete(ctx context.Context, resourceGroupName, policyName string) (network.WebApplicationFirewallPoliciesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, policyName)
	ret0, _ := ret[0].(network.WebApplicationFirewallPoliciesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) Delete(ctx, resourceGroupName, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).Delete), ctx, resourceGroupName, policyName)
}

// Get mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) Get(ctx context.Context, resourceGroupName, policyName string) (network.WebApplicationFirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, policyName)
	ret0, _ := ret[0].(network.WebApplicationFirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) Get(ctx, resourceGroupName, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).Get), ctx, resourceGroupName, policyName)
}

// List mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) List(ctx context.Context, resourceGroupName string) (network.WebApplicationFirewallPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.WebApplicationFirewallPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListComplete mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (network.WebApplicationFirewallPolicyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(network.WebApplicationFirewallPolicyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListAll mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) ListAll(ctx context.Context) (network.WebApplicationFirewallPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(network.WebApplicationFirewallPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method
func (m *MockWebApplicationFirewallPoliciesClientAPI) ListAllComplete(ctx context.Context) (network.WebApplicationFirewallPolicyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(network.WebApplicationFirewallPolicyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete
func (mr *MockWebApplicationFirewallPoliciesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockWebApplicationFirewallPoliciesClientAPI)(nil).ListAllComplete), ctx)
}
