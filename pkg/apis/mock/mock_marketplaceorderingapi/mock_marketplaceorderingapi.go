// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/i538135/go/src/github.com/gardener/machine-controller-manager-provider-azure/vendor/github.com/Azure/azure-sdk-for-go/services/marketplaceordering/mgmt/2015-06-01/marketplaceordering/marketplaceorderingapi/interfaces.go

// Package mock_marketplaceorderingapi is a generated GoMock package.
package mock_marketplaceorderingapi

import (
	context "context"
	marketplaceordering "github.com/Azure/azure-sdk-for-go/services/marketplaceordering/mgmt/2015-06-01/marketplaceordering"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketplaceAgreementsClientAPI is a mock of MarketplaceAgreementsClientAPI interface
type MockMarketplaceAgreementsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceAgreementsClientAPIMockRecorder
}

// MockMarketplaceAgreementsClientAPIMockRecorder is the mock recorder for MockMarketplaceAgreementsClientAPI
type MockMarketplaceAgreementsClientAPIMockRecorder struct {
	mock *MockMarketplaceAgreementsClientAPI
}

// NewMockMarketplaceAgreementsClientAPI creates a new mock instance
func NewMockMarketplaceAgreementsClientAPI(ctrl *gomock.Controller) *MockMarketplaceAgreementsClientAPI {
	mock := &MockMarketplaceAgreementsClientAPI{ctrl: ctrl}
	mock.recorder = &MockMarketplaceAgreementsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketplaceAgreementsClientAPI) EXPECT() *MockMarketplaceAgreementsClientAPIMockRecorder {
	return m.recorder
}

// Cancel mocks base method
func (m *MockMarketplaceAgreementsClientAPI) Cancel(ctx context.Context, publisherID, offerID, planID string) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, publisherID, offerID, planID)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockMarketplaceAgreementsClientAPIMockRecorder) Cancel(ctx, publisherID, offerID, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockMarketplaceAgreementsClientAPI)(nil).Cancel), ctx, publisherID, offerID, planID)
}

// Create mocks base method
func (m *MockMarketplaceAgreementsClientAPI) Create(ctx context.Context, publisherID, offerID, planID string, parameters marketplaceordering.AgreementTerms) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, publisherID, offerID, planID, parameters)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMarketplaceAgreementsClientAPIMockRecorder) Create(ctx, publisherID, offerID, planID, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMarketplaceAgreementsClientAPI)(nil).Create), ctx, publisherID, offerID, planID, parameters)
}

// Get mocks base method
func (m *MockMarketplaceAgreementsClientAPI) Get(ctx context.Context, publisherID, offerID, planID string) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, publisherID, offerID, planID)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMarketplaceAgreementsClientAPIMockRecorder) Get(ctx, publisherID, offerID, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMarketplaceAgreementsClientAPI)(nil).Get), ctx, publisherID, offerID, planID)
}

// GetAgreement mocks base method
func (m *MockMarketplaceAgreementsClientAPI) GetAgreement(ctx context.Context, publisherID, offerID, planID string) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreement", ctx, publisherID, offerID, planID)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreement indicates an expected call of GetAgreement
func (mr *MockMarketplaceAgreementsClientAPIMockRecorder) GetAgreement(ctx, publisherID, offerID, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreement", reflect.TypeOf((*MockMarketplaceAgreementsClientAPI)(nil).GetAgreement), ctx, publisherID, offerID, planID)
}

// List mocks base method
func (m *MockMarketplaceAgreementsClientAPI) List(ctx context.Context) (marketplaceordering.ListAgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(marketplaceordering.ListAgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMarketplaceAgreementsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMarketplaceAgreementsClientAPI)(nil).List), ctx)
}

// Sign mocks base method
func (m *MockMarketplaceAgreementsClientAPI) Sign(ctx context.Context, publisherID, offerID, planID string) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, publisherID, offerID, planID)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockMarketplaceAgreementsClientAPIMockRecorder) Sign(ctx, publisherID, offerID, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockMarketplaceAgreementsClientAPI)(nil).Sign), ctx, publisherID, offerID, planID)
}

// MockOperationsClientAPI is a mock of OperationsClientAPI interface
type MockOperationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsClientAPIMockRecorder
}

// MockOperationsClientAPIMockRecorder is the mock recorder for MockOperationsClientAPI
type MockOperationsClientAPIMockRecorder struct {
	mock *MockOperationsClientAPI
}

// NewMockOperationsClientAPI creates a new mock instance
func NewMockOperationsClientAPI(ctrl *gomock.Controller) *MockOperationsClientAPI {
	mock := &MockOperationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockOperationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperationsClientAPI) EXPECT() *MockOperationsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockOperationsClientAPI) List(ctx context.Context) (marketplaceordering.OperationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(marketplaceordering.OperationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockOperationsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOperationsClientAPI)(nil).List), ctx)
}

// ListComplete mocks base method
func (m *MockOperationsClientAPI) ListComplete(ctx context.Context) (marketplaceordering.OperationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(marketplaceordering.OperationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete
func (mr *MockOperationsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockOperationsClientAPI)(nil).ListComplete), ctx)
}
